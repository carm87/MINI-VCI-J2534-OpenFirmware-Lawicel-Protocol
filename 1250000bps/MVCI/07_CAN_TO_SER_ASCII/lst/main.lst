   1              		.cpu arm7tdmi
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	2
  16              		.global	hex2ascii
  17              		.arch armv4t
  18              		.syntax unified
  19              		.arm
  20              		.fpu softvfp
  22              	hex2ascii:
  23              	.LVL0:
  24              	.LFB3:
  25              		.file 1 "./src/main.c"
   1:./src/main.c  **** 
   2:./src/main.c  **** #include "datatypes.h"
   3:./src/main.c  **** #include "can.h"
   4:./src/main.c  **** #include "can_user.h"
   5:./src/main.c  **** #include "hardware.h"
   6:./src/main.c  **** #include "crc_data.h"
   7:./src/main.c  **** #include "systime.h"
   8:./src/main.c  **** #include "serial.h"
   9:./src/main.c  **** #include "ser_user.h"
  10:./src/main.c  **** #include <stdio.h>
  11:./src/main.c  **** #include <stdlib.h>
  12:./src/main.c  **** #include <string.h>
  13:./src/main.c  **** #include "lpc21xx.h"
  14:./src/main.c  **** 
  15:./src/main.c  **** // size for user text buffer received from partner like terminal program or other device
  16:./src/main.c  **** #define	USER_TEXT_SIZE		30
  17:./src/main.c  **** 
  18:./src/main.c  **** 
  19:./src/main.c  **** #define ret_OK    0xD // [CR]   "\r"
  20:./src/main.c  **** #define ret_ERROR 0x7 // [Bell] "\a"
  21:./src/main.c  **** 
  22:./src/main.c  **** // max. serial buffer length: 29bit-frame plus timestamp plus \r plus trailing zero
  23:./src/main.c  **** #define buflen (sizeof("T1FFFFFFF81122334455667788EA5F\r")+1)
  24:./src/main.c  **** u8_t	SerXmtBuf[buflen]; // will assemble and send data to the Host-PC / RS232
  25:./src/main.c  **** u8_t	SerXmtBufPtr = 0;
  26:./src/main.c  **** u8_t	SerRcvBuf[buflen]; // holds commands from the Host-PC / RS232
  27:./src/main.c  **** u8_t	SerRcvBufPtr = 0;
  28:./src/main.c  **** CANMsg_t  CanRxMsg, CanTxMsg;
  29:./src/main.c  **** u32_t CanSpeed=6;
  30:./src/main.c  **** void ProcessMsgFromSerial(void);
  31:./src/main.c  **** static void TransmitStandardFrame(void) ;
  32:./src/main.c  **** static void TransmitExtendedFrame(void) ;
  33:./src/main.c  **** u8_t ascii2hex(u8_t chr);
  34:./src/main.c  **** static void SetCanBTR0BTR1(void) ;
  35:./src/main.c  **** static void TransmitStandardRtr(void) ;
  36:./src/main.c  **** static void TransmitExtendedRtr(void) ;
  37:./src/main.c  **** static void GetStatusFlags(void) ;
  38:./src/main.c  **** static void SetAutoPollAutoSend(void) ;
  39:./src/main.c  **** static void SetFilterMode(void) ;
  40:./src/main.c  **** static void GetVersionInfo(void) ;
  41:./src/main.c  **** static void GetSerialNumber(void) ;
  42:./src/main.c  **** static void SetRcvTimestampMode(void) ;
  43:./src/main.c  **** void ProcessMsgFromCan(void) ;
  44:./src/main.c  **** u8_t hex2ascii(u8_t chr);
  45:./src/main.c  **** extern CANStatus_t  CAN_InitChannelMio (	CANHandle_t  hBus, u32_t Timing);
  46:./src/main.c  **** 
  47:./src/main.c  **** 
  48:./src/main.c  **** u16_t Millitimer = 0;
  49:./src/main.c  **** u32_t TimeDiff1000Hz = 0;
  50:./src/main.c  **** u32_t LedTimeDiff = 0;
  51:./src/main.c  **** 
  52:./src/main.c  **** 
  53:./src/main.c  **** 
  54:./src/main.c  **** // variables for LED toggle
  55:./src/main.c  **** static u8_t LED_toggleCAN1;
  56:./src/main.c  **** 
  57:./src/main.c  **** // variabili di  stato
  58:./src/main.c  **** u8_t CanChnOpen=0;
  59:./src/main.c  **** u8_t CanInitialized=0;
  60:./src/main.c  **** u8_t CanBusMode = BUS_OFF;
  61:./src/main.c  **** u8_t AutostartMode=0;
  62:./src/main.c  **** u8_t AutoPollAutoSend=1;
  63:./src/main.c  **** u8_t FilterMode=0;
  64:./src/main.c  **** u8_t CanRcvTimestampOn=0;
  65:./src/main.c  **** 
  66:./src/main.c  **** 
  67:./src/main.c  **** 
  68:./src/main.c  **** u8_t SerRxOverrunOccurred=0;
  69:./src/main.c  **** u8_t SerTxCongestionOccurred=0;
  70:./src/main.c  **** // Write to UART was either ok or TX queue was full (repeat in latter case)
  71:./src/main.c  **** SERStatus_t UARTWriteResult;
  72:./src/main.c  **** 
  73:./src/main.c  **** u8_t hex2ascii(u8_t chr)
  74:./src/main.c  **** {
  26              		.loc 1 74 1 view -0
  27              		.cfi_startproc
  28              		@ Function supports interworking.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  75:./src/main.c  **** 	chr = chr & 0xF;
  32              		.loc 1 75 2 view .LVU1
  33              		.loc 1 75 6 is_stmt 0 view .LVU2
  34 0000 0F0000E2 		and	r0, r0, #15
  35              	.LVL1:
  76:./src/main.c  **** 	if(chr > 9)
  36              		.loc 1 76 2 is_stmt 1 view .LVU3
  77:./src/main.c  **** 	{
  78:./src/main.c  **** 		chr += 0x37;
  37              		.loc 1 78 3 view .LVU4
  76:./src/main.c  **** 	if(chr > 9)
  38              		.loc 1 76 4 is_stmt 0 view .LVU5
  39 0004 090050E3 		cmp	r0, #9
  40              		.loc 1 78 7 view .LVU6
  41 0008 37008082 		addhi	r0, r0, #55
  42              	.LVL2:
  79:./src/main.c  **** 	}
  80:./src/main.c  **** 	else
  81:./src/main.c  **** 	{
  82:./src/main.c  **** 		chr += 0x30;
  43              		.loc 1 82 3 is_stmt 1 view .LVU7
  44              		.loc 1 82 7 is_stmt 0 view .LVU8
  45 000c 30008092 		addls	r0, r0, #48
  46              	.LVL3:
  83:./src/main.c  **** 	}
  84:./src/main.c  **** 	return chr;
  47              		.loc 1 84 2 is_stmt 1 view .LVU9
  85:./src/main.c  **** }
  48              		.loc 1 85 1 is_stmt 0 view .LVU10
  49 0010 1EFF2FE1 		bx	lr
  50              		.cfi_endproc
  51              	.LFE3:
  53              		.align	2
  54              		.global	ascii2hex
  55              		.syntax unified
  56              		.arm
  57              		.fpu softvfp
  59              	ascii2hex:
  60              	.LVL4:
  61              	.LFB4:
  86:./src/main.c  **** 
  87:./src/main.c  **** u8_t ascii2hex(u8_t chr)
  88:./src/main.c  **** {
  62              		.loc 1 88 1 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ Function supports interworking.
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  89:./src/main.c  **** 	if((chr <= 0x5A) && (chr >= 0x41)) // Gro√übuchstaben
  68              		.loc 1 89 2 view .LVU12
  69              		.loc 1 89 4 is_stmt 0 view .LVU13
  70 0014 413040E2 		sub	r3, r0, #65
  71 0018 190053E3 		cmp	r3, #25
  72 001c 0500009A 		bls	.L10
  90:./src/main.c  **** 	{
  91:./src/main.c  **** 		chr -= 0x37;
  92:./src/main.c  **** 		return chr &0xF;
  93:./src/main.c  **** 	}
  94:./src/main.c  **** 	if((chr <= 0x7A) && (chr >= 0x61)) // Kleinbuchstaben
  73              		.loc 1 94 2 is_stmt 1 view .LVU14
  74              		.loc 1 94 19 is_stmt 0 view .LVU15
  75 0020 613040E2 		sub	r3, r0, #97
  76              		.loc 1 94 4 view .LVU16
  77 0024 FF3003E2 		and	r3, r3, #255
  78 0028 190053E3 		cmp	r3, #25
  95:./src/main.c  **** 	{
  96:./src/main.c  **** 		chr -=0x57;
  79              		.loc 1 96 3 is_stmt 1 view .LVU17
  80              	.LVL5:
  97:./src/main.c  **** 		return chr &0xF;
  81              		.loc 1 97 3 view .LVU18
  96:./src/main.c  **** 		return chr &0xF;
  82              		.loc 1 96 7 is_stmt 0 view .LVU19
  83 002c 57004092 		subls	r0, r0, #87
  84              	.LVL6:
  85              	.LBB108:
  86              	.LBI108:
  87:./src/main.c  **** {
  87              		.loc 1 87 6 is_stmt 1 view .LVU20
  88              	.LBB109:
  98:./src/main.c  **** 	}
  99:./src/main.c  **** 	
 100:./src/main.c  **** 	if((chr <= 0x39) && (chr >= 0x30)) // Zahlen
  89              		.loc 1 100 2 view .LVU21
 101:./src/main.c  **** 	{
 102:./src/main.c  **** 		chr -= 0x30;
 103:./src/main.c  **** 	}
 104:./src/main.c  **** 	return chr & 0xF;
  90              		.loc 1 104 2 view .LVU22
  91              		.loc 1 104 13 is_stmt 0 view .LVU23
  92 0030 0F0000E2 		and	r0, r0, #15
  93              	.LVL7:
  94              		.loc 1 104 13 view .LVU24
  95              	.LBE109:
  96              	.LBE108:
 105:./src/main.c  **** }
  97              		.loc 1 105 1 view .LVU25
  98 0034 1EFF2FE1 		bx	lr
  99              	.LVL8:
 100              	.L10:
  91:./src/main.c  **** 		return chr &0xF;
 101              		.loc 1 91 3 is_stmt 1 view .LVU26
  92:./src/main.c  **** 	}
 102              		.loc 1 92 3 view .LVU27
  91:./src/main.c  **** 		return chr &0xF;
 103              		.loc 1 91 7 is_stmt 0 view .LVU28
 104 0038 370040E2 		sub	r0, r0, #55
 105              	.LVL9:
  92:./src/main.c  **** 	}
 106              		.loc 1 92 14 view .LVU29
 107 003c 0F0000E2 		and	r0, r0, #15
 108 0040 1EFF2FE1 		bx	lr
 109              		.cfi_endproc
 110              	.LFE4:
 112              		.section	.rodata.str1.4,"aMS",%progbits,1
 113              		.align	2
 114              	.LC0:
 115 0000 30303031 		.ascii	"0001\000"
 115      00
 116              		.text
 117              		.align	2
 118              		.global	ProcessMsgFromSerial
 119              		.syntax unified
 120              		.arm
 121              		.fpu softvfp
 123              	ProcessMsgFromSerial:
 124              	.LFB6:
 106:./src/main.c  **** 
 107:./src/main.c  **** 
 108:./src/main.c  **** 
 109:./src/main.c  **** 
 110:./src/main.c  **** 
 111:./src/main.c  **** // main()
 112:./src/main.c  **** // entry point from crt0.S
 113:./src/main.c  **** int  main ( void)
 114:./src/main.c  **** {
 115:./src/main.c  **** 	// init hardware
 116:./src/main.c  **** 	HW_Init();
 117:./src/main.c  **** 	IODIR1 |= 0x00100000;                     /* P1.16..23 defined as Outputs  */
 118:./src/main.c  **** 	// init timer
 119:./src/main.c  **** 	SYSTIME_Init();
 120:./src/main.c  **** 	IOSET1 = 0x00100000;	//led on
 121:./src/main.c  **** 	// init serial
 122:./src/main.c  **** 	SER_UserInit();
 123:./src/main.c  **** 	// wait 180 millis for CAN DC/DC converters
 124:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 125:./src/main.c  **** 	// init CAN
 126:./src/main.c  **** 	CAN_UserInit();
 127:./src/main.c  **** 	CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 128:./src/main.c  **** 	CanChnOpen = 1;
 129:./src/main.c  **** 	CanBusMode = BUS_ON;
 130:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 131:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 132:./src/main.c  **** 	// Set green LEDs for CAN1 and CAN2
 133:./src/main.c  **** //	HW_SetLED ( HW_LED_CAN1, HW_LED_GREEN);
 134:./src/main.c  **** //	HW_SetLED ( HW_LED_CAN2, HW_LED_GREEN);
 135:./src/main.c  **** 
 136:./src/main.c  **** 	// main loop
 137:./src/main.c  **** 	while ( 1)
 138:./src/main.c  **** 	{
 139:./src/main.c  **** 
 140:./src/main.c  **** 		
 141:./src/main.c  **** 		// millisec timer for CAN receive timestamp
 142:./src/main.c  **** 		if (SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW) > 1000){
 143:./src/main.c  **** //			#if testtimer
 144:./src/main.c  **** //			if(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW) > 2000)
 145:./src/main.c  **** //			{
 146:./src/main.c  **** //				system_too_slow++;
 147:./src/main.c  **** //			}
 148:./src/main.c  **** //			#endif
 149:./src/main.c  **** 			Millitimer++;
 150:./src/main.c  **** //			Millitimer+=(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW)/1000);
 151:./src/main.c  **** 			if(Millitimer>60000) Millitimer=0;
 152:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 153:./src/main.c  **** 			TimeDiff1000Hz=SYSTIME_NOW;
 154:./src/main.c  **** 		}
 155:./src/main.c  **** 		//-------------------------------------------------
 156:./src/main.c  **** 
 157:./src/main.c  **** 		// 1Hz LED Blinker
 158:./src/main.c  **** 		if (SYSTIME_DIFF (LedTimeDiff, SYSTIME_NOW) > 500000){
 159:./src/main.c  **** 			if (CanChnOpen) {
 160:./src/main.c  **** 				// toggle LED
 161:./src/main.c  **** 				LED_toggleCAN1 ^= 1;
 162:./src/main.c  **** 			if ( LED_toggleCAN1)
 163:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 164:./src/main.c  **** 			else
 165:./src/main.c  **** 			{	IOCLR1 = 0x00100000;}
 166:./src/main.c  **** 			}//IF: CAN chan. open
 167:./src/main.c  **** 			else { // CAN chn. closed, set green static
 168:./src/main.c  **** 				IOSET1 = 0x00100000;
 169:./src/main.c  **** 			}
 170:./src/main.c  **** 			LedTimeDiff = SYSTIME_NOW;
 171:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 172:./src/main.c  **** 		
 173:./src/main.c  **** 		
 174:./src/main.c  **** 		ProcessMsgFromCan();
 175:./src/main.c  **** 
 176:./src/main.c  **** 		ProcessMsgFromSerial();
 177:./src/main.c  **** 		
 178:./src/main.c  **** 		
 179:./src/main.c  **** 		
 180:./src/main.c  **** 	}
 181:./src/main.c  **** }
 182:./src/main.c  **** 
 183:./src/main.c  **** 
 184:./src/main.c  **** 
 185:./src/main.c  **** 
 186:./src/main.c  **** void ProcessMsgFromSerial(void)
 187:./src/main.c  **** //-------------------------------------------------
 188:./src/main.c  **** {
 125              		.loc 1 188 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ Function supports interworking.
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0044 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 131              	.LCFI0:
 132              		.cfi_def_cfa_offset 28
 133              		.cfi_offset 4, -28
 134              		.cfi_offset 5, -24
 135              		.cfi_offset 6, -20
 136              		.cfi_offset 7, -16
 137              		.cfi_offset 8, -12
 138              		.cfi_offset 9, -8
 139              		.cfi_offset 14, -4
 189:./src/main.c  **** 	SERStatus_t ReadResult;
 190:./src/main.c  **** 	u8_t CurRcvChar; 	// currently received character from UART
 191:./src/main.c  **** 	u8_t BytesRead;		// dummy parameter, not used here
 192:./src/main.c  **** 	u8_t CmdLength;		// length of currently received Command
 193:./src/main.c  **** 	u8_t RetValue;		// 
 194:./src/main.c  **** 
 195:./src/main.c  **** 	do {
 196:./src/main.c  **** 		// Read one byte from serial
 197:./src/main.c  **** 		ReadResult = SER_Read (SER_PORT1, &CurRcvChar, 1, &BytesRead);
 140              		.loc 1 197 16 is_stmt 0 view .LVU31
 141 0048 0160A0E3 		mov	r6, #1
 198:./src/main.c  **** 		
 199:./src/main.c  **** 		// No bytes received,
 200:./src/main.c  **** 		if (ReadResult == SER_ERR_RX_EMPTY){
 201:./src/main.c  **** 			return;	 // ... quit, don't waste time
 202:./src/main.c  **** 		}	
 203:./src/main.c  **** 
 204:./src/main.c  **** 		//-------------------------------------------------
 205:./src/main.c  **** 	    else if (ReadResult == SER_ERR_OK){
 206:./src/main.c  **** 			SerRcvBuf[SerRcvBufPtr] = CurRcvChar;
 207:./src/main.c  **** 		
 208:./src/main.c  **** 			// increase pointer up to max.
 209:./src/main.c  **** 			if (SerRcvBufPtr <= buflen){
 210:./src/main.c  **** 				SerRcvBufPtr++;
 211:./src/main.c  **** 			}
 212:./src/main.c  **** 		} // else if
 213:./src/main.c  **** 		//-------------------------------------------------
 214:./src/main.c  **** 		else if (ReadResult == SER_ERR_RX_OVERRUN){
 215:./src/main.c  **** 			SerRxOverrunOccurred = 1; // to be inserted in status register (command F)
 142              		.loc 1 215 25 view .LVU32
 143 004c D45E9FE5 		ldr	r5, .L253
 188:./src/main.c  **** 	SERStatus_t ReadResult;
 144              		.loc 1 188 1 view .LVU33
 145 0050 0CD04DE2 		sub	sp, sp, #12
 146              	.LCFI1:
 147              		.cfi_def_cfa_offset 40
 148 0054 080000EA 		b	.L17
 149              	.LVL10:
 150              	.L251:
 210:./src/main.c  **** 			}
 151              		.loc 1 210 5 is_stmt 1 view .LVU34
 206:./src/main.c  **** 		
 152              		.loc 1 206 13 is_stmt 0 view .LVU35
 153 0058 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 206:./src/main.c  **** 		
 154              		.loc 1 206 28 view .LVU36
 155 005c 0540DDE5 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 209:./src/main.c  **** 				SerRcvBufPtr++;
 156              		.loc 1 209 7 view .LVU37
 157 0060 210053E3 		cmp	r3, #33
 206:./src/main.c  **** 		
 158              		.loc 1 206 28 view .LVU38
 159 0064 032085E0 		add	r2, r5, r3
 210:./src/main.c  **** 			}
 160              		.loc 1 210 17 view .LVU39
 161 0068 013083E2 		add	r3, r3, #1
 162 006c 0030C595 		strbls	r3, [r5]
 216:./src/main.c  **** 		} // else if
 217:./src/main.c  **** 		//-------------------------------------------------
 218:./src/main.c  **** 	} // do
 219:./src/main.c  **** 	while (CurRcvChar != '\r');	
 163              		.loc 1 219 2 view .LVU40
 164 0070 0D0054E3 		cmp	r4, #13
 206:./src/main.c  **** 		
 165              		.loc 1 206 28 view .LVU41
 166 0074 0440C2E5 		strb	r4, [r2, #4]
 209:./src/main.c  **** 				SerRcvBufPtr++;
 167              		.loc 1 209 4 is_stmt 1 view .LVU42
 168              		.loc 1 219 8 view .LVU43
 169              		.loc 1 219 2 is_stmt 0 view .LVU44
 170 0078 0D00000A 		beq	.L250
 171              	.LVL11:
 172              	.L17:
 189:./src/main.c  **** 	u8_t CurRcvChar; 	// currently received character from UART
 173              		.loc 1 189 2 is_stmt 1 view .LVU45
 190:./src/main.c  **** 	u8_t BytesRead;		// dummy parameter, not used here
 174              		.loc 1 190 2 view .LVU46
 191:./src/main.c  **** 	u8_t CmdLength;		// length of currently received Command
 175              		.loc 1 191 2 view .LVU47
 192:./src/main.c  **** 	u8_t RetValue;		// 
 176              		.loc 1 192 2 view .LVU48
 193:./src/main.c  **** 
 177              		.loc 1 193 2 view .LVU49
 195:./src/main.c  **** 		// Read one byte from serial
 178              		.loc 1 195 2 view .LVU50
 197:./src/main.c  **** 		
 179              		.loc 1 197 3 view .LVU51
 197:./src/main.c  **** 		
 180              		.loc 1 197 16 is_stmt 0 view .LVU52
 181 007c 0120A0E3 		mov	r2, #1
 182 0080 0000A0E3 		mov	r0, #0
 183 0084 06308DE2 		add	r3, sp, #6
 184 0088 05108DE2 		add	r1, sp, #5
 185 008c FEFFFFEB 		bl	SER_Read
 186              	.LVL12:
 205:./src/main.c  **** 			SerRcvBuf[SerRcvBufPtr] = CurRcvChar;
 187              		.loc 1 205 11 is_stmt 1 view .LVU53
 206:./src/main.c  **** 		
 188              		.loc 1 206 4 view .LVU54
 214:./src/main.c  **** 			SerRxOverrunOccurred = 1; // to be inserted in status register (command F)
 189              		.loc 1 214 8 view .LVU55
 200:./src/main.c  **** 			return;	 // ... quit, don't waste time
 190              		.loc 1 200 3 view .LVU56
 200:./src/main.c  **** 			return;	 // ... quit, don't waste time
 191              		.loc 1 200 6 is_stmt 0 view .LVU57
 192 0090 020050E3 		cmp	r0, #2
 193 0094 5100000A 		beq	.L11
 205:./src/main.c  **** 			SerRcvBuf[SerRcvBufPtr] = CurRcvChar;
 194              		.loc 1 205 14 view .LVU58
 195 0098 000050E3 		cmp	r0, #0
 196 009c EDFFFF0A 		beq	.L251
 206:./src/main.c  **** 		
 197              		.loc 1 206 28 view .LVU59
 198 00a0 0540DDE5 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 214:./src/main.c  **** 			SerRxOverrunOccurred = 1; // to be inserted in status register (command F)
 199              		.loc 1 214 11 view .LVU60
 200 00a4 030050E3 		cmp	r0, #3
 215:./src/main.c  **** 		} // else if
 201              		.loc 1 215 4 is_stmt 1 view .LVU61
 202              		.loc 1 219 8 view .LVU62
 215:./src/main.c  **** 		} // else if
 203              		.loc 1 215 25 is_stmt 0 view .LVU63
 204 00a8 2560C505 		strbeq	r6, [r5, #37]
 205              		.loc 1 219 2 view .LVU64
 206 00ac 0D0054E3 		cmp	r4, #13
 207 00b0 F1FFFF1A 		bne	.L17
 208              	.L250:
 220:./src/main.c  **** 	CmdLength = SerRcvBufPtr - 1; // without carriage return
 209              		.loc 1 220 2 is_stmt 1 view .LVU65
 210              		.loc 1 220 27 is_stmt 0 view .LVU66
 211 00b4 6C5E9FE5 		ldr	r5, .L253
 212              		.loc 1 220 12 view .LVU67
 213 00b8 0060D5E5 		ldrb	r6, [r5]	@ zero_extendqisi2
 214 00bc 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 215 00c0 016046E2 		sub	r6, r6, #1
 216 00c4 433043E2 		sub	r3, r3, #67
 221:./src/main.c  **** 		//-------------------------------------------------
 222:./src/main.c  **** 	
 223:./src/main.c  **** 	RetValue = ret_OK;
 217              		.loc 1 223 11 view .LVU68
 218 00c8 0740CDE5 		strb	r4, [sp, #7]
 220:./src/main.c  **** 	CmdLength = SerRcvBufPtr - 1; // without carriage return
 219              		.loc 1 220 12 view .LVU69
 220 00cc FF6006E2 		and	r6, r6, #255
 221              	.LVL13:
 222              		.loc 1 223 2 is_stmt 1 view .LVU70
 224:./src/main.c  **** 	switch (SerRcvBuf[0]) { // Char 0 always contains cmd
 223              		.loc 1 224 2 view .LVU71
 224 00d0 330053E3 		cmp	r3, #51
 225 00d4 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 226 00d8 350000EA 		b	.L18
 227              	.L20:
 228 00dc 680E0000 		.word	.L38
 229 00e0 AC010000 		.word	.L37
 230 00e4 B4010000 		.word	.L18
 231 00e8 B40A0000 		.word	.L36
 232 00ec B4010000 		.word	.L18
 233 00f0 B4010000 		.word	.L18
 234 00f4 B4010000 		.word	.L18
 235 00f8 B4010000 		.word	.L18
 236 00fc B4010000 		.word	.L18
 237 0100 B0050000 		.word	.L35
 238 0104 28020000 		.word	.L24
 239 0108 08060000 		.word	.L34
 240 010c 140E0000 		.word	.L33
 241 0110 B4010000 		.word	.L18
 242 0114 B4010000 		.word	.L18
 243 0118 10080000 		.word	.L32
 244 011c 440A0000 		.word	.L31
 245 0120 B0020000 		.word	.L30
 246 0124 B4010000 		.word	.L18
 247 0128 EC010000 		.word	.L19
 248 012c 44020000 		.word	.L29
 249 0130 600B0000 		.word	.L28
 250 0134 B80B0000 		.word	.L27
 251 0138 100C0000 		.word	.L26
 252 013c B4010000 		.word	.L18
 253 0140 B4010000 		.word	.L18
 254 0144 B4010000 		.word	.L18
 255 0148 B4010000 		.word	.L18
 256 014c B4010000 		.word	.L18
 257 0150 B4010000 		.word	.L18
 258 0154 B4010000 		.word	.L18
 259 0158 B4010000 		.word	.L18
 260 015c B4010000 		.word	.L18
 261 0160 B4010000 		.word	.L18
 262 0164 B4010000 		.word	.L18
 263 0168 B4010000 		.word	.L18
 264 016c B4010000 		.word	.L18
 265 0170 B4010000 		.word	.L18
 266 0174 B4010000 		.word	.L18
 267 0178 B4010000 		.word	.L18
 268 017c B4010000 		.word	.L18
 269 0180 B4010000 		.word	.L18
 270 0184 28020000 		.word	.L24
 271 0188 B4010000 		.word	.L18
 272 018c B4010000 		.word	.L18
 273 0190 B4010000 		.word	.L18
 274 0194 B4010000 		.word	.L18
 275 0198 640C0000 		.word	.L23
 276 019c 480D0000 		.word	.L22
 277 01a0 48060000 		.word	.L21
 278 01a4 B4010000 		.word	.L18
 279 01a8 EC010000 		.word	.L19
 280              	.L37:
 225:./src/main.c  **** 		//-------------------------------------------------
 226:./src/main.c  **** 	case ('S'): // Set CAN speed 0..8
 227:./src/main.c  **** 		if ((CmdLength == 2) 
 228:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 8)&&(CanChnOpen==0)) {
 229:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 230:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 231:./src/main.c  **** 			CanInitialized = 1;
 232:./src/main.c  **** 			// Send ASCII OK
 233:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 234:./src/main.c  **** 		}
 235:./src/main.c  **** 		else {
 236:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 237:./src/main.c  **** 		}
 238:./src/main.c  **** 		break;
 239:./src/main.c  **** 		//-------------------------------------------------
 240:./src/main.c  **** 	case ('s'): // Setup CAN by BTR0/BTR1
 241:./src/main.c  **** 		if (CmdLength == 5) {
 242:./src/main.c  **** 			SetCanBTR0BTR1();
 243:./src/main.c  **** 		//	EepromData.CanSpeed = 0xFF; 	// not a standard speed
 244:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 245:./src/main.c  **** 		}
 246:./src/main.c  **** 		else {
 247:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 248:./src/main.c  **** 		}
 249:./src/main.c  **** 		break;
 250:./src/main.c  **** 		//-------------------------------------------------
 251:./src/main.c  **** 	case ('O'): // Open CAN channel in normal mode
 252:./src/main.c  **** 		if ((CmdLength == 1)&& (CanChnOpen == 0) && (CanInitialized == 1)) {
 253:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 254:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 255:./src/main.c  **** 			CanChnOpen = 1;
 256:./src/main.c  **** 			CanBusMode = BUS_ON;
 257:./src/main.c  **** 			// Send ASCII OK
 258:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 259:./src/main.c  **** 		}
 260:./src/main.c  **** 		else {
 261:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 262:./src/main.c  **** 		}
 263:./src/main.c  **** 		break;
 264:./src/main.c  **** 		//-------------------------------------------------
 265:./src/main.c  **** 	case ('Y'): // Open CAN channel in normal mode with autopolling
 266:./src/main.c  **** 		if ((CmdLength == 1)&& (CanChnOpen == 0) && (CanInitialized == 1)) {
 267:./src/main.c  **** 			AutoPollAutoSend=1;
 268:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 269:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 270:./src/main.c  **** 			CanChnOpen = 1;
 271:./src/main.c  **** 			CanBusMode = BUS_ON;
 272:./src/main.c  **** 			// Send ASCII OK
 273:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 274:./src/main.c  **** 		}
 275:./src/main.c  **** 		else {
 276:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 277:./src/main.c  **** 		}
 278:./src/main.c  **** 		break;
 279:./src/main.c  **** 		//-------------------------------------------------
 280:./src/main.c  **** 	case ('L'): // Open CAN channel in listen-only mode
 281:./src/main.c  **** 		if ((CmdLength == 1)&& (CanChnOpen == 0) && (CanInitialized == 1)) {
 282:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 283:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_LOM);
 284:./src/main.c  **** 			CanChnOpen = 1;
 285:./src/main.c  **** 			CanBusMode =BUS_LOM;
 286:./src/main.c  **** 						// Send ASCII OK
 287:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 288:./src/main.c  **** 		}
 289:./src/main.c  **** 		else {
 290:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 291:./src/main.c  **** 		}
 292:./src/main.c  **** 		break;
 293:./src/main.c  **** 		//-------------------------------------------------
 294:./src/main.c  **** 	case ('C'): // Close CAN channel
 295:./src/main.c  **** 		if ((CmdLength == 1)) {
 296:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 297:./src/main.c  **** 			CanChnOpen = 0;
 298:./src/main.c  **** 			CanBusMode = BUS_OFF;
 299:./src/main.c  **** 			// Send ASCII OK
 300:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 301:./src/main.c  **** 		}
 302:./src/main.c  **** 		else {
 303:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 304:./src/main.c  **** 		}
 305:./src/main.c  **** 		break;
 306:./src/main.c  **** 		//-------------------------------------------------
 307:./src/main.c  **** 	case ('t'): // Send 11bit CAN message
 308:./src/main.c  **** 		if ((CmdLength == 5 + (ascii2hex(SerRcvBuf[4])* 2)&&  (CanChnOpen == 1) 
 309:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 310:./src/main.c  **** 			TransmitStandardFrame();
 311:./src/main.c  **** 		}
 312:./src/main.c  **** 		else {
 313:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 314:./src/main.c  **** 		}
 315:./src/main.c  **** 		break;
 316:./src/main.c  **** 		//-------------------------------------------------
 317:./src/main.c  **** 	case ('T'): // Send 29bit CAN message
 318:./src/main.c  **** 				if ((CmdLength == 10 + (ascii2hex(SerRcvBuf[9])* 2)) 
 319:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 320:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 321:./src/main.c  **** 			TransmitExtendedFrame();
 322:./src/main.c  **** 		}
 323:./src/main.c  **** 		else {
 324:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 325:./src/main.c  **** 		}
 326:./src/main.c  **** 		break;
 327:./src/main.c  **** 		//-------------------------------------------------
 328:./src/main.c  **** 	case ('r'):// Send 11bit RTR
 329:./src/main.c  **** 		if ((CmdLength == 5) 
 330:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 331:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 332:./src/main.c  **** 			TransmitStandardRtr();
 333:./src/main.c  **** 		}
 334:./src/main.c  **** 		else {
 335:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 336:./src/main.c  **** 		}
 337:./src/main.c  **** 		break;
 338:./src/main.c  **** 		//-------------------------------------------------
 339:./src/main.c  **** 	case ('R'): // Send 29bit RTR
 340:./src/main.c  **** 		if ((CmdLength == 10) 
 341:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 342:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 343:./src/main.c  **** 			TransmitExtendedRtr();
 344:./src/main.c  **** 		}
 345:./src/main.c  **** 		else {
 346:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 347:./src/main.c  **** 		}
 348:./src/main.c  **** 		break;
 349:./src/main.c  **** 		//-------------------------------------------------
 350:./src/main.c  **** 	case ('P'):
 351:./src/main.c  **** 		//	PollIncomingFifoSingle(); // not supported, use AutoPollAutoSend instead !
 352:./src/main.c  **** 		RetValue = ret_ERROR;
 353:./src/main.c  **** 		
 354:./src/main.c  **** 		//-------------------------------------------------
 355:./src/main.c  **** 		break;
 356:./src/main.c  **** 		//-------------------------------------------------
 357:./src/main.c  **** 	case ('A'):
 358:./src/main.c  **** 		//	PollIncomingFifoAll(); // not supported, use AutoPollAutoSend instead !
 359:./src/main.c  **** 		RetValue = ret_ERROR;
 360:./src/main.c  **** 		//-------------------------------------------------
 361:./src/main.c  **** 		break;
 362:./src/main.c  **** 		//-------------------------------------------------
 363:./src/main.c  **** 	case ('F'):
 364:./src/main.c  **** 		if (CmdLength == 1) {
 365:./src/main.c  **** 			GetStatusFlags(); // returns 1 byte with 7 flags
 366:./src/main.c  **** 		}
 367:./src/main.c  **** 		else {
 368:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 369:./src/main.c  **** 		}
 370:./src/main.c  **** 		break;
 371:./src/main.c  **** 		//-------------------------------------------------
 372:./src/main.c  **** 	case ('X'): // activate AutoPollAutoSend feature
 373:./src/main.c  **** 		if ((CmdLength == 2) 
 374:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 375:./src/main.c  **** 			SetAutoPollAutoSend();
 376:./src/main.c  **** 		}
 377:./src/main.c  **** 		else {
 378:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 379:./src/main.c  **** 		}
 380:./src/main.c  **** 		break;
 381:./src/main.c  **** 		//-------------------------------------------------
 382:./src/main.c  **** 	case ('D'): // single or dual filter
 383:./src/main.c  **** 		if ((CmdLength == 2) )
 281              		.loc 1 383 3 view .LVU72
 282              		.loc 1 383 6 is_stmt 0 view .LVU73
 283 01ac 020056E3 		cmp	r6, #2
 284 01b0 1E00000A 		beq	.L216
 285              	.LVL14:
 286              	.L18:
 352:./src/main.c  **** 		
 287              		.loc 1 352 3 is_stmt 1 view .LVU74
 352:./src/main.c  **** 		
 288              		.loc 1 352 12 is_stmt 0 view .LVU75
 289 01b4 0730A0E3 		mov	r3, #7
 290 01b8 0730CDE5 		strb	r3, [sp, #7]
 355:./src/main.c  **** 		//-------------------------------------------------
 291              		.loc 1 355 3 is_stmt 1 view .LVU76
 292              	.LVL15:
 293              	.L44:
 384:./src/main.c  **** 		 {
 385:./src/main.c  **** 			// Send ASCII OK
 386:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 387:./src/main.c  **** 		}
 388:./src/main.c  **** 		else {
 389:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 390:./src/main.c  **** 		}
 391:./src/main.c  **** 		break;
 392:./src/main.c  **** 		//-------------------------------------------------
 393:./src/main.c  **** 	case ('W'): // Dual or Single Filter
 394:./src/main.c  **** 		if ((CmdLength == 2) 
 395:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 396:./src/main.c  **** 			SetFilterMode();
 397:./src/main.c  **** 		}
 398:./src/main.c  **** 		else {
 399:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 400:./src/main.c  **** 		}
 401:./src/main.c  **** 		break;
 402:./src/main.c  **** 		//-------------------------------------------------
 403:./src/main.c  **** 	case ('m'): // Register AM0, AM1, AM2 & AM3
 404:./src/main.c  **** 		if (CmdLength == 9) {
 405:./src/main.c  **** 		//	SetAcceptanceMask();
 406:./src/main.c  **** 			RetValue=ret_OK;
 407:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 408:./src/main.c  **** 		}
 409:./src/main.c  **** 		else {
 410:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 411:./src/main.c  **** 		}
 412:./src/main.c  **** 		break;
 413:./src/main.c  **** 		//-------------------------------------------------
 414:./src/main.c  **** 	case ('M'): // Register AC0, AC1, AC2 & AC3
 415:./src/main.c  **** 		if (CmdLength == 9) {
 416:./src/main.c  **** 		//	SetAcceptanceCode();
 417:./src/main.c  **** 		RetValue=ret_OK;
 418:./src/main.c  **** 		SER_Write (SER_PORT1, &RetValue, 1);
 419:./src/main.c  **** 		}
 420:./src/main.c  **** 		else {
 421:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 422:./src/main.c  **** 		}
 423:./src/main.c  **** 		break;
 424:./src/main.c  **** 		//-------------------------------------------------
 425:./src/main.c  **** 	case ('U'): // Set UART speed
 426:./src/main.c  **** 		if ((CmdLength == 2) 
 427:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1])) <= 6) {
 428:./src/main.c  **** 		//	EepromData.SerialSpeed = ascii2hex(SerRcvBuf[1]);
 429:./src/main.c  **** 		//	SetUartSpeed(EepromData.SerialSpeed); // u8_t SerSpeed
 430:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 431:./src/main.c  **** 			RetValue=ret_ERROR;
 432:./src/main.c  **** 		}
 433:./src/main.c  **** 		else {
 434:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 435:./src/main.c  **** 		}
 436:./src/main.c  **** 		break;
 437:./src/main.c  **** 		//-------------------------------------------------
 438:./src/main.c  **** 	case ('V'): // request version HW+SW
 439:./src/main.c  **** 		if (CmdLength == 1) {
 440:./src/main.c  **** 			GetVersionInfo();
 441:./src/main.c  **** 		}
 442:./src/main.c  **** 		else {
 443:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 444:./src/main.c  **** 		}
 445:./src/main.c  **** 		break;
 446:./src/main.c  **** 		//-------------------------------------------------
 447:./src/main.c  **** 			case ('v'): // request version HW+SW
 448:./src/main.c  **** 		if (CmdLength == 1) {
 449:./src/main.c  **** 			GetVersionInfo();
 450:./src/main.c  **** 		}
 451:./src/main.c  **** 		else {
 452:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 453:./src/main.c  **** 		}
 454:./src/main.c  **** 		break;
 455:./src/main.c  **** 		//-------------------------------------------------
 456:./src/main.c  **** 	case ('N'): // request serial number
 457:./src/main.c  **** 		if (CmdLength == 1) {
 458:./src/main.c  **** 			GetSerialNumber();
 459:./src/main.c  **** 		}
 460:./src/main.c  **** 		else {
 461:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 462:./src/main.c  **** 		}
 463:./src/main.c  **** 		break;
 464:./src/main.c  **** 		//-------------------------------------------------
 465:./src/main.c  **** 	case ('Z'): // activate timestamp feature
 466:./src/main.c  **** 		if ((CmdLength == 2) 
 467:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 468:./src/main.c  **** 			SetRcvTimestampMode(); // u8_t TimestampMode
 469:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 470:./src/main.c  **** 		}
 471:./src/main.c  **** 		else {
 472:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 473:./src/main.c  **** 		}
 474:./src/main.c  **** 		break;
 475:./src/main.c  **** 		//-------------------------------------------------
 476:./src/main.c  **** 	case ('Q'): // Set Auto Startup feature
 477:./src/main.c  **** 		if ((CmdLength == 2) 
 478:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 2)) {
 479:./src/main.c  **** 		//	SetAutostartMode();
 480:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 481:./src/main.c  **** 		
 482:./src/main.c  **** 		RetValue=ret_ERROR;
 483:./src/main.c  **** 			}
 484:./src/main.c  **** 		else {
 485:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 486:./src/main.c  **** 		}
 487:./src/main.c  **** 		break;
 488:./src/main.c  **** 		//-------------------------------------------------
 489:./src/main.c  **** 	case ('e'): // Write operating parameter set to EEPROM
 490:./src/main.c  **** 		if ((CmdLength == 2) 
 491:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 2)) {
 492:./src/main.c  **** 		//	WriteToEeprom(ascii2hex(SerRcvBuf[1])); // for debug only
 493:./src/main.c  **** 		RetValue=ret_ERROR;
 494:./src/main.c  **** 			}
 495:./src/main.c  **** 		else {
 496:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 497:./src/main.c  **** 		}
 498:./src/main.c  **** 		break;
 499:./src/main.c  **** 		//-------------------------------------------------
 500:./src/main.c  **** 	default:
 501:./src/main.c  **** 			// received command not specified, do nothing, return BELL 
 502:./src/main.c  **** 			RetValue = ret_ERROR;
 503:./src/main.c  **** 		break;
 504:./src/main.c  **** 	}
 505:./src/main.c  **** 	//-------------------------------------------------
 506:./src/main.c  **** 
 507:./src/main.c  **** 	if (RetValue == ret_ERROR) {
 294              		.loc 1 507 2 view .LVU77
 508:./src/main.c  **** 		// then blink red once
 509:./src/main.c  **** 	//	HW_SetLED ( HW_LED_CAN1, HW_LED_RED);
 510:./src/main.c  **** 	//	LedTimeDiff = SYSTIME_NOW;
 511:./src/main.c  **** 
 512:./src/main.c  **** 		// Send ASCII string to RS232 UART (Host-PC)
 513:./src/main.c  **** 		SerXmtBuf[0] = RetValue; // BEL
 295              		.loc 1 513 3 view .LVU78
 514:./src/main.c  **** 		SerXmtBufPtr = 1;
 296              		.loc 1 514 16 is_stmt 0 view .LVU79
 297 01bc 0120A0E3 		mov	r2, #1
 513:./src/main.c  **** 		SerXmtBufPtr = 1;
 298              		.loc 1 513 16 view .LVU80
 299 01c0 0730A0E3 		mov	r3, #7
 515:./src/main.c  **** 		SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 300              		.loc 1 515 3 view .LVU81
 301 01c4 0000A0E3 		mov	r0, #0
 302 01c8 5C1D9FE5 		ldr	r1, .L253+4
 513:./src/main.c  **** 		SerXmtBufPtr = 1;
 303              		.loc 1 513 16 view .LVU82
 304 01cc 2830C5E5 		strb	r3, [r5, #40]
 514:./src/main.c  **** 		SerXmtBufPtr = 1;
 305              		.loc 1 514 3 is_stmt 1 view .LVU83
 514:./src/main.c  **** 		SerXmtBufPtr = 1;
 306              		.loc 1 514 16 is_stmt 0 view .LVU84
 307 01d0 4920C5E5 		strb	r2, [r5, #73]
 308              		.loc 1 515 3 is_stmt 1 view .LVU85
 309 01d4 FEFFFFEB 		bl	SER_Write
 310              	.LVL16:
 311              	.L223:
 516:./src/main.c  **** 	}
 517:./src/main.c  **** 	
 518:./src/main.c  **** 	SerRcvBufPtr = 0;
 312              		.loc 1 518 2 view .LVU86
 313              		.loc 1 518 15 is_stmt 0 view .LVU87
 314 01d8 0030A0E3 		mov	r3, #0
 315 01dc 0030C5E5 		strb	r3, [r5]
 316              	.L11:
 519:./src/main.c  **** }
 317              		.loc 1 519 1 view .LVU88
 318 01e0 0CD08DE2 		add	sp, sp, #12
 319              	.LCFI2:
 320              		.cfi_remember_state
 321              		.cfi_def_cfa_offset 28
 322              		@ sp needed
 323 01e4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}
 324              	.LCFI3:
 325              		.cfi_restore 14
 326              		.cfi_restore 9
 327              		.cfi_restore 8
 328              		.cfi_restore 7
 329              		.cfi_restore 6
 330              		.cfi_restore 5
 331              		.cfi_restore 4
 332              		.cfi_def_cfa_offset 0
 333 01e8 1EFF2FE1 		bx	lr
 334              	.LVL17:
 335              	.L19:
 336              	.LCFI4:
 337              		.cfi_restore_state
 448:./src/main.c  **** 			GetVersionInfo();
 338              		.loc 1 448 3 is_stmt 1 view .LVU89
 448:./src/main.c  **** 			GetVersionInfo();
 339              		.loc 1 448 6 is_stmt 0 view .LVU90
 340 01ec 010056E3 		cmp	r6, #1
 341 01f0 EFFFFF1A 		bne	.L18
 440:./src/main.c  **** 		}
 342              		.loc 1 440 4 is_stmt 1 view .LVU91
 343              	.LBB310:
 344              	.LBI310:
 520:./src/main.c  **** //-------------------------------------------------
 521:./src/main.c  **** 
 522:./src/main.c  **** 
 523:./src/main.c  **** 
 524:./src/main.c  **** 
 525:./src/main.c  **** static void TransmitStandardFrame(void) 
 526:./src/main.c  **** //-------------------------------------------------
 527:./src/main.c  **** {
 528:./src/main.c  **** 	u8_t Result;
 529:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 530:./src/main.c  **** 
 531:./src/main.c  **** 	Result = ret_OK;
 532:./src/main.c  **** 
 533:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 534:./src/main.c  **** 		if ((CanChnOpen == 1) 
 535:./src/main.c  **** 	&&  (CanBusMode == BUS_ON)
 536:./src/main.c  **** 	&&  (AutostartMode == 0)) {
 537:./src/main.c  **** 
 538:./src/main.c  **** 		// Erase former CAN data bytes
 539:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 540:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 541:./src/main.c  **** 	
 542:./src/main.c  **** 		// prepare 11 bit ID
 543:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<8 )& 0xF00;
 544:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 545:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 546:./src/main.c  **** 		
 547:./src/main.c  **** 		// Set message type 11 bit
 548:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_STANDARD;
 549:./src/main.c  **** 	
 550:./src/main.c  **** 		// set DLC
 551:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[4]))& 0x00F;
 552:./src/main.c  **** 		
 553:./src/main.c  **** 		// copy message data
 554:./src/main.c  **** 		for (i=0;i<(CanTxMsg.Len);i++) {
 555:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 556:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[i*2+6]))& 0x00F));
 557:./src/main.c  **** 		}
 558:./src/main.c  **** 		
 559:./src/main.c  **** 		// send the message
 560:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 561:./src/main.c  **** 	}
 562:./src/main.c  **** 	else {
 563:./src/main.c  **** 		Result = ret_ERROR;
 564:./src/main.c  **** 	}
 565:./src/main.c  **** 	SerXmtBufPtr = 0;
 566:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 567:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 568:./src/main.c  **** 		if (Result == ret_OK) {
 569:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'Z';
 570:./src/main.c  **** 			SerXmtBufPtr++;
 571:./src/main.c  **** 		}
 572:./src/main.c  **** 	}
 573:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 574:./src/main.c  **** 	SerXmtBufPtr++;
 575:./src/main.c  **** 	
 576:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 577:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 578:./src/main.c  **** 
 579:./src/main.c  **** }
 580:./src/main.c  **** /**************************************************/
 581:./src/main.c  **** 
 582:./src/main.c  **** 
 583:./src/main.c  **** 
 584:./src/main.c  **** 
 585:./src/main.c  **** 
 586:./src/main.c  **** 
 587:./src/main.c  **** 
 588:./src/main.c  **** //*************************************************
 589:./src/main.c  **** //! @brief	Tiiiiiiiildd...[CR]
 590:./src/main.c  **** //! Transmit an extended (29bit) CAN frame.
 591:./src/main.c  **** //!
 592:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open in normal mode. 
 593:./src/main.c  **** //!
 594:./src/main.c  **** //! @param	iiiiiiii Identifier in hex (00000000-1FFFFFFF)
 595:./src/main.c  **** //! @param	l Data length (0-8)
 596:./src/main.c  **** //! @param	dd Byte value in hex (00-FF). 
 597:./src/main.c  **** //! Numbers of dd pairs must match data length, otherwise an error occurs.
 598:./src/main.c  **** //!
 599:./src/main.c  **** //! @note example: T0000010021133[CR]
 600:./src/main.c  **** //! @note Sends a 29bit CAN frame with ID=0x100, 2 bytes
 601:./src/main.c  **** //! with the value 0x11 and 0x33.
 602:./src/main.c  **** //!
 603:./src/main.c  **** //! @return If Auto Poll is disabled:
 604:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 605:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 606:./src/main.c  **** //!
 607:./src/main.c  **** //! @return If Auto Poll is enabled:
 608:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 609:./src/main.c  **** //! @return	z[CR] for OK
 610:./src/main.c  **** //!
 611:./src/main.c  **** static void TransmitExtendedFrame(void) 
 612:./src/main.c  **** //-------------------------------------------------
 613:./src/main.c  **** {
 614:./src/main.c  **** 	u8_t Result;
 615:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 616:./src/main.c  **** 
 617:./src/main.c  **** 	Result = ret_OK;
 618:./src/main.c  **** 
 619:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 620:./src/main.c  **** 		if ((CanChnOpen == 1) 
 621:./src/main.c  **** 	&&  (CanBusMode == BUS_ON) 
 622:./src/main.c  **** 	&&  (AutostartMode == 0)) {
 623:./src/main.c  **** 
 624:./src/main.c  **** 		// Erase former CAN data bytes
 625:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 626:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 627:./src/main.c  **** 	
 628:./src/main.c  **** 		// prepare 29 bit ID
 629:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<28 )& 0xF0000000;
 630:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 631:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 632:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 633:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 634:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 635:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 636:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 637:./src/main.c  **** 		
 638:./src/main.c  **** 		// Set message type 29 bit
 639:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_EXTENDED;
 640:./src/main.c  **** 	
 641:./src/main.c  **** 		// set DLC
 642:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[9]))& 0xF;
 643:./src/main.c  **** 		
 644:./src/main.c  **** 		// copy message data
 645:./src/main.c  **** 		for (i=0;i<(CanTxMsg.Len);i++) {
 646:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 647:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[11+2*i]))& 0x00F));
 648:./src/main.c  **** 		}
 649:./src/main.c  **** 		
 650:./src/main.c  **** 		// send the message
 651:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 652:./src/main.c  **** 	}
 653:./src/main.c  **** 	else {
 654:./src/main.c  **** 		Result = ret_ERROR;
 655:./src/main.c  **** 	}
 656:./src/main.c  **** 	
 657:./src/main.c  **** 	//-------------------------------------------------
 658:./src/main.c  **** 
 659:./src/main.c  **** 	SerXmtBufPtr = 0;
 660:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 661:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 662:./src/main.c  **** 		if (Result == ret_OK) {
 663:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'Z';
 664:./src/main.c  **** 			SerXmtBufPtr++;
 665:./src/main.c  **** 		}
 666:./src/main.c  **** 	}
 667:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 668:./src/main.c  **** 	SerXmtBufPtr++;
 669:./src/main.c  **** 	
 670:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 671:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 672:./src/main.c  **** }
 673:./src/main.c  **** /**************************************************/
 674:./src/main.c  **** 
 675:./src/main.c  **** 
 676:./src/main.c  **** 
 677:./src/main.c  **** 
 678:./src/main.c  **** //*************************************************
 679:./src/main.c  **** //! @brief	sxxyy[CR]
 680:./src/main.c  **** //! Setup with BTR0/BTR1 CAN bit-rates where xx and yy is a hex value.
 681:./src/main.c  **** //!
 682:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is closed. 
 683:./src/main.c  **** //!
 684:./src/main.c  **** //! @param	xx BTR0 value in hex
 685:./src/main.c  **** //! @param	yy BTR1 value in hex
 686:./src/main.c  **** //!
 687:./src/main.c  **** //! @note example: s031C[CR]
 688:./src/main.c  **** //! @note Setup CAN with BTR0=0x03 & BTR1=0x1C which equals to 125 kbit/s.
 689:./src/main.c  **** //!
 690:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is open
 691:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 692:./src/main.c  **** //!
 693:./src/main.c  **** static void SetCanBTR0BTR1(void) 
 694:./src/main.c  **** //-------------------------------------------------
 695:./src/main.c  **** {
 696:./src/main.c  **** 	u8_t  Result;
 697:./src/main.c  **** 	u32_t LpcBtr; // This is the LPC2194's "CANBTR" register
 698:./src/main.c  **** 	u8_t BYTE0;
 699:./src/main.c  **** 	u8_t BYTE1;
 700:./src/main.c  **** 
 701:./src/main.c  **** 	Result = ret_OK;
 702:./src/main.c  **** 	
 703:./src/main.c  **** 	// get BTR0 from the received UART command line
 704:./src/main.c  **** 	BYTE0  = ((ascii2hex(SerRcvBuf[1])<<4)& 0xF0);
 705:./src/main.c  **** 	BYTE0 |= ((ascii2hex(SerRcvBuf[2])   )& 0x0F);
 706:./src/main.c  **** 	// get BTR1 from the received UART command line
 707:./src/main.c  **** 	BYTE1  = ((ascii2hex(SerRcvBuf[3])<<4)& 0xF0);
 708:./src/main.c  **** 	BYTE1 |= ((ascii2hex(SerRcvBuf[4])   )& 0x0F);
 709:./src/main.c  **** 
 710:./src/main.c  **** 	// only if can channel = closed
 711:./src/main.c  **** 	if (CanChnOpen == 0) { // precondition
 712:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 713:./src/main.c  **** 		LpcBtr  = ((((u32_t)BYTE0 &0x3F) +1) *6) -1; 	// BRP, bit 0..9
 714:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 715:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 716:./src/main.c  **** 		// Write values to CAN controller
 717:./src/main.c  **** 		PINSEL1 |= (1<<22) | (1<<24) |(1<<26) |(1<<28) |(1<<18) |(1<<16) |(1<<14) ;
 718:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 719:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 720:./src/main.c  **** 		C1IER=0x00; // Disabling all interrupts
 721:./src/main.c  **** 		C1BTR = LpcBtr;
 722:./src/main.c  **** 		//CAN_InitChannel (CAN_BUS1, LpcBtr);
 723:./src/main.c  **** 		C1MOD=0;
 724:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);					// CAN Bus On
 725:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 726:./src/main.c  **** 
 727:./src/main.c  **** 		CanInitialized = 1; 	// Now CAN channel can be opened
 728:./src/main.c  **** 	}
 729:./src/main.c  **** 	else {
 730:./src/main.c  **** 		Result = ret_ERROR;				// CAN channel not closed, command ignored
 731:./src/main.c  **** 	}	
 732:./src/main.c  **** 
 733:./src/main.c  **** 	//-------------------------------------------------
 734:./src/main.c  **** 
 735:./src/main.c  **** 	SerXmtBufPtr = 0;
 736:./src/main.c  **** 
 737:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 738:./src/main.c  **** 	SerXmtBufPtr++;
 739:./src/main.c  **** 	
 740:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 741:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 742:./src/main.c  **** }
 743:./src/main.c  **** /**************************************************/
 744:./src/main.c  **** 
 745:./src/main.c  **** 
 746:./src/main.c  **** //*************************************************
 747:./src/main.c  **** //! @brief	riiil[CR]
 748:./src/main.c  **** //! Transmit a standard RTR (11bit) CAN frame.
 749:./src/main.c  **** //!
 750:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open in normal mode. 
 751:./src/main.c  **** //!
 752:./src/main.c  **** //! @param iii Identifier in hex (000-7FF)
 753:./src/main.c  **** //! @param l Data length (0-8)
 754:./src/main.c  **** //!
 755:./src/main.c  **** //! @note example: r1002[CR]
 756:./src/main.c  **** //! @note Sends an 11bit RTR CAN frame with ID=0x100
 757:./src/main.c  **** //! and DLC set to two (2 bytes).
 758:./src/main.c  **** //!
 759:./src/main.c  **** //! @return If Auto Poll is disabled:
 760:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 761:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 762:./src/main.c  **** //!
 763:./src/main.c  **** //! @return If Auto Poll is enabled:
 764:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 765:./src/main.c  **** //! @return	z[CR] for OK
 766:./src/main.c  **** //!
 767:./src/main.c  **** static void TransmitStandardRtr(void) 
 768:./src/main.c  **** //-------------------------------------------------
 769:./src/main.c  **** {
 770:./src/main.c  **** 	u8_t Result;
 771:./src/main.c  **** 
 772:./src/main.c  **** 	Result = ret_OK;
 773:./src/main.c  **** 
 774:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 775:./src/main.c  **** 	if ((CanChnOpen == 1) && (CanBusMode == BUS_ON)) {
 776:./src/main.c  **** 
 777:./src/main.c  **** 		// Erase all former CAN data bytes
 778:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 779:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 780:./src/main.c  **** 	
 781:./src/main.c  **** 		// prepare 11 bit ID
 782:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<8 )& 0xF00;
 783:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 784:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 785:./src/main.c  **** 		
 786:./src/main.c  **** 		// Set message type 11 bit
 787:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_STANDARD | CAN_MSG_RTR;
 788:./src/main.c  **** 	
 789:./src/main.c  **** 		// set DLC
 790:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[4]))& 0x00F;
 791:./src/main.c  **** 				
 792:./src/main.c  **** 		// send the message
 793:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 794:./src/main.c  **** 	}
 795:./src/main.c  **** 	else {
 796:./src/main.c  **** 		Result = ret_ERROR;
 797:./src/main.c  **** 	}
 798:./src/main.c  **** 
 799:./src/main.c  **** 	//-------------------------------------------------
 800:./src/main.c  **** 
 801:./src/main.c  **** 	SerXmtBufPtr = 0;
 802:./src/main.c  **** 
 803:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 804:./src/main.c  **** 		if (Result == ret_OK) {
 805:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'z';
 806:./src/main.c  **** 			SerXmtBufPtr++;
 807:./src/main.c  **** 		}
 808:./src/main.c  **** 	}
 809:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 810:./src/main.c  **** 	SerXmtBufPtr++;
 811:./src/main.c  **** 	
 812:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 813:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 814:./src/main.c  **** }
 815:./src/main.c  **** /**************************************************/
 816:./src/main.c  **** 
 817:./src/main.c  **** 
 818:./src/main.c  **** //*************************************************
 819:./src/main.c  **** //! @brief	Riiiiiiiil[CR]
 820:./src/main.c  **** //! Transmit an extended RTR (29bit) CAN frame.
 821:./src/main.c  **** //!
 822:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open in normal mode. 
 823:./src/main.c  **** //!
 824:./src/main.c  **** //! @param iiiiiiii Identifier in hex (00000000-1FFFFFFF)
 825:./src/main.c  **** //! @param l Data length (0-8)
 826:./src/main.c  **** //!
 827:./src/main.c  **** //! @note example: R000001002[CR]
 828:./src/main.c  **** //! @note Sends a 29bit RTR CAN frame with ID=0x00000100 
 829:./src/main.c  **** //! and DLC set to two (2 bytes).
 830:./src/main.c  **** //!
 831:./src/main.c  **** //! @return If Auto Poll is disabled:
 832:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only.
 833:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 834:./src/main.c  **** //!
 835:./src/main.c  **** //! @return If Auto Poll is enabled:
 836:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 837:./src/main.c  **** //! @return	z[CR] for OK
 838:./src/main.c  **** //!
 839:./src/main.c  **** static void TransmitExtendedRtr(void) 
 840:./src/main.c  **** //-------------------------------------------------
 841:./src/main.c  **** {
 842:./src/main.c  **** 	u8_t Result;
 843:./src/main.c  **** 
 844:./src/main.c  **** 	Result = ret_OK;
 845:./src/main.c  **** 
 846:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 847:./src/main.c  **** 	if ((CanChnOpen == 1) && (CanBusMode == BUS_ON)) {
 848:./src/main.c  **** 
 849:./src/main.c  **** 		// Erase former CAN data bytes
 850:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 851:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 852:./src/main.c  **** 	
 853:./src/main.c  **** 		// prepare 29 bit ID
 854:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<28 )& 0xF0000000;
 855:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 856:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 857:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 858:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 859:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 860:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 861:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 862:./src/main.c  **** 		
 863:./src/main.c  **** 		// Set message type 29 bit RTR
 864:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_EXTENDED | CAN_MSG_RTR;
 865:./src/main.c  **** 	
 866:./src/main.c  **** 		// set DLC
 867:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[9]))& 0xF;
 868:./src/main.c  **** 				
 869:./src/main.c  **** 		// send the message
 870:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 871:./src/main.c  **** 	}
 872:./src/main.c  **** 	else {
 873:./src/main.c  **** 		Result = ret_ERROR;
 874:./src/main.c  **** 	}
 875:./src/main.c  **** 	//-------------------------------------------------
 876:./src/main.c  **** 
 877:./src/main.c  **** 	SerXmtBufPtr = 0;
 878:./src/main.c  **** 
 879:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 880:./src/main.c  **** 		if (Result == ret_OK) {
 881:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'z';
 882:./src/main.c  **** 			SerXmtBufPtr++;
 883:./src/main.c  **** 		}
 884:./src/main.c  **** 	}
 885:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 886:./src/main.c  **** 	SerXmtBufPtr++;
 887:./src/main.c  **** 	
 888:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 889:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 890:./src/main.c  **** }
 891:./src/main.c  **** /**************************************************/
 892:./src/main.c  **** 
 893:./src/main.c  **** //*************************************************
 894:./src/main.c  **** //! @brief	F[CR]
 895:./src/main.c  **** //! Read Status Flags.
 896:./src/main.c  **** //!
 897:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open. 
 898:./src/main.c  **** //!
 899:./src/main.c  **** //! @param none
 900:./src/main.c  **** //!
 901:./src/main.c  **** //! @note example: F[CR]
 902:./src/main.c  **** //! @note Read Status Flags.
 903:./src/main.c  **** //!
 904:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open
 905:./src/main.c  **** //! @return	An F with 2 bytes BCD hex value plus CR (Ascii 13) for OK, e.g. F01[CR]
 906:./src/main.c  **** //! @li Bit 0 : CAN receive FIFO queue full
 907:./src/main.c  **** //! @li Bit 1 : CAN transmit FIFO queue full
 908:./src/main.c  **** //! @li Bit 2 : Error warning (EI), see SJA1000 datasheet
 909:./src/main.c  **** //! @li Bit 3 : Data Overrun (DOI), see SJA1000 datasheet
 910:./src/main.c  **** //! @li Bit 4 : Not used.
 911:./src/main.c  **** //! @li Bit 5 : Error Passive (EPI), see SJA1000 datasheet
 912:./src/main.c  **** //! @li Bit 6 : Arbitration Lost (ALI), see SJA1000 datasheet
 913:./src/main.c  **** //! @li Bit 7 : Bus Error (BEI), see SJA1000 datasheet
 914:./src/main.c  **** //!
 915:./src/main.c  **** static void GetStatusFlags(void) 
 916:./src/main.c  **** //-------------------------------------------------
 917:./src/main.c  **** {
 918:./src/main.c  **** //	u8_t 	Result;
 919:./src/main.c  **** 	
 920:./src/main.c  **** //	u8_t	shCANICR; // controller's interrupt flag register
 921:./src/main.c  **** 	u8_t 	statusbyte=0;
 922:./src/main.c  **** 
 923:./src/main.c  **** //	Result = ret_OK;
 924:./src/main.c  **** 	SerXmtBufPtr = 0;
 925:./src/main.c  **** 
 926:./src/main.c  **** 	if (CanChnOpen == 1){ // precondition	
 927:./src/main.c  **** 
 928:./src/main.c  **** 		// read status register from controller
 929:./src/main.c  **** 		//CAN_GetLastIR (CAN_BUS1, &shCANICR);
 930:./src/main.c  **** 		// mask out unspecified bits
 931:./src/main.c  **** 		statusbyte |= (C1ICR & 0xEC);
 932:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 933:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 934:./src/main.c  **** 		
 935:./src/main.c  **** 		SerRxOverrunOccurred = 0; 		// reset flag after reading
 936:./src/main.c  **** 		//statusbits.bit1 = (SerTxCongestionOccurred & 0x01); // transmit FIFO full
 937:./src/main.c  **** 		SerTxCongestionOccurred = 0; 	// reset flag after reading
 938:./src/main.c  **** 
 939:./src/main.c  **** 		// return result string
 940:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = 'F';
 941:./src/main.c  **** 		SerXmtBufPtr++;
 942:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii((statusbyte & 0xF0) >> 4);
 943:./src/main.c  **** 		SerXmtBufPtr++;
 944:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii (statusbyte & 0x0F);
 945:./src/main.c  **** 		SerXmtBufPtr++;
 946:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = ret_OK; // [<CR>]
 947:./src/main.c  **** 		SerXmtBufPtr++;
 948:./src/main.c  **** 
 949:./src/main.c  **** 	} // if CAN chn open
 950:./src/main.c  **** 	//-------------------------------------------------
 951:./src/main.c  **** 	else { // CAN channel was not open
 952:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = ret_ERROR;
 953:./src/main.c  **** 		SerXmtBufPtr++;
 954:./src/main.c  **** 	}
 955:./src/main.c  **** 	//-------------------------------------------------
 956:./src/main.c  **** 	
 957:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 958:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 959:./src/main.c  **** }
 960:./src/main.c  **** /**************************************************/
 961:./src/main.c  **** 
 962:./src/main.c  **** 
 963:./src/main.c  **** //*************************************************
 964:./src/main.c  **** //! @brief	Xn[CR]
 965:./src/main.c  **** //! Sets Auto Poll/Send ON/OFF for received frames. 
 966:./src/main.c  **** //!
 967:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is closed. 
 968:./src/main.c  **** //!
 969:./src/main.c  **** //! The value will be saved in EEPROM and remembered next time the PCAN-RS-232 is powered up.
 970:./src/main.c  **** //! It is set to OFF by default, to be compatible with old programs written for PCAN-RS-232. 
 971:./src/main.c  **** //! Setting it to ON will disable the P and A commands and
 972:./src/main.c  **** //! change the reply back from using the t and T command 
 973:./src/main.c  **** //! (see these commands for more information on the reply). 
 974:./src/main.c  **** //! It is strongly recommended to set this feature and upgrade from the old polling mechanism. 
 975:./src/main.c  **** //! Doing so will save bandwith and increases number of CAN frames that can be sent to the PCAN-RS-
 976:./src/main.c  **** //! With this feature set, CAN frames will be sent out on the RS232 as soon as the CAN channel is o
 977:./src/main.c  **** //!
 978:./src/main.c  **** //! @param n=0 turn off Auto Poll/Send feature
 979:./src/main.c  **** //! @param n=1 turn on Auto Poll/Send feature
 980:./src/main.c  **** //!
 981:./src/main.c  **** //! @note example 1: X0[CR]
 982:./src/main.c  **** //! @note Turn OFF the Auto Poll/Send feature
 983:./src/main.c  **** //! @note example 2: X1[CR]
 984:./src/main.c  **** //! @note Turn ON the Auto Poll/Send feature.
 985:./src/main.c  **** //!
 986:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is open
 987:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 988:./src/main.c  **** //!
 989:./src/main.c  **** static void SetAutoPollAutoSend(void) 
 990:./src/main.c  **** //-------------------------------------------------
 991:./src/main.c  **** {
 992:./src/main.c  **** 	u8_t Result;
 993:./src/main.c  **** 	
 994:./src/main.c  **** 	Result = ret_OK;
 995:./src/main.c  **** 	
 996:./src/main.c  **** 	if (CanChnOpen == 0){ // precondition	
 997:./src/main.c  **** 		AutoPollAutoSend = ascii2hex(SerRcvBuf[1]);
 998:./src/main.c  **** 	}
 999:./src/main.c  **** 	else {
1000:./src/main.c  **** 		Result = ret_ERROR;
1001:./src/main.c  **** 	}
1002:./src/main.c  **** 	//-------------------------------------------------
1003:./src/main.c  **** 
1004:./src/main.c  **** 	SerXmtBufPtr = 0;
1005:./src/main.c  **** 
1006:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
1007:./src/main.c  **** 	SerXmtBufPtr++;
1008:./src/main.c  **** 	
1009:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1010:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
1011:./src/main.c  **** }
1012:./src/main.c  **** /**************************************************/
1013:./src/main.c  **** 
1014:./src/main.c  **** 
1015:./src/main.c  **** 
1016:./src/main.c  **** //*************************************************
1017:./src/main.c  **** //! @brief	Wn[CR]
1018:./src/main.c  **** //! Filter mode setting. 
1019:./src/main.c  **** //!
1020:./src/main.c  **** //! @pre This command is accepted only if CAN channel is initialized but closed. 
1021:./src/main.c  **** //!
1022:./src/main.c  **** //! The setting is is saved in EEPROM and since remembered on next startup.
1023:./src/main.c  **** //!
1024:./src/main.c  **** //! @param n=0 set dual filter mode
1025:./src/main.c  **** //! @param n=1 set single filter mode
1026:./src/main.c  **** //!
1027:./src/main.c  **** //! @note example 1: W0[CR]
1028:./src/main.c  **** //! @note Set dual filter mode
1029:./src/main.c  **** //! @note example 2: W1[CR]
1030:./src/main.c  **** //! @note Set single filter mode
1031:./src/main.c  **** //!
1032:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is open
1033:./src/main.c  **** //! @return	CR (Ascii 13) for OK
1034:./src/main.c  **** //!
1035:./src/main.c  **** static void SetFilterMode(void) 
1036:./src/main.c  **** //-------------------------------------------------
1037:./src/main.c  **** {
1038:./src/main.c  **** 	u8_t Result;
1039:./src/main.c  **** 	
1040:./src/main.c  **** 	Result = ret_OK;
1041:./src/main.c  **** 	
1042:./src/main.c  **** 	if (CanChnOpen == 0){ // precondition	
1043:./src/main.c  **** 		FilterMode = ascii2hex(SerRcvBuf[1]);
1044:./src/main.c  **** 	}
1045:./src/main.c  **** 	else {
1046:./src/main.c  **** 		Result = ret_ERROR;
1047:./src/main.c  **** 	}
1048:./src/main.c  **** 	//-------------------------------------------------
1049:./src/main.c  **** 
1050:./src/main.c  **** 	SerXmtBufPtr = 0;
1051:./src/main.c  **** 
1052:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
1053:./src/main.c  **** 	SerXmtBufPtr++;
1054:./src/main.c  **** 	
1055:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1056:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
1057:./src/main.c  **** }
1058:./src/main.c  **** /**************************************************/
1059:./src/main.c  **** 
1060:./src/main.c  **** 
1061:./src/main.c  **** //*************************************************
1062:./src/main.c  **** //! @brief	V[CR]
1063:./src/main.c  **** //! Get version number of both PCAN-RS-232 hardware and software
1064:./src/main.c  **** //!
1065:./src/main.c  **** //! @pre This command is always accepted.
1066:./src/main.c  **** //!
1067:./src/main.c  **** //! @param	none
1068:./src/main.c  **** //!
1069:./src/main.c  **** //! @note example: V[CR]
1070:./src/main.c  **** //! @note Get version numbers.
1071:./src/main.c  **** //!
1072:./src/main.c  **** //! @return	V and a 2 bytes BCD value for hardware version and a 2 byte BCD value for software vers
1073:./src/main.c  **** //!
1074:./src/main.c  **** static void GetVersionInfo(void) 
 345              		.loc 1 1074 13 view .LVU92
 346              	.LBB311:
1075:./src/main.c  **** //-------------------------------------------------
1076:./src/main.c  **** {
1077:./src/main.c  **** 	SerXmtBufPtr = 0;
 347              		.loc 1 1077 2 view .LVU93
1078:./src/main.c  **** 
1079:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = 'V';
 348              		.loc 1 1079 2 view .LVU94
1080:./src/main.c  **** 	SerXmtBufPtr++;
 349              		.loc 1 1080 2 view .LVU95
1081:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '0';
 350              		.loc 1 1081 2 view .LVU96
1082:./src/main.c  **** 	SerXmtBufPtr++;
 351              		.loc 1 1082 2 view .LVU97
1083:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '0';
 352              		.loc 1 1083 2 view .LVU98
1084:./src/main.c  **** 	SerXmtBufPtr++;
 353              		.loc 1 1084 2 view .LVU99
1085:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '0';
 354              		.loc 1 1085 2 view .LVU100
1086:./src/main.c  **** 	SerXmtBufPtr++;
 355              		.loc 1 1086 2 view .LVU101
1087:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '1';
 356              		.loc 1 1087 2 view .LVU102
1088:./src/main.c  **** 	SerXmtBufPtr++;
 357              		.loc 1 1088 2 view .LVU103
1089:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
 358              		.loc 1 1089 2 view .LVU104
1090:./src/main.c  **** 	SerXmtBufPtr++;
 359              		.loc 1 1090 14 is_stmt 0 view .LVU105
 360 01f4 0620A0E3 		mov	r2, #6
1079:./src/main.c  **** 	SerXmtBufPtr++;
 361              		.loc 1 1079 26 view .LVU106
 362 01f8 300D9FE5 		ldr	r0, .L253+8
 363              	.LVL18:
1087:./src/main.c  **** 	SerXmtBufPtr++;
 364              		.loc 1 1087 26 view .LVU107
 365 01fc 303D9FE5 		ldr	r3, .L253+12
1079:./src/main.c  **** 	SerXmtBufPtr++;
 366              		.loc 1 1079 26 view .LVU108
 367 0200 280085E5 		str	r0, [r5, #40]
1091:./src/main.c  **** 
1092:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1093:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 368              		.loc 1 1093 2 view .LVU109
 369 0204 201D9FE5 		ldr	r1, .L253+4
 370 0208 0000A0E3 		mov	r0, #0
1087:./src/main.c  **** 	SerXmtBufPtr++;
 371              		.loc 1 1087 26 view .LVU110
 372 020c BC32C5E1 		strh	r3, [r5, #44]	@ movhi
1090:./src/main.c  **** 
 373              		.loc 1 1090 2 is_stmt 1 view .LVU111
1090:./src/main.c  **** 
 374              		.loc 1 1090 14 is_stmt 0 view .LVU112
 375 0210 4920C5E5 		strb	r2, [r5, #73]
 376              		.loc 1 1093 2 is_stmt 1 view .LVU113
 377 0214 FEFFFFEB 		bl	SER_Write
 378              	.LVL19:
 379              	.L43:
 380              		.loc 1 1093 2 is_stmt 0 view .LVU114
 381              	.LBE311:
 382              	.LBE310:
 507:./src/main.c  **** 		// then blink red once
 383              		.loc 1 507 2 is_stmt 1 view .LVU115
 507:./src/main.c  **** 		// then blink red once
 384              		.loc 1 507 5 is_stmt 0 view .LVU116
 385 0218 0730DDE5 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 386 021c 070053E3 		cmp	r3, #7
 387 0220 ECFFFF1A 		bne	.L223
 388 0224 E4FFFFEA 		b	.L44
 389              	.LVL20:
 390              	.L24:
 415:./src/main.c  **** 		//	SetAcceptanceCode();
 391              		.loc 1 415 3 is_stmt 1 view .LVU117
 415:./src/main.c  **** 		//	SetAcceptanceCode();
 392              		.loc 1 415 6 is_stmt 0 view .LVU118
 393 0228 090056E3 		cmp	r6, #9
 394 022c E0FFFF1A 		bne	.L18
 395              	.L216:
 386:./src/main.c  **** 		}
 396              		.loc 1 386 4 is_stmt 1 view .LVU119
 397 0230 0120A0E3 		mov	r2, #1
 398 0234 07108DE2 		add	r1, sp, #7
 399 0238 0000A0E3 		mov	r0, #0
 400              	.LVL21:
 386:./src/main.c  **** 		}
 401              		.loc 1 386 4 is_stmt 0 view .LVU120
 402 023c FEFFFFEB 		bl	SER_Write
 403              	.LVL22:
 404 0240 F4FFFFEA 		b	.L43
 405              	.LVL23:
 406              	.L29:
 394:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 407              		.loc 1 394 3 is_stmt 1 view .LVU121
 394:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 408              		.loc 1 394 6 is_stmt 0 view .LVU122
 409 0244 020056E3 		cmp	r6, #2
 410 0248 D9FFFF1A 		bne	.L18
 395:./src/main.c  **** 			SetFilterMode();
 411              		.loc 1 395 8 view .LVU123
 412 024c 0500D5E5 		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 413              	.LVL24:
 414              	.LBB312:
 415              	.LBI312:
  87:./src/main.c  **** {
 416              		.loc 1 87 6 is_stmt 1 view .LVU124
 417              	.LBB313:
  89:./src/main.c  **** 	{
 418              		.loc 1 89 2 view .LVU125
  89:./src/main.c  **** 	{
 419              		.loc 1 89 4 is_stmt 0 view .LVU126
 420 0250 413040E2 		sub	r3, r0, #65
 421 0254 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 422              		.loc 1 91 7 view .LVU127
 423 0258 37304092 		subls	r3, r0, #55
  92:./src/main.c  **** 	}
 424              		.loc 1 92 14 view .LVU128
 425 025c 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 426              		.loc 1 89 4 view .LVU129
 427 0260 0400009A 		bls	.L212
  94:./src/main.c  **** 	{
 428              		.loc 1 94 2 is_stmt 1 view .LVU130
  94:./src/main.c  **** 	{
 429              		.loc 1 94 4 is_stmt 0 view .LVU131
 430 0264 613040E2 		sub	r3, r0, #97
 431 0268 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 432              		.loc 1 96 3 is_stmt 1 view .LVU132
 433              	.LVL25:
  97:./src/main.c  **** 	}
 434              		.loc 1 97 3 view .LVU133
 435              	.LBB314:
 436              	.LBI314:
  87:./src/main.c  **** {
 437              		.loc 1 87 6 view .LVU134
 438              	.LBB315:
 100:./src/main.c  **** 	{
 439              		.loc 1 100 2 view .LVU135
 104:./src/main.c  **** }
 440              		.loc 1 104 2 view .LVU136
 441              	.LBE315:
 442              	.LBE314:
  96:./src/main.c  **** 		return chr &0xF;
 443              		.loc 1 96 7 is_stmt 0 view .LVU137
 444 026c 57304092 		subls	r3, r0, #87
  97:./src/main.c  **** 	}
 445              		.loc 1 97 14 view .LVU138
 446 0270 0F300392 		andls	r3, r3, #15
 447              	.LBB317:
 448              	.LBB316:
 104:./src/main.c  **** }
 449              		.loc 1 104 13 view .LVU139
 450 0274 0F300082 		andhi	r3, r0, #15
 451              	.LVL26:
 452              	.L212:
 104:./src/main.c  **** }
 453              		.loc 1 104 13 view .LVU140
 454              	.LBE316:
 455              	.LBE317:
 456              	.LBE313:
 457              	.LBE312:
 395:./src/main.c  **** 			SetFilterMode();
 458              		.loc 1 395 3 view .LVU141
 459 0278 010053E3 		cmp	r3, #1
 460 027c CCFFFF8A 		bhi	.L18
 396:./src/main.c  **** 		}
 461              		.loc 1 396 4 is_stmt 1 view .LVU142
 462              	.LBB318:
 463              	.LBI318:
1035:./src/main.c  **** //-------------------------------------------------
 464              		.loc 1 1035 13 view .LVU143
 465              	.LBB319:
1038:./src/main.c  **** 	
 466              		.loc 1 1038 2 view .LVU144
1040:./src/main.c  **** 	
 467              		.loc 1 1040 2 view .LVU145
 468              	.LVL27:
1042:./src/main.c  **** 		FilterMode = ascii2hex(SerRcvBuf[1]);
 469              		.loc 1 1042 2 view .LVU146
1042:./src/main.c  **** 		FilterMode = ascii2hex(SerRcvBuf[1]);
 470              		.loc 1 1042 5 is_stmt 0 view .LVU147
 471 0280 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 472 0284 000053E3 		cmp	r3, #0
 473 0288 DF02001A 		bne	.L232
1043:./src/main.c  **** 	}
 474              		.loc 1 1043 3 is_stmt 1 view .LVU148
1043:./src/main.c  **** 	}
 475              		.loc 1 1043 16 is_stmt 0 view .LVU149
 476 028c FEFFFFEB 		bl	ascii2hex
 477              	.LVL28:
1043:./src/main.c  **** 	}
 478              		.loc 1 1043 14 view .LVU150
 479 0290 5D00C5E5 		strb	r0, [r5, #93]
 480              	.LVL29:
 481              	.L222:
1043:./src/main.c  **** 	}
 482              		.loc 1 1043 14 view .LVU151
 483              	.LBE319:
 484              	.LBE318:
 485              	.LBB320:
 486              	.LBB321:
1094:./src/main.c  **** }
1095:./src/main.c  **** /**************************************************/
1096:./src/main.c  **** 
1097:./src/main.c  **** 
1098:./src/main.c  **** 
1099:./src/main.c  **** //! Get serial number of the PCAN-RS-232.
1100:./src/main.c  **** //!
1101:./src/main.c  **** //! @pre This command is always accepted.
1102:./src/main.c  **** //!
1103:./src/main.c  **** //! @param	none
1104:./src/main.c  **** //!
1105:./src/main.c  **** //! @note example: N[CR]
1106:./src/main.c  **** //! @note Get serial number.
1107:./src/main.c  **** //!
1108:./src/main.c  **** //! @note The serial number may be composed of both numerical and alphanumerical values. 
1109:./src/main.c  **** //! The serial number is also printed on the PCAN-RS-232 enclosure.
1110:./src/main.c  **** //!
1111:./src/main.c  **** //! @return	N and a 4 bytes value for serial number plus CR (Ascii 13) for OK, e.g. NA123[CR]
1112:./src/main.c  **** //!
1113:./src/main.c  **** static void GetSerialNumber(void) 
1114:./src/main.c  **** //-------------------------------------------------
1115:./src/main.c  **** {
1116:./src/main.c  **** 	SerXmtBufPtr = 0;
1117:./src/main.c  **** 
1118:./src/main.c  ****  	SerXmtBuf[SerXmtBufPtr] = 'N';
1119:./src/main.c  **** 	SerXmtBufPtr++;
1120:./src/main.c  **** 
1121:./src/main.c  **** 	memcpy (&SerXmtBuf[SerXmtBufPtr],"0001",4);
1122:./src/main.c  **** //	memcpy (&SerXmtBuf[SerXmtBufPtr],EepromData.DeviceSN,4);
1123:./src/main.c  **** 	SerXmtBufPtr = SerXmtBufPtr + 4;
1124:./src/main.c  **** 
1125:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
1126:./src/main.c  **** 	SerXmtBufPtr++;
1127:./src/main.c  **** 	
1128:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1129:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
1130:./src/main.c  **** }
1131:./src/main.c  **** /**************************************************/
1132:./src/main.c  **** 
1133:./src/main.c  **** 
1134:./src/main.c  **** //*************************************************
1135:./src/main.c  **** //! @brief	Zn[CR]
1136:./src/main.c  **** //! Sets Time Stamp ON/OFF for received frames only.
1137:./src/main.c  **** //!
1138:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is closed. 
1139:./src/main.c  **** //!
1140:./src/main.c  **** //! This command is set to OFF by default (to be compatible with older programs written for PCAN-RS
1141:./src/main.c  **** //! Setting it to ON will add 4 bytes sent out from PCAN-RS-232 when the Auto Poll/Send feature is 
1142:./src/main.c  **** //! With Timestamp ON, each message gets a time in milliseconds when it was received at the PCAN-RS
1143:./src/main.c  **** //! this can be used for realtime applications for e.g. knowing time inbetween messages etc.
1144:./src/main.c  **** //! Using this feature will decrease bandwith on the PCAN-RS-232, since it adds 4 bytes to each mes
1145:./src/main.c  **** //! If the timestamp is OFF, the incoming frames looks like this:
1146:./src/main.c  **** //! t10021133[CR] (a standard frame with ID=0x100 & 2 bytes)
1147:./src/main.c  **** //! If the timestamp is ON, the incoming frames looks like this:
1148:./src/main.c  **** //! t100211334D67[CR] (a standard frame with ID=0x100 & 2 bytes)
1149:./src/main.c  **** //! Note the last 4 bytes 0x4D67, which is a timestamp for this specific message in milliseconds (a
1150:./src/main.c  **** //! The timer in the PCAN-RS-232 starts at zero 0x0000 and goes up to 0xEA5F before it loops around
1151:./src/main.c  **** //! This corresponds to 60,000mS (i.e. 1 minute, which will be more than enough in most systems).
1152:./src/main.c  **** //!
1153:./src/main.c  **** //! @param	n=0 Turn OFF the timestamp feature 
1154:./src/main.c  **** //! @param	n=1 Turn ON the timestamp feature
1155:./src/main.c  **** //!
1156:./src/main.c  **** //! @note The value is saved in EEPROM and is set each time the PCAN-RS-232 is powered up.
1157:./src/main.c  **** //! @note example 1: Z0[CR]
1158:./src/main.c  **** //! @note Turn OFF the Time Stamp feature.
1159:./src/main.c  **** //! @note example 2: Z1[CR]
1160:./src/main.c  **** //! @note Turn ON the Time Stamp feature.
1161:./src/main.c  **** //!
1162:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR  when CAN channel is open
1163:./src/main.c  **** //! @return	CR (Ascii 13) for OK
1164:./src/main.c  **** //!
1165:./src/main.c  **** static void SetRcvTimestampMode(void) 
1166:./src/main.c  **** //-------------------------------------------------
1167:./src/main.c  **** {
1168:./src/main.c  **** 	u8_t Result;
1169:./src/main.c  **** 	
1170:./src/main.c  **** 	Result = ret_OK;
1171:./src/main.c  **** 		
1172:./src/main.c  **** 	if (CanChnOpen == 0){ // precondition
1173:./src/main.c  **** 		CanRcvTimestampOn = ascii2hex(SerRcvBuf[1]);
1174:./src/main.c  **** 	}
1175:./src/main.c  **** 	else  {
1176:./src/main.c  **** 		Result = ret_ERROR;
1177:./src/main.c  **** 	}
1178:./src/main.c  **** 	//-------------------------------------------------
1179:./src/main.c  **** 
1180:./src/main.c  **** 	SerXmtBufPtr = 0;
 487              		.loc 1 1180 2 is_stmt 1 view .LVU152
1181:./src/main.c  **** 
1182:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 488              		.loc 1 1182 2 view .LVU153
1183:./src/main.c  **** 	SerXmtBufPtr++;
 489              		.loc 1 1183 14 is_stmt 0 view .LVU154
 490 0294 0120A0E3 		mov	r2, #1
1184:./src/main.c  **** 	
1185:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1186:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 491              		.loc 1 1186 2 view .LVU155
 492 0298 8C1C9FE5 		ldr	r1, .L253+4
 493 029c 0000A0E3 		mov	r0, #0
1182:./src/main.c  **** 	SerXmtBufPtr++;
 494              		.loc 1 1182 26 view .LVU156
 495 02a0 2840C5E5 		strb	r4, [r5, #40]
1183:./src/main.c  **** 	SerXmtBufPtr++;
 496              		.loc 1 1183 2 is_stmt 1 view .LVU157
1183:./src/main.c  **** 	SerXmtBufPtr++;
 497              		.loc 1 1183 14 is_stmt 0 view .LVU158
 498 02a4 4920C5E5 		strb	r2, [r5, #73]
 499              		.loc 1 1186 2 is_stmt 1 view .LVU159
 500 02a8 FEFFFFEB 		bl	SER_Write
 501              	.LVL30:
1187:./src/main.c  **** }
 502              		.loc 1 1187 1 is_stmt 0 view .LVU160
 503 02ac D9FFFFEA 		b	.L43
 504              	.LVL31:
 505              	.L30:
 506              		.loc 1 1187 1 view .LVU161
 507              	.LBE321:
 508              	.LBE320:
 318:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 509              		.loc 1 318 5 is_stmt 1 view .LVU162
 318:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 510              		.loc 1 318 29 is_stmt 0 view .LVU163
 511 02b0 0D20D5E5 		ldrb	r2, [r5, #13]	@ zero_extendqisi2
 512              	.LVL32:
 513              	.LBB324:
 514              	.LBI324:
  87:./src/main.c  **** {
 515              		.loc 1 87 6 is_stmt 1 view .LVU164
 516              	.LBB325:
  89:./src/main.c  **** 	{
 517              		.loc 1 89 2 view .LVU165
  89:./src/main.c  **** 	{
 518              		.loc 1 89 19 is_stmt 0 view .LVU166
 519 02b4 411042E2 		sub	r1, r2, #65
 520 02b8 FF1001E2 		and	r1, r1, #255
  89:./src/main.c  **** 	{
 521              		.loc 1 89 4 view .LVU167
 522 02bc 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 523              		.loc 1 91 7 view .LVU168
 524 02c0 37304292 		subls	r3, r2, #55
  92:./src/main.c  **** 	}
 525              		.loc 1 92 14 view .LVU169
 526 02c4 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 527              		.loc 1 89 4 view .LVU170
 528 02c8 0500009A 		bls	.L95
  94:./src/main.c  **** 	{
 529              		.loc 1 94 2 is_stmt 1 view .LVU171
  94:./src/main.c  **** 	{
 530              		.loc 1 94 19 is_stmt 0 view .LVU172
 531 02cc 613042E2 		sub	r3, r2, #97
  94:./src/main.c  **** 	{
 532              		.loc 1 94 4 view .LVU173
 533 02d0 FF3003E2 		and	r3, r3, #255
 534 02d4 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 535              		.loc 1 96 3 is_stmt 1 view .LVU174
 536              	.LVL33:
  97:./src/main.c  **** 	}
 537              		.loc 1 97 3 view .LVU175
 538              	.LBB326:
 539              	.LBI326:
  87:./src/main.c  **** {
 540              		.loc 1 87 6 view .LVU176
 541              	.LBB327:
 100:./src/main.c  **** 	{
 542              		.loc 1 100 2 view .LVU177
 104:./src/main.c  **** }
 543              		.loc 1 104 2 view .LVU178
 544              	.LBE327:
 545              	.LBE326:
  96:./src/main.c  **** 		return chr &0xF;
 546              		.loc 1 96 7 is_stmt 0 view .LVU179
 547 02d8 57304292 		subls	r3, r2, #87
  97:./src/main.c  **** 	}
 548              		.loc 1 97 14 view .LVU180
 549 02dc 0F300392 		andls	r3, r3, #15
 550              	.LBB329:
 551              	.LBB328:
 104:./src/main.c  **** }
 552              		.loc 1 104 13 view .LVU181
 553 02e0 0F300282 		andhi	r3, r2, #15
 554              	.LVL34:
 555              	.L95:
 104:./src/main.c  **** }
 556              		.loc 1 104 13 view .LVU182
 557              	.LBE328:
 558              	.LBE329:
 559              	.LBE325:
 560              	.LBE324:
 318:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 561              		.loc 1 318 26 view .LVU183
 562 02e4 053083E2 		add	r3, r3, #5
 318:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 563              		.loc 1 318 8 view .LVU184
 564 02e8 830056E1 		cmp	r6, r3, lsl #1
 565 02ec B0FFFF1A 		bne	.L18
 319:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 566              		.loc 1 319 3 view .LVU185
 567 02f0 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 568 02f4 010053E3 		cmp	r3, #1
 569 02f8 ADFFFF1A 		bne	.L18
 320:./src/main.c  **** 			TransmitExtendedFrame();
 570              		.loc 1 320 19 view .LVU186
 571 02fc 346C9FE5 		ldr	r6, .L253+16
 572              	.LVL35:
 320:./src/main.c  **** 			TransmitExtendedFrame();
 573              		.loc 1 320 3 view .LVU187
 574 0300 0400D6E5 		ldrb	r0, [r6, #4]	@ zero_extendqisi2
 575              	.LVL36:
 320:./src/main.c  **** 			TransmitExtendedFrame();
 576              		.loc 1 320 3 view .LVU188
 577 0304 000050E3 		cmp	r0, #0
 578 0308 A9FFFF1A 		bne	.L18
 321:./src/main.c  **** 		}
 579              		.loc 1 321 4 is_stmt 1 view .LVU189
 580              	.LBB330:
 581              	.LBI330:
 611:./src/main.c  **** //-------------------------------------------------
 582              		.loc 1 611 13 view .LVU190
 583              	.LBB331:
 614:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 584              		.loc 1 614 2 view .LVU191
 615:./src/main.c  **** 
 585              		.loc 1 615 2 view .LVU192
 617:./src/main.c  **** 
 586              		.loc 1 617 2 view .LVU193
 587              	.LVL37:
 620:./src/main.c  **** 	&&  (CanBusMode == BUS_ON) 
 588              		.loc 1 620 3 view .LVU194
 622:./src/main.c  **** 
 589              		.loc 1 622 2 is_stmt 0 view .LVU195
 590 030c 4A30D5E5 		ldrb	r3, [r5, #74]	@ zero_extendqisi2
 591 0310 000053E3 		cmp	r3, #0
 592 0314 0003001A 		bne	.L66
 625:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 593              		.loc 1 625 3 is_stmt 1 view .LVU196
 625:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 594              		.loc 1 625 22 is_stmt 0 view .LVU197
 595 0318 543085E5 		str	r3, [r5, #84]
 626:./src/main.c  **** 	
 596              		.loc 1 626 3 is_stmt 1 view .LVU198
 626:./src/main.c  **** 	
 597              		.loc 1 626 22 is_stmt 0 view .LVU199
 598 031c 583085E5 		str	r3, [r5, #88]
 629:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 599              		.loc 1 629 3 is_stmt 1 view .LVU200
 629:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 600              		.loc 1 629 34 is_stmt 0 view .LVU201
 601 0320 0530D5E5 		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 602              	.LVL38:
 603              	.LBB332:
 604              	.LBI332:
  87:./src/main.c  **** {
 605              		.loc 1 87 6 is_stmt 1 view .LVU202
 606              	.LBB333:
  89:./src/main.c  **** 	{
 607              		.loc 1 89 2 view .LVU203
  89:./src/main.c  **** 	{
 608              		.loc 1 89 4 is_stmt 0 view .LVU204
 609 0324 410043E2 		sub	r0, r3, #65
 610 0328 190050E3 		cmp	r0, #25
  91:./src/main.c  **** 		return chr &0xF;
 611              		.loc 1 91 7 view .LVU205
 612 032c 37304392 		subls	r3, r3, #55
 613              	.LVL39:
  92:./src/main.c  **** 	}
 614              		.loc 1 92 14 view .LVU206
 615 0330 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 616              		.loc 1 89 4 view .LVU207
 617 0334 0400009A 		bls	.L100
  94:./src/main.c  **** 	{
 618              		.loc 1 94 2 is_stmt 1 view .LVU208
  94:./src/main.c  **** 	{
 619              		.loc 1 94 19 is_stmt 0 view .LVU209
 620 0338 610043E2 		sub	r0, r3, #97
 621              	.LVL40:
  94:./src/main.c  **** 	{
 622              		.loc 1 94 4 view .LVU210
 623 033c FF0000E2 		and	r0, r0, #255
 624 0340 190050E3 		cmp	r0, #25
  96:./src/main.c  **** 		return chr &0xF;
 625              		.loc 1 96 3 is_stmt 1 view .LVU211
 626              	.LVL41:
  97:./src/main.c  **** 	}
 627              		.loc 1 97 3 view .LVU212
  96:./src/main.c  **** 		return chr &0xF;
 628              		.loc 1 96 7 is_stmt 0 view .LVU213
 629 0344 57304392 		subls	r3, r3, #87
 630              	.LVL42:
 631              	.LBB334:
 632              	.LBI334:
  87:./src/main.c  **** {
 633              		.loc 1 87 6 is_stmt 1 view .LVU214
 634              	.LBB335:
 100:./src/main.c  **** 	{
 635              		.loc 1 100 2 view .LVU215
 104:./src/main.c  **** }
 636              		.loc 1 104 2 view .LVU216
 104:./src/main.c  **** }
 637              		.loc 1 104 13 is_stmt 0 view .LVU217
 638 0348 0F3003E2 		and	r3, r3, #15
 639              	.LVL43:
 640              	.L100:
 104:./src/main.c  **** }
 641              		.loc 1 104 13 view .LVU218
 642              	.LBE335:
 643              	.LBE334:
 644              	.LBE333:
 645              	.LBE332:
 630:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 646              		.loc 1 630 34 view .LVU219
 647 034c 0600D5E5 		ldrb	r0, [r5, #6]	@ zero_extendqisi2
 648              	.LBB336:
 649              	.LBB337:
  89:./src/main.c  **** 	{
 650              		.loc 1 89 4 view .LVU220
 651 0350 41C040E2 		sub	ip, r0, #65
 652 0354 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 653              		.loc 1 91 7 view .LVU221
 654 0358 37004092 		subls	r0, r0, #55
 655              	.LBE337:
 656              	.LBE336:
 629:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 657              		.loc 1 629 57 view .LVU222
 658 035c 033EA0E1 		lsl	r3, r3, #28
 630:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 659              		.loc 1 630 3 is_stmt 1 view .LVU223
 660              	.LBB341:
 661              	.LBI336:
  87:./src/main.c  **** {
 662              		.loc 1 87 6 view .LVU224
 663              	.LBB340:
  89:./src/main.c  **** 	{
 664              		.loc 1 89 2 view .LVU225
  92:./src/main.c  **** 	}
 665              		.loc 1 92 14 is_stmt 0 view .LVU226
 666 0360 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 667              		.loc 1 89 4 view .LVU227
 668 0364 0400009A 		bls	.L104
  94:./src/main.c  **** 	{
 669              		.loc 1 94 2 is_stmt 1 view .LVU228
  94:./src/main.c  **** 	{
 670              		.loc 1 94 19 is_stmt 0 view .LVU229
 671 0368 61C040E2 		sub	ip, r0, #97
  94:./src/main.c  **** 	{
 672              		.loc 1 94 4 view .LVU230
 673 036c FFC00CE2 		and	ip, ip, #255
 674 0370 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 675              		.loc 1 96 3 is_stmt 1 view .LVU231
 676              	.LVL44:
  97:./src/main.c  **** 	}
 677              		.loc 1 97 3 view .LVU232
  96:./src/main.c  **** 		return chr &0xF;
 678              		.loc 1 96 7 is_stmt 0 view .LVU233
 679 0374 57004092 		subls	r0, r0, #87
 680              	.LVL45:
 681              	.LBB338:
 682              	.LBI338:
  87:./src/main.c  **** {
 683              		.loc 1 87 6 is_stmt 1 view .LVU234
 684              	.LBB339:
 100:./src/main.c  **** 	{
 685              		.loc 1 100 2 view .LVU235
 104:./src/main.c  **** }
 686              		.loc 1 104 2 view .LVU236
 104:./src/main.c  **** }
 687              		.loc 1 104 13 is_stmt 0 view .LVU237
 688 0378 0F0000E2 		and	r0, r0, #15
 689              	.LVL46:
 690              	.L104:
 104:./src/main.c  **** }
 691              		.loc 1 104 13 view .LVU238
 692              	.LBE339:
 693              	.LBE338:
 694              	.LBE340:
 695              	.LBE341:
 630:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 696              		.loc 1 630 30 view .LVU239
 697 037c 003C83E1 		orr	r3, r3, r0, lsl #24
 631:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 698              		.loc 1 631 3 is_stmt 1 view .LVU240
 631:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 699              		.loc 1 631 34 is_stmt 0 view .LVU241
 700 0380 0700D5E5 		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 701              	.LVL47:
 702              	.LBB342:
 703              	.LBI342:
  87:./src/main.c  **** {
 704              		.loc 1 87 6 is_stmt 1 view .LVU242
 705              	.LBB343:
  89:./src/main.c  **** 	{
 706              		.loc 1 89 2 view .LVU243
  89:./src/main.c  **** 	{
 707              		.loc 1 89 4 is_stmt 0 view .LVU244
 708 0384 41C040E2 		sub	ip, r0, #65
 709 0388 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 710              		.loc 1 91 7 view .LVU245
 711 038c 37004092 		subls	r0, r0, #55
 712              	.LVL48:
  92:./src/main.c  **** 	}
 713              		.loc 1 92 14 view .LVU246
 714 0390 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 715              		.loc 1 89 4 view .LVU247
 716 0394 0400009A 		bls	.L108
  94:./src/main.c  **** 	{
 717              		.loc 1 94 2 is_stmt 1 view .LVU248
  94:./src/main.c  **** 	{
 718              		.loc 1 94 19 is_stmt 0 view .LVU249
 719 0398 61C040E2 		sub	ip, r0, #97
 720              	.LVL49:
  94:./src/main.c  **** 	{
 721              		.loc 1 94 4 view .LVU250
 722 039c FFC00CE2 		and	ip, ip, #255
 723 03a0 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 724              		.loc 1 96 3 is_stmt 1 view .LVU251
 725              	.LVL50:
  97:./src/main.c  **** 	}
 726              		.loc 1 97 3 view .LVU252
  96:./src/main.c  **** 		return chr &0xF;
 727              		.loc 1 96 7 is_stmt 0 view .LVU253
 728 03a4 57004092 		subls	r0, r0, #87
 729              	.LVL51:
 730              	.LBB344:
 731              	.LBI344:
  87:./src/main.c  **** {
 732              		.loc 1 87 6 is_stmt 1 view .LVU254
 733              	.LBB345:
 100:./src/main.c  **** 	{
 734              		.loc 1 100 2 view .LVU255
 104:./src/main.c  **** }
 735              		.loc 1 104 2 view .LVU256
 104:./src/main.c  **** }
 736              		.loc 1 104 13 is_stmt 0 view .LVU257
 737 03a8 0F0000E2 		and	r0, r0, #15
 738              	.LVL52:
 739              	.L108:
 104:./src/main.c  **** }
 740              		.loc 1 104 13 view .LVU258
 741              	.LBE345:
 742              	.LBE344:
 743              	.LBE343:
 744              	.LBE342:
 631:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 745              		.loc 1 631 30 view .LVU259
 746 03ac 003A83E1 		orr	r3, r3, r0, lsl #20
 632:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 747              		.loc 1 632 3 is_stmt 1 view .LVU260
 632:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 748              		.loc 1 632 34 is_stmt 0 view .LVU261
 749 03b0 0800D5E5 		ldrb	r0, [r5, #8]	@ zero_extendqisi2
 750              	.LVL53:
 751              	.LBB346:
 752              	.LBI346:
  87:./src/main.c  **** {
 753              		.loc 1 87 6 is_stmt 1 view .LVU262
 754              	.LBB347:
  89:./src/main.c  **** 	{
 755              		.loc 1 89 2 view .LVU263
  89:./src/main.c  **** 	{
 756              		.loc 1 89 4 is_stmt 0 view .LVU264
 757 03b4 41C040E2 		sub	ip, r0, #65
 758 03b8 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 759              		.loc 1 91 7 view .LVU265
 760 03bc 37004092 		subls	r0, r0, #55
 761              	.LVL54:
  92:./src/main.c  **** 	}
 762              		.loc 1 92 14 view .LVU266
 763 03c0 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 764              		.loc 1 89 4 view .LVU267
 765 03c4 0400009A 		bls	.L112
  94:./src/main.c  **** 	{
 766              		.loc 1 94 2 is_stmt 1 view .LVU268
  94:./src/main.c  **** 	{
 767              		.loc 1 94 19 is_stmt 0 view .LVU269
 768 03c8 61C040E2 		sub	ip, r0, #97
 769              	.LVL55:
  94:./src/main.c  **** 	{
 770              		.loc 1 94 4 view .LVU270
 771 03cc FFC00CE2 		and	ip, ip, #255
 772 03d0 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 773              		.loc 1 96 3 is_stmt 1 view .LVU271
 774              	.LVL56:
  97:./src/main.c  **** 	}
 775              		.loc 1 97 3 view .LVU272
  96:./src/main.c  **** 		return chr &0xF;
 776              		.loc 1 96 7 is_stmt 0 view .LVU273
 777 03d4 57004092 		subls	r0, r0, #87
 778              	.LVL57:
 779              	.LBB348:
 780              	.LBI348:
  87:./src/main.c  **** {
 781              		.loc 1 87 6 is_stmt 1 view .LVU274
 782              	.LBB349:
 100:./src/main.c  **** 	{
 783              		.loc 1 100 2 view .LVU275
 104:./src/main.c  **** }
 784              		.loc 1 104 2 view .LVU276
 104:./src/main.c  **** }
 785              		.loc 1 104 13 is_stmt 0 view .LVU277
 786 03d8 0F0000E2 		and	r0, r0, #15
 787              	.LVL58:
 788              	.L112:
 104:./src/main.c  **** }
 789              		.loc 1 104 13 view .LVU278
 790              	.LBE349:
 791              	.LBE348:
 792              	.LBE347:
 793              	.LBE346:
 632:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 794              		.loc 1 632 30 view .LVU279
 795 03dc 003883E1 		orr	r3, r3, r0, lsl #16
 633:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 796              		.loc 1 633 3 is_stmt 1 view .LVU280
 633:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 797              		.loc 1 633 34 is_stmt 0 view .LVU281
 798 03e0 0900D5E5 		ldrb	r0, [r5, #9]	@ zero_extendqisi2
 799              	.LVL59:
 800              	.LBB350:
 801              	.LBI350:
  87:./src/main.c  **** {
 802              		.loc 1 87 6 is_stmt 1 view .LVU282
 803              	.LBB351:
  89:./src/main.c  **** 	{
 804              		.loc 1 89 2 view .LVU283
  89:./src/main.c  **** 	{
 805              		.loc 1 89 4 is_stmt 0 view .LVU284
 806 03e4 41C040E2 		sub	ip, r0, #65
 807 03e8 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 808              		.loc 1 91 7 view .LVU285
 809 03ec 37004092 		subls	r0, r0, #55
 810              	.LVL60:
  92:./src/main.c  **** 	}
 811              		.loc 1 92 14 view .LVU286
 812 03f0 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 813              		.loc 1 89 4 view .LVU287
 814 03f4 0400009A 		bls	.L116
  94:./src/main.c  **** 	{
 815              		.loc 1 94 2 is_stmt 1 view .LVU288
  94:./src/main.c  **** 	{
 816              		.loc 1 94 19 is_stmt 0 view .LVU289
 817 03f8 61C040E2 		sub	ip, r0, #97
 818              	.LVL61:
  94:./src/main.c  **** 	{
 819              		.loc 1 94 4 view .LVU290
 820 03fc FFC00CE2 		and	ip, ip, #255
 821 0400 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 822              		.loc 1 96 3 is_stmt 1 view .LVU291
 823              	.LVL62:
  97:./src/main.c  **** 	}
 824              		.loc 1 97 3 view .LVU292
  96:./src/main.c  **** 		return chr &0xF;
 825              		.loc 1 96 7 is_stmt 0 view .LVU293
 826 0404 57004092 		subls	r0, r0, #87
 827              	.LVL63:
 828              	.LBB352:
 829              	.LBI352:
  87:./src/main.c  **** {
 830              		.loc 1 87 6 is_stmt 1 view .LVU294
 831              	.LBB353:
 100:./src/main.c  **** 	{
 832              		.loc 1 100 2 view .LVU295
 104:./src/main.c  **** }
 833              		.loc 1 104 2 view .LVU296
 104:./src/main.c  **** }
 834              		.loc 1 104 13 is_stmt 0 view .LVU297
 835 0408 0F0000E2 		and	r0, r0, #15
 836              	.LVL64:
 837              	.L116:
 104:./src/main.c  **** }
 838              		.loc 1 104 13 view .LVU298
 839              	.LBE353:
 840              	.LBE352:
 841              	.LBE351:
 842              	.LBE350:
 633:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 843              		.loc 1 633 30 view .LVU299
 844 040c 003683E1 		orr	r3, r3, r0, lsl #12
 634:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 845              		.loc 1 634 3 is_stmt 1 view .LVU300
 634:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 846              		.loc 1 634 34 is_stmt 0 view .LVU301
 847 0410 0A00D5E5 		ldrb	r0, [r5, #10]	@ zero_extendqisi2
 848              	.LVL65:
 849              	.LBB354:
 850              	.LBI354:
  87:./src/main.c  **** {
 851              		.loc 1 87 6 is_stmt 1 view .LVU302
 852              	.LBB355:
  89:./src/main.c  **** 	{
 853              		.loc 1 89 2 view .LVU303
  89:./src/main.c  **** 	{
 854              		.loc 1 89 4 is_stmt 0 view .LVU304
 855 0414 41C040E2 		sub	ip, r0, #65
 856 0418 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 857              		.loc 1 91 7 view .LVU305
 858 041c 37004092 		subls	r0, r0, #55
 859              	.LVL66:
  92:./src/main.c  **** 	}
 860              		.loc 1 92 14 view .LVU306
 861 0420 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 862              		.loc 1 89 4 view .LVU307
 863 0424 0400009A 		bls	.L120
  94:./src/main.c  **** 	{
 864              		.loc 1 94 2 is_stmt 1 view .LVU308
  94:./src/main.c  **** 	{
 865              		.loc 1 94 19 is_stmt 0 view .LVU309
 866 0428 61C040E2 		sub	ip, r0, #97
 867              	.LVL67:
  94:./src/main.c  **** 	{
 868              		.loc 1 94 4 view .LVU310
 869 042c FFC00CE2 		and	ip, ip, #255
 870 0430 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 871              		.loc 1 96 3 is_stmt 1 view .LVU311
 872              	.LVL68:
  97:./src/main.c  **** 	}
 873              		.loc 1 97 3 view .LVU312
  96:./src/main.c  **** 		return chr &0xF;
 874              		.loc 1 96 7 is_stmt 0 view .LVU313
 875 0434 57004092 		subls	r0, r0, #87
 876              	.LVL69:
 877              	.LBB356:
 878              	.LBI356:
  87:./src/main.c  **** {
 879              		.loc 1 87 6 is_stmt 1 view .LVU314
 880              	.LBB357:
 100:./src/main.c  **** 	{
 881              		.loc 1 100 2 view .LVU315
 104:./src/main.c  **** }
 882              		.loc 1 104 2 view .LVU316
 104:./src/main.c  **** }
 883              		.loc 1 104 13 is_stmt 0 view .LVU317
 884 0438 0F0000E2 		and	r0, r0, #15
 885              	.LVL70:
 886              	.L120:
 104:./src/main.c  **** }
 887              		.loc 1 104 13 view .LVU318
 888              	.LBE357:
 889              	.LBE356:
 890              	.LBE355:
 891              	.LBE354:
 634:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 892              		.loc 1 634 30 view .LVU319
 893 043c 003483E1 		orr	r3, r3, r0, lsl #8
 635:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 894              		.loc 1 635 3 is_stmt 1 view .LVU320
 635:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 895              		.loc 1 635 34 is_stmt 0 view .LVU321
 896 0440 0B00D5E5 		ldrb	r0, [r5, #11]	@ zero_extendqisi2
 897              	.LVL71:
 898              	.LBB358:
 899              	.LBI358:
  87:./src/main.c  **** {
 900              		.loc 1 87 6 is_stmt 1 view .LVU322
 901              	.LBB359:
  89:./src/main.c  **** 	{
 902              		.loc 1 89 2 view .LVU323
  89:./src/main.c  **** 	{
 903              		.loc 1 89 4 is_stmt 0 view .LVU324
 904 0444 41C040E2 		sub	ip, r0, #65
 905 0448 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 906              		.loc 1 91 7 view .LVU325
 907 044c 37004092 		subls	r0, r0, #55
 908              	.LVL72:
  92:./src/main.c  **** 	}
 909              		.loc 1 92 14 view .LVU326
 910 0450 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 911              		.loc 1 89 4 view .LVU327
 912 0454 0400009A 		bls	.L124
  94:./src/main.c  **** 	{
 913              		.loc 1 94 2 is_stmt 1 view .LVU328
  94:./src/main.c  **** 	{
 914              		.loc 1 94 19 is_stmt 0 view .LVU329
 915 0458 61C040E2 		sub	ip, r0, #97
 916              	.LVL73:
  94:./src/main.c  **** 	{
 917              		.loc 1 94 4 view .LVU330
 918 045c FFC00CE2 		and	ip, ip, #255
 919 0460 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 920              		.loc 1 96 3 is_stmt 1 view .LVU331
 921              	.LVL74:
  97:./src/main.c  **** 	}
 922              		.loc 1 97 3 view .LVU332
  96:./src/main.c  **** 		return chr &0xF;
 923              		.loc 1 96 7 is_stmt 0 view .LVU333
 924 0464 57004092 		subls	r0, r0, #87
 925              	.LVL75:
 926              	.LBB360:
 927              	.LBI360:
  87:./src/main.c  **** {
 928              		.loc 1 87 6 is_stmt 1 view .LVU334
 929              	.LBB361:
 100:./src/main.c  **** 	{
 930              		.loc 1 100 2 view .LVU335
 104:./src/main.c  **** }
 931              		.loc 1 104 2 view .LVU336
 104:./src/main.c  **** }
 932              		.loc 1 104 13 is_stmt 0 view .LVU337
 933 0468 0F0000E2 		and	r0, r0, #15
 934              	.LVL76:
 935              	.L124:
 104:./src/main.c  **** }
 936              		.loc 1 104 13 view .LVU338
 937              	.LBE361:
 938              	.LBE360:
 939              	.LBE359:
 940              	.LBE358:
 635:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 941              		.loc 1 635 30 view .LVU339
 942 046c 003283E1 		orr	r3, r3, r0, lsl #4
 636:./src/main.c  **** 		
 943              		.loc 1 636 3 is_stmt 1 view .LVU340
 636:./src/main.c  **** 		
 944              		.loc 1 636 34 is_stmt 0 view .LVU341
 945 0470 0C00D5E5 		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 946              	.LVL77:
 947              	.LBB362:
 948              	.LBI362:
  87:./src/main.c  **** {
 949              		.loc 1 87 6 is_stmt 1 view .LVU342
 950              	.LBB363:
  89:./src/main.c  **** 	{
 951              		.loc 1 89 2 view .LVU343
  89:./src/main.c  **** 	{
 952              		.loc 1 89 4 is_stmt 0 view .LVU344
 953 0474 41C040E2 		sub	ip, r0, #65
 954 0478 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 955              		.loc 1 91 7 view .LVU345
 956 047c 37004092 		subls	r0, r0, #55
 957              	.LVL78:
  92:./src/main.c  **** 	}
 958              		.loc 1 92 14 view .LVU346
 959 0480 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 960              		.loc 1 89 4 view .LVU347
 961 0484 0400009A 		bls	.L128
  94:./src/main.c  **** 	{
 962              		.loc 1 94 2 is_stmt 1 view .LVU348
  94:./src/main.c  **** 	{
 963              		.loc 1 94 19 is_stmt 0 view .LVU349
 964 0488 61C040E2 		sub	ip, r0, #97
 965              	.LVL79:
  94:./src/main.c  **** 	{
 966              		.loc 1 94 4 view .LVU350
 967 048c FFC00CE2 		and	ip, ip, #255
 968 0490 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 969              		.loc 1 96 3 is_stmt 1 view .LVU351
 970              	.LVL80:
  97:./src/main.c  **** 	}
 971              		.loc 1 97 3 view .LVU352
  96:./src/main.c  **** 		return chr &0xF;
 972              		.loc 1 96 7 is_stmt 0 view .LVU353
 973 0494 57004092 		subls	r0, r0, #87
 974              	.LVL81:
 975              	.LBB364:
 976              	.LBI364:
  87:./src/main.c  **** {
 977              		.loc 1 87 6 is_stmt 1 view .LVU354
 978              	.LBB365:
 100:./src/main.c  **** 	{
 979              		.loc 1 100 2 view .LVU355
 104:./src/main.c  **** }
 980              		.loc 1 104 2 view .LVU356
 104:./src/main.c  **** }
 981              		.loc 1 104 13 is_stmt 0 view .LVU357
 982 0498 0F0000E2 		and	r0, r0, #15
 983              	.LVL82:
 984              	.L128:
 104:./src/main.c  **** }
 985              		.loc 1 104 13 view .LVU358
 986              	.LBE365:
 987              	.LBE364:
 988              	.LBE363:
 989              	.LBE362:
 636:./src/main.c  **** 		
 990              		.loc 1 636 30 view .LVU359
 991 049c 030080E1 		orr	r0, r0, r3
 639:./src/main.c  **** 	
 992              		.loc 1 639 17 view .LVU360
 993 04a0 0230A0E3 		mov	r3, #2
 994              	.LBB366:
 995              	.LBB367:
  89:./src/main.c  **** 	{
 996              		.loc 1 89 4 view .LVU361
 997 04a4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 998              		.loc 1 91 7 view .LVU362
 999 04a8 37204292 		subls	r2, r2, #55
 1000              	.LBE367:
 1001              	.LBE366:
 636:./src/main.c  **** 		
 1002              		.loc 1 636 15 view .LVU363
 1003 04ac 500085E5 		str	r0, [r5, #80]
 639:./src/main.c  **** 	
 1004              		.loc 1 639 3 is_stmt 1 view .LVU364
 639:./src/main.c  **** 	
 1005              		.loc 1 639 17 is_stmt 0 view .LVU365
 1006 04b0 4E30C5E5 		strb	r3, [r5, #78]
 642:./src/main.c  **** 		
 1007              		.loc 1 642 3 is_stmt 1 view .LVU366
 1008              	.LBB371:
 1009              	.LBI366:
  87:./src/main.c  **** {
 1010              		.loc 1 87 6 view .LVU367
 1011              	.LBB370:
  89:./src/main.c  **** 	{
 1012              		.loc 1 89 2 view .LVU368
  92:./src/main.c  **** 	}
 1013              		.loc 1 92 14 is_stmt 0 view .LVU369
 1014 04b4 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 1015              		.loc 1 89 4 view .LVU370
 1016 04b8 0400009A 		bls	.L132
  94:./src/main.c  **** 	{
 1017              		.loc 1 94 2 is_stmt 1 view .LVU371
  94:./src/main.c  **** 	{
 1018              		.loc 1 94 19 is_stmt 0 view .LVU372
 1019 04bc 613042E2 		sub	r3, r2, #97
  94:./src/main.c  **** 	{
 1020              		.loc 1 94 4 view .LVU373
 1021 04c0 FF3003E2 		and	r3, r3, #255
 1022 04c4 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 1023              		.loc 1 96 3 is_stmt 1 view .LVU374
 1024              	.LVL83:
  97:./src/main.c  **** 	}
 1025              		.loc 1 97 3 view .LVU375
  96:./src/main.c  **** 		return chr &0xF;
 1026              		.loc 1 96 7 is_stmt 0 view .LVU376
 1027 04c8 57204292 		subls	r2, r2, #87
 1028              	.LVL84:
 1029              	.LBB368:
 1030              	.LBI368:
  87:./src/main.c  **** {
 1031              		.loc 1 87 6 is_stmt 1 view .LVU377
 1032              	.LBB369:
 100:./src/main.c  **** 	{
 1033              		.loc 1 100 2 view .LVU378
 104:./src/main.c  **** }
 1034              		.loc 1 104 2 view .LVU379
 104:./src/main.c  **** }
 1035              		.loc 1 104 13 is_stmt 0 view .LVU380
 1036 04cc 0F2002E2 		and	r2, r2, #15
 1037              	.LVL85:
 1038              	.L132:
 104:./src/main.c  **** }
 1039              		.loc 1 104 13 view .LVU381
 1040 04d0 64CA9FE5 		ldr	ip, .L253+20
 1041              	.LBE369:
 1042              	.LBE368:
 1043              	.LBE370:
 1044              	.LBE371:
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1045              		.loc 1 645 3 view .LVU382
 1046 04d4 00E0A0E3 		mov	lr, #0
 642:./src/main.c  **** 		
 1047              		.loc 1 642 16 view .LVU383
 1048 04d8 4F20C5E5 		strb	r2, [r5, #79]
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1049              		.loc 1 645 3 is_stmt 1 view .LVU384
 1050              	.LVL86:
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1051              		.loc 1 645 3 is_stmt 0 view .LVU385
 1052 04dc 50004CE2 		sub	r0, ip, #80
 1053 04e0 1B0000EA 		b	.L135
 1054              	.LVL87:
 1055              	.L144:
 646:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[11+2*i]))& 0x00F));
 1056              		.loc 1 646 4 is_stmt 1 view .LVU386
 646:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[11+2*i]))& 0x00F));
 1057              		.loc 1 646 25 is_stmt 0 view .LVU387
 1058 04e4 0A30D0E5 		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 1059              	.LVL88:
 1060              	.LBB372:
 1061              	.LBI372:
  87:./src/main.c  **** {
 1062              		.loc 1 87 6 is_stmt 1 view .LVU388
 1063              	.LBB373:
  89:./src/main.c  **** 	{
 1064              		.loc 1 89 2 view .LVU389
  89:./src/main.c  **** 	{
 1065              		.loc 1 89 4 is_stmt 0 view .LVU390
 1066 04e8 411043E2 		sub	r1, r3, #65
 1067 04ec 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1068              		.loc 1 91 7 view .LVU391
 1069 04f0 37304392 		subls	r3, r3, #55
 1070              	.LVL89:
  92:./src/main.c  **** 	}
 1071              		.loc 1 92 14 view .LVU392
 1072 04f4 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 1073              		.loc 1 89 4 view .LVU393
 1074 04f8 0400009A 		bls	.L137
  94:./src/main.c  **** 	{
 1075              		.loc 1 94 2 is_stmt 1 view .LVU394
  94:./src/main.c  **** 	{
 1076              		.loc 1 94 19 is_stmt 0 view .LVU395
 1077 04fc 611043E2 		sub	r1, r3, #97
 1078              	.LVL90:
  94:./src/main.c  **** 	{
 1079              		.loc 1 94 4 view .LVU396
 1080 0500 FF1001E2 		and	r1, r1, #255
 1081 0504 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 1082              		.loc 1 96 3 is_stmt 1 view .LVU397
 1083              	.LVL91:
  97:./src/main.c  **** 	}
 1084              		.loc 1 97 3 view .LVU398
  96:./src/main.c  **** 		return chr &0xF;
 1085              		.loc 1 96 7 is_stmt 0 view .LVU399
 1086 0508 57304392 		subls	r3, r3, #87
 1087              	.LVL92:
 1088              	.LBB374:
 1089              	.LBI374:
  87:./src/main.c  **** {
 1090              		.loc 1 87 6 is_stmt 1 view .LVU400
 1091              	.LBB375:
 100:./src/main.c  **** 	{
 1092              		.loc 1 100 2 view .LVU401
 104:./src/main.c  **** }
 1093              		.loc 1 104 2 view .LVU402
 104:./src/main.c  **** }
 1094              		.loc 1 104 13 is_stmt 0 view .LVU403
 1095 050c 0F3003E2 		and	r3, r3, #15
 1096              	.LVL93:
 1097              	.L137:
 104:./src/main.c  **** }
 1098              		.loc 1 104 13 view .LVU404
 1099              	.LBE375:
 1100              	.LBE374:
 1101              	.LBE373:
 1102              	.LBE372:
 647:./src/main.c  **** 		}
 1103              		.loc 1 647 4 is_stmt 1 view .LVU405
 647:./src/main.c  **** 		}
 1104              		.loc 1 647 47 is_stmt 0 view .LVU406
 1105 0510 0B10D0E5 		ldrb	r1, [r0, #11]	@ zero_extendqisi2
 1106              	.LVL94:
 1107              	.LBB376:
 1108              	.LBI376:
  87:./src/main.c  **** {
 1109              		.loc 1 87 6 is_stmt 1 view .LVU407
 1110              	.LBB377:
  89:./src/main.c  **** 	{
 1111              		.loc 1 89 2 view .LVU408
  89:./src/main.c  **** 	{
 1112              		.loc 1 89 4 is_stmt 0 view .LVU409
 1113 0514 417041E2 		sub	r7, r1, #65
 1114 0518 190057E3 		cmp	r7, #25
 1115              	.LBE377:
 1116              	.LBE376:
 647:./src/main.c  **** 		}
 1117              		.loc 1 647 39 view .LVU410
 1118 051c 033EA0E1 		lsl	r3, r3, #28
 1119              	.LBB382:
 1120              	.LBB380:
  91:./src/main.c  **** 		return chr &0xF;
 1121              		.loc 1 91 7 view .LVU411
 1122 0520 37104192 		subls	r1, r1, #55
 1123              	.LVL95:
  91:./src/main.c  **** 		return chr &0xF;
 1124              		.loc 1 91 7 view .LVU412
 1125              	.LBE380:
 1126              	.LBE382:
 647:./src/main.c  **** 		}
 1127              		.loc 1 647 39 view .LVU413
 1128 0524 433CA0E1 		asr	r3, r3, #24
 1129              	.LBB383:
 1130              	.LBB381:
  92:./src/main.c  **** 	}
 1131              		.loc 1 92 14 view .LVU414
 1132 0528 0F100192 		andls	r1, r1, #15
  89:./src/main.c  **** 	{
 1133              		.loc 1 89 4 view .LVU415
 1134 052c 0400009A 		bls	.L141
  94:./src/main.c  **** 	{
 1135              		.loc 1 94 2 is_stmt 1 view .LVU416
  94:./src/main.c  **** 	{
 1136              		.loc 1 94 19 is_stmt 0 view .LVU417
 1137 0530 617041E2 		sub	r7, r1, #97
 1138              	.LVL96:
  94:./src/main.c  **** 	{
 1139              		.loc 1 94 4 view .LVU418
 1140 0534 FF7007E2 		and	r7, r7, #255
 1141 0538 190057E3 		cmp	r7, #25
  96:./src/main.c  **** 		return chr &0xF;
 1142              		.loc 1 96 3 is_stmt 1 view .LVU419
 1143              	.LVL97:
  97:./src/main.c  **** 	}
 1144              		.loc 1 97 3 view .LVU420
  96:./src/main.c  **** 		return chr &0xF;
 1145              		.loc 1 96 7 is_stmt 0 view .LVU421
 1146 053c 57104192 		subls	r1, r1, #87
 1147              	.LVL98:
 1148              	.LBB378:
 1149              	.LBI378:
  87:./src/main.c  **** {
 1150              		.loc 1 87 6 is_stmt 1 view .LVU422
 1151              	.LBB379:
 100:./src/main.c  **** 	{
 1152              		.loc 1 100 2 view .LVU423
 104:./src/main.c  **** }
 1153              		.loc 1 104 2 view .LVU424
 104:./src/main.c  **** }
 1154              		.loc 1 104 13 is_stmt 0 view .LVU425
 1155 0540 0F1001E2 		and	r1, r1, #15
 1156              	.LVL99:
 1157              	.L141:
 104:./src/main.c  **** }
 1158              		.loc 1 104 13 view .LVU426
 1159              	.LBE379:
 1160              	.LBE378:
 1161              	.LBE381:
 1162              	.LBE383:
 647:./src/main.c  **** 		}
 1163              		.loc 1 647 43 view .LVU427
 1164 0544 011083E1 		orr	r1, r3, r1
 647:./src/main.c  **** 		}
 1165              		.loc 1 647 22 view .LVU428
 1166 0548 0110CCE4 		strb	r1, [ip], #1
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1167              		.loc 1 645 29 is_stmt 1 view .LVU429
 1168              	.LVL100:
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1169              		.loc 1 645 29 is_stmt 0 view .LVU430
 1170 054c 01E08EE2 		add	lr, lr, #1
 1171              	.LVL101:
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1172              		.loc 1 645 29 view .LVU431
 1173 0550 020080E2 		add	r0, r0, #2
 1174              	.L135:
 1175              	.LVL102:
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1176              		.loc 1 645 12 is_stmt 1 view .LVU432
 645:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1177              		.loc 1 645 3 is_stmt 0 view .LVU433
 1178 0554 FF300EE2 		and	r3, lr, #255
 1179 0558 030052E1 		cmp	r2, r3
 1180 055c E0FFFF8A 		bhi	.L144
 1181              	.LVL103:
 1182              	.L245:
 651:./src/main.c  **** 	}
 1183              		.loc 1 651 3 is_stmt 1 view .LVU434
 1184 0560 0000A0E3 		mov	r0, #0
 1185 0564 D4199FE5 		ldr	r1, .L253+24
 1186 0568 FEFFFFEB 		bl	CAN_UserWrite
 1187              	.LVL104:
 659:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 1188              		.loc 1 659 2 view .LVU435
 659:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 1189              		.loc 1 659 15 is_stmt 0 view .LVU436
 1190 056c 0020A0E3 		mov	r2, #0
 661:./src/main.c  **** 		if (Result == ret_OK) {
 1191              		.loc 1 661 5 view .LVU437
 1192 0570 0530D6E5 		ldrb	r3, [r6, #5]	@ zero_extendqisi2
 1193 0574 010053E3 		cmp	r3, #1
 659:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 1194              		.loc 1 659 15 view .LVU438
 1195 0578 4920C5E5 		strb	r2, [r5, #73]
 661:./src/main.c  **** 		if (Result == ret_OK) {
 1196              		.loc 1 661 2 is_stmt 1 view .LVU439
 663:./src/main.c  **** 			SerXmtBufPtr++;
 1197              		.loc 1 663 4 view .LVU440
 663:./src/main.c  **** 			SerXmtBufPtr++;
 1198              		.loc 1 663 28 is_stmt 0 view .LVU441
 1199 057c 5A20A003 		moveq	r2, #90
 664:./src/main.c  **** 		}
 1200              		.loc 1 664 16 view .LVU442
 1201 0580 4930C505 		strbeq	r3, [r5, #73]
 663:./src/main.c  **** 			SerXmtBufPtr++;
 1202              		.loc 1 663 28 view .LVU443
 1203 0584 2820C505 		strbeq	r2, [r5, #40]
 664:./src/main.c  **** 		}
 1204              		.loc 1 664 4 is_stmt 1 view .LVU444
 1205              	.LVL105:
 1206              	.L145:
 667:./src/main.c  **** 	SerXmtBufPtr++;
 1207              		.loc 1 667 2 view .LVU445
 667:./src/main.c  **** 	SerXmtBufPtr++;
 1208              		.loc 1 667 11 is_stmt 0 view .LVU446
 1209 0588 4930D5E5 		ldrb	r3, [r5, #73]	@ zero_extendqisi2
 668:./src/main.c  **** 	
 1210              		.loc 1 668 14 view .LVU447
 1211 058c 012083E2 		add	r2, r3, #1
 667:./src/main.c  **** 	SerXmtBufPtr++;
 1212              		.loc 1 667 26 view .LVU448
 1213 0590 033085E0 		add	r3, r5, r3
 1214 0594 2840C3E5 		strb	r4, [r3, #40]
 668:./src/main.c  **** 	
 1215              		.loc 1 668 2 is_stmt 1 view .LVU449
 668:./src/main.c  **** 	
 1216              		.loc 1 668 14 is_stmt 0 view .LVU450
 1217 0598 FF2002E2 		and	r2, r2, #255
 671:./src/main.c  **** }
 1218              		.loc 1 671 2 view .LVU451
 1219 059c 88199FE5 		ldr	r1, .L253+4
 1220 05a0 0000A0E3 		mov	r0, #0
 668:./src/main.c  **** 	
 1221              		.loc 1 668 14 view .LVU452
 1222 05a4 4920C5E5 		strb	r2, [r5, #73]
 671:./src/main.c  **** }
 1223              		.loc 1 671 2 is_stmt 1 view .LVU453
 1224 05a8 FEFFFFEB 		bl	SER_Write
 1225              	.LVL106:
 672:./src/main.c  **** /**************************************************/
 1226              		.loc 1 672 1 is_stmt 0 view .LVU454
 1227 05ac 19FFFFEA 		b	.L43
 1228              	.LVL107:
 1229              	.L35:
 672:./src/main.c  **** /**************************************************/
 1230              		.loc 1 672 1 view .LVU455
 1231              	.LBE331:
 1232              	.LBE330:
 281:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 1233              		.loc 1 281 3 is_stmt 1 view .LVU456
 281:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 1234              		.loc 1 281 6 is_stmt 0 view .LVU457
 1235 05b0 010056E3 		cmp	r6, #1
 1236 05b4 FEFEFF1A 		bne	.L18
 281:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 1237              		.loc 1 281 23 discriminator 1 view .LVU458
 1238 05b8 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 1239 05bc 000054E3 		cmp	r4, #0
 1240 05c0 FBFEFF1A 		bne	.L18
 281:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 1241              		.loc 1 281 44 discriminator 2 view .LVU459
 1242 05c4 2730D5E5 		ldrb	r3, [r5, #39]	@ zero_extendqisi2
 1243 05c8 010053E3 		cmp	r3, #1
 1244 05cc F8FEFF1A 		bne	.L18
 282:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_LOM);
 1245              		.loc 1 282 4 is_stmt 1 view .LVU460
 1246 05d0 0400A0E1 		mov	r0, r4
 1247              	.LVL108:
 282:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_LOM);
 1248              		.loc 1 282 4 is_stmt 0 view .LVU461
 1249 05d4 FEFFFFEB 		bl	CAN_ReInitChannel
 1250              	.LVL109:
 283:./src/main.c  **** 			CanChnOpen = 1;
 1251              		.loc 1 283 4 is_stmt 1 view .LVU462
 1252 05d8 0210A0E3 		mov	r1, #2
 1253 05dc 0400A0E1 		mov	r0, r4
 1254 05e0 FEFFFFEB 		bl	CAN_SetBusMode
 1255              	.LVL110:
 284:./src/main.c  **** 			CanBusMode =BUS_LOM;
 1256              		.loc 1 284 4 view .LVU463
 285:./src/main.c  **** 						// Send ASCII OK
 1257              		.loc 1 285 15 is_stmt 0 view .LVU464
 1258 05e4 02C0A0E3 		mov	ip, #2
 1259 05e8 48399FE5 		ldr	r3, .L253+16
 287:./src/main.c  **** 		}
 1260              		.loc 1 287 4 view .LVU465
 1261 05ec 0400A0E1 		mov	r0, r4
 1262 05f0 0620A0E1 		mov	r2, r6
 1263 05f4 07108DE2 		add	r1, sp, #7
 284:./src/main.c  **** 			CanBusMode =BUS_LOM;
 1264              		.loc 1 284 15 view .LVU466
 1265 05f8 2660C5E5 		strb	r6, [r5, #38]
 285:./src/main.c  **** 						// Send ASCII OK
 1266              		.loc 1 285 4 is_stmt 1 view .LVU467
 285:./src/main.c  **** 						// Send ASCII OK
 1267              		.loc 1 285 15 is_stmt 0 view .LVU468
 1268 05fc 04C0C3E5 		strb	ip, [r3, #4]
 287:./src/main.c  **** 		}
 1269              		.loc 1 287 4 is_stmt 1 view .LVU469
 1270 0600 FEFFFFEB 		bl	SER_Write
 1271              	.LVL111:
 1272 0604 03FFFFEA 		b	.L43
 1273              	.LVL112:
 1274              	.L34:
 457:./src/main.c  **** 			GetSerialNumber();
 1275              		.loc 1 457 3 view .LVU470
 457:./src/main.c  **** 			GetSerialNumber();
 1276              		.loc 1 457 6 is_stmt 0 view .LVU471
 1277 0608 010056E3 		cmp	r6, #1
 1278 060c E8FEFF1A 		bne	.L18
 458:./src/main.c  **** 		}
 1279              		.loc 1 458 4 is_stmt 1 view .LVU472
 1280              	.LBB384:
 1281              	.LBI384:
1113:./src/main.c  **** //-------------------------------------------------
 1282              		.loc 1 1113 13 view .LVU473
 1283              	.LBB385:
1116:./src/main.c  **** 
 1284              		.loc 1 1116 2 view .LVU474
1118:./src/main.c  **** 	SerXmtBufPtr++;
 1285              		.loc 1 1118 3 view .LVU475
1118:./src/main.c  **** 	SerXmtBufPtr++;
 1286              		.loc 1 1118 27 is_stmt 0 view .LVU476
 1287 0610 4E30A0E3 		mov	r3, #78
1121:./src/main.c  **** //	memcpy (&SerXmtBuf[SerXmtBufPtr],EepromData.DeviceSN,4);
 1288              		.loc 1 1121 2 view .LVU477
 1289 0614 0420A0E3 		mov	r2, #4
 1290 0618 24199FE5 		ldr	r1, .L253+28
 1291 061c 24099FE5 		ldr	r0, .L253+32
 1292              	.LVL113:
1118:./src/main.c  **** 	SerXmtBufPtr++;
 1293              		.loc 1 1118 27 view .LVU478
 1294 0620 2830C5E5 		strb	r3, [r5, #40]
1119:./src/main.c  **** 
 1295              		.loc 1 1119 2 is_stmt 1 view .LVU479
1121:./src/main.c  **** //	memcpy (&SerXmtBuf[SerXmtBufPtr],EepromData.DeviceSN,4);
 1296              		.loc 1 1121 2 view .LVU480
 1297 0624 FEFFFFEB 		bl	memcpy
 1298              	.LVL114:
1123:./src/main.c  **** 
 1299              		.loc 1 1123 2 view .LVU481
1125:./src/main.c  **** 	SerXmtBufPtr++;
 1300              		.loc 1 1125 2 view .LVU482
1126:./src/main.c  **** 	
 1301              		.loc 1 1126 14 is_stmt 0 view .LVU483
 1302 0628 0620A0E3 		mov	r2, #6
1125:./src/main.c  **** 	SerXmtBufPtr++;
 1303              		.loc 1 1125 26 view .LVU484
 1304 062c 0D30A0E3 		mov	r3, #13
1129:./src/main.c  **** }
 1305              		.loc 1 1129 2 view .LVU485
 1306 0630 F4189FE5 		ldr	r1, .L253+4
 1307 0634 0000A0E3 		mov	r0, #0
1125:./src/main.c  **** 	SerXmtBufPtr++;
 1308              		.loc 1 1125 26 view .LVU486
 1309 0638 2D30C5E5 		strb	r3, [r5, #45]
1126:./src/main.c  **** 	
 1310              		.loc 1 1126 2 is_stmt 1 view .LVU487
1126:./src/main.c  **** 	
 1311              		.loc 1 1126 14 is_stmt 0 view .LVU488
 1312 063c 4920C5E5 		strb	r2, [r5, #73]
1129:./src/main.c  **** }
 1313              		.loc 1 1129 2 is_stmt 1 view .LVU489
 1314 0640 FEFFFFEB 		bl	SER_Write
 1315              	.LVL115:
1130:./src/main.c  **** /**************************************************/
 1316              		.loc 1 1130 1 is_stmt 0 view .LVU490
 1317 0644 F3FEFFEA 		b	.L43
 1318              	.LVL116:
 1319              	.L21:
1130:./src/main.c  **** /**************************************************/
 1320              		.loc 1 1130 1 view .LVU491
 1321              	.LBE385:
 1322              	.LBE384:
 308:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 1323              		.loc 1 308 3 is_stmt 1 view .LVU492
 308:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 1324              		.loc 1 308 26 is_stmt 0 view .LVU493
 1325 0648 0830D5E5 		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 1326              	.LVL117:
 1327              	.LBB386:
 1328              	.LBI386:
  87:./src/main.c  **** {
 1329              		.loc 1 87 6 is_stmt 1 view .LVU494
 1330              	.LBB387:
  89:./src/main.c  **** 	{
 1331              		.loc 1 89 2 view .LVU495
  89:./src/main.c  **** 	{
 1332              		.loc 1 89 19 is_stmt 0 view .LVU496
 1333 064c 411043E2 		sub	r1, r3, #65
 1334 0650 FF1001E2 		and	r1, r1, #255
  89:./src/main.c  **** 	{
 1335              		.loc 1 89 4 view .LVU497
 1336 0654 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1337              		.loc 1 91 7 view .LVU498
 1338 0658 37204392 		subls	r2, r3, #55
  92:./src/main.c  **** 	}
 1339              		.loc 1 92 14 view .LVU499
 1340 065c 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 1341              		.loc 1 89 4 view .LVU500
 1342 0660 0500009A 		bls	.L63
  94:./src/main.c  **** 	{
 1343              		.loc 1 94 2 is_stmt 1 view .LVU501
  94:./src/main.c  **** 	{
 1344              		.loc 1 94 19 is_stmt 0 view .LVU502
 1345 0664 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 1346              		.loc 1 94 4 view .LVU503
 1347 0668 FF2002E2 		and	r2, r2, #255
 1348 066c 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 1349              		.loc 1 96 3 is_stmt 1 view .LVU504
 1350              	.LVL118:
  97:./src/main.c  **** 	}
 1351              		.loc 1 97 3 view .LVU505
 1352              	.LBB388:
 1353              	.LBI388:
  87:./src/main.c  **** {
 1354              		.loc 1 87 6 view .LVU506
 1355              	.LBB389:
 100:./src/main.c  **** 	{
 1356              		.loc 1 100 2 view .LVU507
 104:./src/main.c  **** }
 1357              		.loc 1 104 2 view .LVU508
 1358              	.LBE389:
 1359              	.LBE388:
  96:./src/main.c  **** 		return chr &0xF;
 1360              		.loc 1 96 7 is_stmt 0 view .LVU509
 1361 0670 57204392 		subls	r2, r3, #87
  97:./src/main.c  **** 	}
 1362              		.loc 1 97 14 view .LVU510
 1363 0674 0F200292 		andls	r2, r2, #15
 1364              	.LBB391:
 1365              	.LBB390:
 104:./src/main.c  **** }
 1366              		.loc 1 104 13 view .LVU511
 1367 0678 0F200382 		andhi	r2, r3, #15
 1368              	.LVL119:
 1369              	.L63:
 104:./src/main.c  **** }
 1370              		.loc 1 104 13 view .LVU512
 1371              	.LBE390:
 1372              	.LBE391:
 1373              	.LBE387:
 1374              	.LBE386:
 308:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 1375              		.loc 1 308 49 view .LVU513
 1376 067c 8220A0E1 		lsl	r2, r2, #1
 308:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 1377              		.loc 1 308 23 view .LVU514
 1378 0680 052082E2 		add	r2, r2, #5
 308:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 1379              		.loc 1 308 6 view .LVU515
 1380 0684 020056E1 		cmp	r6, r2
 1381 0688 C9FEFF1A 		bne	.L18
 308:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 1382              		.loc 1 308 53 discriminator 1 view .LVU516
 1383 068c 2620D5E5 		ldrb	r2, [r5, #38]	@ zero_extendqisi2
 1384 0690 010052E3 		cmp	r2, #1
 1385 0694 C6FEFF1A 		bne	.L18
 309:./src/main.c  **** 			TransmitStandardFrame();
 1386              		.loc 1 309 19 view .LVU517
 1387 0698 98689FE5 		ldr	r6, .L253+16
 1388              	.LVL120:
 309:./src/main.c  **** 			TransmitStandardFrame();
 1389              		.loc 1 309 3 view .LVU518
 1390 069c 0400D6E5 		ldrb	r0, [r6, #4]	@ zero_extendqisi2
 1391              	.LVL121:
 309:./src/main.c  **** 			TransmitStandardFrame();
 1392              		.loc 1 309 3 view .LVU519
 1393 06a0 000050E3 		cmp	r0, #0
 1394 06a4 C2FEFF1A 		bne	.L18
 310:./src/main.c  **** 		}
 1395              		.loc 1 310 4 is_stmt 1 view .LVU520
 1396              	.LBB392:
 1397              	.LBI392:
 525:./src/main.c  **** //-------------------------------------------------
 1398              		.loc 1 525 13 view .LVU521
 1399              	.LBB393:
 528:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 1400              		.loc 1 528 2 view .LVU522
 529:./src/main.c  **** 
 1401              		.loc 1 529 2 view .LVU523
 531:./src/main.c  **** 
 1402              		.loc 1 531 2 view .LVU524
 1403              	.LVL122:
 534:./src/main.c  **** 	&&  (CanBusMode == BUS_ON)
 1404              		.loc 1 534 3 view .LVU525
 536:./src/main.c  **** 
 1405              		.loc 1 536 2 is_stmt 0 view .LVU526
 1406 06a8 4A20D5E5 		ldrb	r2, [r5, #74]	@ zero_extendqisi2
 1407 06ac 000052E3 		cmp	r2, #0
 1408 06b0 1902001A 		bne	.L66
 539:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 1409              		.loc 1 539 3 is_stmt 1 view .LVU527
 539:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 1410              		.loc 1 539 22 is_stmt 0 view .LVU528
 1411 06b4 542085E5 		str	r2, [r5, #84]
 540:./src/main.c  **** 	
 1412              		.loc 1 540 3 is_stmt 1 view .LVU529
 540:./src/main.c  **** 	
 1413              		.loc 1 540 22 is_stmt 0 view .LVU530
 1414 06b8 582085E5 		str	r2, [r5, #88]
 543:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 1415              		.loc 1 543 3 is_stmt 1 view .LVU531
 543:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 1416              		.loc 1 543 34 is_stmt 0 view .LVU532
 1417 06bc 0520D5E5 		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 1418              	.LVL123:
 1419              	.LBB394:
 1420              	.LBI394:
  87:./src/main.c  **** {
 1421              		.loc 1 87 6 is_stmt 1 view .LVU533
 1422              	.LBB395:
  89:./src/main.c  **** 	{
 1423              		.loc 1 89 2 view .LVU534
  89:./src/main.c  **** 	{
 1424              		.loc 1 89 4 is_stmt 0 view .LVU535
 1425 06c0 410042E2 		sub	r0, r2, #65
 1426 06c4 190050E3 		cmp	r0, #25
  91:./src/main.c  **** 		return chr &0xF;
 1427              		.loc 1 91 7 view .LVU536
 1428 06c8 37204292 		subls	r2, r2, #55
 1429              	.LVL124:
  92:./src/main.c  **** 	}
 1430              		.loc 1 92 14 view .LVU537
 1431 06cc 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 1432              		.loc 1 89 4 view .LVU538
 1433 06d0 0400009A 		bls	.L68
  94:./src/main.c  **** 	{
 1434              		.loc 1 94 2 is_stmt 1 view .LVU539
  94:./src/main.c  **** 	{
 1435              		.loc 1 94 19 is_stmt 0 view .LVU540
 1436 06d4 610042E2 		sub	r0, r2, #97
 1437              	.LVL125:
  94:./src/main.c  **** 	{
 1438              		.loc 1 94 4 view .LVU541
 1439 06d8 FF0000E2 		and	r0, r0, #255
 1440 06dc 190050E3 		cmp	r0, #25
  96:./src/main.c  **** 		return chr &0xF;
 1441              		.loc 1 96 3 is_stmt 1 view .LVU542
 1442              	.LVL126:
  97:./src/main.c  **** 	}
 1443              		.loc 1 97 3 view .LVU543
  96:./src/main.c  **** 		return chr &0xF;
 1444              		.loc 1 96 7 is_stmt 0 view .LVU544
 1445 06e0 57204292 		subls	r2, r2, #87
 1446              	.LVL127:
 1447              	.LBB396:
 1448              	.LBI396:
  87:./src/main.c  **** {
 1449              		.loc 1 87 6 is_stmt 1 view .LVU545
 1450              	.LBB397:
 100:./src/main.c  **** 	{
 1451              		.loc 1 100 2 view .LVU546
 104:./src/main.c  **** }
 1452              		.loc 1 104 2 view .LVU547
 104:./src/main.c  **** }
 1453              		.loc 1 104 13 is_stmt 0 view .LVU548
 1454 06e4 0F2002E2 		and	r2, r2, #15
 1455              	.LVL128:
 1456              	.L68:
 104:./src/main.c  **** }
 1457              		.loc 1 104 13 view .LVU549
 1458              	.LBE397:
 1459              	.LBE396:
 1460              	.LBE395:
 1461              	.LBE394:
 544:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 1462              		.loc 1 544 34 view .LVU550
 1463 06e8 0600D5E5 		ldrb	r0, [r5, #6]	@ zero_extendqisi2
 1464              	.LBB398:
 1465              	.LBB399:
  89:./src/main.c  **** 	{
 1466              		.loc 1 89 4 view .LVU551
 1467 06ec 41C040E2 		sub	ip, r0, #65
 1468 06f0 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1469              		.loc 1 91 7 view .LVU552
 1470 06f4 37004092 		subls	r0, r0, #55
 1471              	.LBE399:
 1472              	.LBE398:
 543:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 1473              		.loc 1 543 57 view .LVU553
 1474 06f8 0224A0E1 		lsl	r2, r2, #8
 544:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 1475              		.loc 1 544 3 is_stmt 1 view .LVU554
 1476              	.LBB403:
 1477              	.LBI398:
  87:./src/main.c  **** {
 1478              		.loc 1 87 6 view .LVU555
 1479              	.LBB402:
  89:./src/main.c  **** 	{
 1480              		.loc 1 89 2 view .LVU556
  92:./src/main.c  **** 	}
 1481              		.loc 1 92 14 is_stmt 0 view .LVU557
 1482 06fc 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1483              		.loc 1 89 4 view .LVU558
 1484 0700 0400009A 		bls	.L72
  94:./src/main.c  **** 	{
 1485              		.loc 1 94 2 is_stmt 1 view .LVU559
  94:./src/main.c  **** 	{
 1486              		.loc 1 94 19 is_stmt 0 view .LVU560
 1487 0704 61C040E2 		sub	ip, r0, #97
  94:./src/main.c  **** 	{
 1488              		.loc 1 94 4 view .LVU561
 1489 0708 FFC00CE2 		and	ip, ip, #255
 1490 070c 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1491              		.loc 1 96 3 is_stmt 1 view .LVU562
 1492              	.LVL129:
  97:./src/main.c  **** 	}
 1493              		.loc 1 97 3 view .LVU563
  96:./src/main.c  **** 		return chr &0xF;
 1494              		.loc 1 96 7 is_stmt 0 view .LVU564
 1495 0710 57004092 		subls	r0, r0, #87
 1496              	.LVL130:
 1497              	.LBB400:
 1498              	.LBI400:
  87:./src/main.c  **** {
 1499              		.loc 1 87 6 is_stmt 1 view .LVU565
 1500              	.LBB401:
 100:./src/main.c  **** 	{
 1501              		.loc 1 100 2 view .LVU566
 104:./src/main.c  **** }
 1502              		.loc 1 104 2 view .LVU567
 104:./src/main.c  **** }
 1503              		.loc 1 104 13 is_stmt 0 view .LVU568
 1504 0714 0F0000E2 		and	r0, r0, #15
 1505              	.LVL131:
 1506              	.L72:
 104:./src/main.c  **** }
 1507              		.loc 1 104 13 view .LVU569
 1508              	.LBE401:
 1509              	.LBE400:
 1510              	.LBE402:
 1511              	.LBE403:
 544:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 1512              		.loc 1 544 30 view .LVU570
 1513 0718 002282E1 		orr	r2, r2, r0, lsl #4
 545:./src/main.c  **** 		
 1514              		.loc 1 545 3 is_stmt 1 view .LVU571
 545:./src/main.c  **** 		
 1515              		.loc 1 545 34 is_stmt 0 view .LVU572
 1516 071c 0700D5E5 		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 1517              	.LVL132:
 1518              	.LBB404:
 1519              	.LBI404:
  87:./src/main.c  **** {
 1520              		.loc 1 87 6 is_stmt 1 view .LVU573
 1521              	.LBB405:
  89:./src/main.c  **** 	{
 1522              		.loc 1 89 2 view .LVU574
  89:./src/main.c  **** 	{
 1523              		.loc 1 89 4 is_stmt 0 view .LVU575
 1524 0720 41C040E2 		sub	ip, r0, #65
 1525 0724 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1526              		.loc 1 91 7 view .LVU576
 1527 0728 37004092 		subls	r0, r0, #55
 1528              	.LVL133:
  92:./src/main.c  **** 	}
 1529              		.loc 1 92 14 view .LVU577
 1530 072c 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1531              		.loc 1 89 4 view .LVU578
 1532 0730 0400009A 		bls	.L76
  94:./src/main.c  **** 	{
 1533              		.loc 1 94 2 is_stmt 1 view .LVU579
  94:./src/main.c  **** 	{
 1534              		.loc 1 94 19 is_stmt 0 view .LVU580
 1535 0734 61C040E2 		sub	ip, r0, #97
 1536              	.LVL134:
  94:./src/main.c  **** 	{
 1537              		.loc 1 94 4 view .LVU581
 1538 0738 FFC00CE2 		and	ip, ip, #255
 1539 073c 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1540              		.loc 1 96 3 is_stmt 1 view .LVU582
 1541              	.LVL135:
  97:./src/main.c  **** 	}
 1542              		.loc 1 97 3 view .LVU583
  96:./src/main.c  **** 		return chr &0xF;
 1543              		.loc 1 96 7 is_stmt 0 view .LVU584
 1544 0740 57004092 		subls	r0, r0, #87
 1545              	.LVL136:
 1546              	.LBB406:
 1547              	.LBI406:
  87:./src/main.c  **** {
 1548              		.loc 1 87 6 is_stmt 1 view .LVU585
 1549              	.LBB407:
 100:./src/main.c  **** 	{
 1550              		.loc 1 100 2 view .LVU586
 104:./src/main.c  **** }
 1551              		.loc 1 104 2 view .LVU587
 104:./src/main.c  **** }
 1552              		.loc 1 104 13 is_stmt 0 view .LVU588
 1553 0744 0F0000E2 		and	r0, r0, #15
 1554              	.LVL137:
 1555              	.L76:
 104:./src/main.c  **** }
 1556              		.loc 1 104 13 view .LVU589
 1557              	.LBE407:
 1558              	.LBE406:
 1559              	.LBE405:
 1560              	.LBE404:
 545:./src/main.c  **** 		
 1561              		.loc 1 545 30 view .LVU590
 1562 0748 020080E1 		orr	r0, r0, r2
 548:./src/main.c  **** 	
 1563              		.loc 1 548 17 view .LVU591
 1564 074c 0020A0E3 		mov	r2, #0
 1565              	.LBB408:
 1566              	.LBB409:
  89:./src/main.c  **** 	{
 1567              		.loc 1 89 4 view .LVU592
 1568 0750 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1569              		.loc 1 91 7 view .LVU593
 1570 0754 37304392 		subls	r3, r3, #55
 1571              	.LBE409:
 1572              	.LBE408:
 545:./src/main.c  **** 		
 1573              		.loc 1 545 15 view .LVU594
 1574 0758 500085E5 		str	r0, [r5, #80]
 548:./src/main.c  **** 	
 1575              		.loc 1 548 3 is_stmt 1 view .LVU595
 548:./src/main.c  **** 	
 1576              		.loc 1 548 17 is_stmt 0 view .LVU596
 1577 075c 4E20C5E5 		strb	r2, [r5, #78]
 551:./src/main.c  **** 		
 1578              		.loc 1 551 3 is_stmt 1 view .LVU597
 1579              	.LBB413:
 1580              	.LBI408:
  87:./src/main.c  **** {
 1581              		.loc 1 87 6 view .LVU598
 1582              	.LBB412:
  89:./src/main.c  **** 	{
 1583              		.loc 1 89 2 view .LVU599
  92:./src/main.c  **** 	}
 1584              		.loc 1 92 14 is_stmt 0 view .LVU600
 1585 0760 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 1586              		.loc 1 89 4 view .LVU601
 1587 0764 0400009A 		bls	.L80
  94:./src/main.c  **** 	{
 1588              		.loc 1 94 2 is_stmt 1 view .LVU602
  94:./src/main.c  **** 	{
 1589              		.loc 1 94 19 is_stmt 0 view .LVU603
 1590 0768 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 1591              		.loc 1 94 4 view .LVU604
 1592 076c FF2002E2 		and	r2, r2, #255
 1593 0770 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 1594              		.loc 1 96 3 is_stmt 1 view .LVU605
 1595              	.LVL138:
  97:./src/main.c  **** 	}
 1596              		.loc 1 97 3 view .LVU606
  96:./src/main.c  **** 		return chr &0xF;
 1597              		.loc 1 96 7 is_stmt 0 view .LVU607
 1598 0774 57304392 		subls	r3, r3, #87
 1599              	.LVL139:
 1600              	.LBB410:
 1601              	.LBI410:
  87:./src/main.c  **** {
 1602              		.loc 1 87 6 is_stmt 1 view .LVU608
 1603              	.LBB411:
 100:./src/main.c  **** 	{
 1604              		.loc 1 100 2 view .LVU609
 104:./src/main.c  **** }
 1605              		.loc 1 104 2 view .LVU610
 104:./src/main.c  **** }
 1606              		.loc 1 104 13 is_stmt 0 view .LVU611
 1607 0778 0F3003E2 		and	r3, r3, #15
 1608              	.LVL140:
 1609              	.L80:
 104:./src/main.c  **** }
 1610              		.loc 1 104 13 view .LVU612
 1611 077c B8C79FE5 		ldr	ip, .L253+20
 1612              	.LBE411:
 1613              	.LBE410:
 1614              	.LBE412:
 1615              	.LBE413:
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1616              		.loc 1 554 3 view .LVU613
 1617 0780 00E0A0E3 		mov	lr, #0
 551:./src/main.c  **** 		
 1618              		.loc 1 551 16 view .LVU614
 1619 0784 4F30C5E5 		strb	r3, [r5, #79]
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1620              		.loc 1 554 3 is_stmt 1 view .LVU615
 1621              	.LVL141:
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1622              		.loc 1 554 3 is_stmt 0 view .LVU616
 1623 0788 50004CE2 		sub	r0, ip, #80
 1624 078c 1B0000EA 		b	.L83
 1625              	.LVL142:
 1626              	.L92:
 555:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[i*2+6]))& 0x00F));
 1627              		.loc 1 555 4 is_stmt 1 view .LVU617
 555:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[i*2+6]))& 0x00F));
 1628              		.loc 1 555 25 is_stmt 0 view .LVU618
 1629 0790 0520D0E5 		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 1630              	.LVL143:
 1631              	.LBB414:
 1632              	.LBI414:
  87:./src/main.c  **** {
 1633              		.loc 1 87 6 is_stmt 1 view .LVU619
 1634              	.LBB415:
  89:./src/main.c  **** 	{
 1635              		.loc 1 89 2 view .LVU620
  89:./src/main.c  **** 	{
 1636              		.loc 1 89 4 is_stmt 0 view .LVU621
 1637 0794 411042E2 		sub	r1, r2, #65
 1638 0798 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1639              		.loc 1 91 7 view .LVU622
 1640 079c 37204292 		subls	r2, r2, #55
 1641              	.LVL144:
  92:./src/main.c  **** 	}
 1642              		.loc 1 92 14 view .LVU623
 1643 07a0 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 1644              		.loc 1 89 4 view .LVU624
 1645 07a4 0400009A 		bls	.L85
  94:./src/main.c  **** 	{
 1646              		.loc 1 94 2 is_stmt 1 view .LVU625
  94:./src/main.c  **** 	{
 1647              		.loc 1 94 19 is_stmt 0 view .LVU626
 1648 07a8 611042E2 		sub	r1, r2, #97
 1649              	.LVL145:
  94:./src/main.c  **** 	{
 1650              		.loc 1 94 4 view .LVU627
 1651 07ac FF1001E2 		and	r1, r1, #255
 1652 07b0 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 1653              		.loc 1 96 3 is_stmt 1 view .LVU628
 1654              	.LVL146:
  97:./src/main.c  **** 	}
 1655              		.loc 1 97 3 view .LVU629
  96:./src/main.c  **** 		return chr &0xF;
 1656              		.loc 1 96 7 is_stmt 0 view .LVU630
 1657 07b4 57204292 		subls	r2, r2, #87
 1658              	.LVL147:
 1659              	.LBB416:
 1660              	.LBI416:
  87:./src/main.c  **** {
 1661              		.loc 1 87 6 is_stmt 1 view .LVU631
 1662              	.LBB417:
 100:./src/main.c  **** 	{
 1663              		.loc 1 100 2 view .LVU632
 104:./src/main.c  **** }
 1664              		.loc 1 104 2 view .LVU633
 104:./src/main.c  **** }
 1665              		.loc 1 104 13 is_stmt 0 view .LVU634
 1666 07b8 0F2002E2 		and	r2, r2, #15
 1667              	.LVL148:
 1668              	.L85:
 104:./src/main.c  **** }
 1669              		.loc 1 104 13 view .LVU635
 1670              	.LBE417:
 1671              	.LBE416:
 1672              	.LBE415:
 1673              	.LBE414:
 556:./src/main.c  **** 		}
 1674              		.loc 1 556 4 is_stmt 1 view .LVU636
 556:./src/main.c  **** 		}
 1675              		.loc 1 556 47 is_stmt 0 view .LVU637
 1676 07bc 0610D0E5 		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 1677              	.LVL149:
 1678              	.LBB418:
 1679              	.LBI418:
  87:./src/main.c  **** {
 1680              		.loc 1 87 6 is_stmt 1 view .LVU638
 1681              	.LBB419:
  89:./src/main.c  **** 	{
 1682              		.loc 1 89 2 view .LVU639
  89:./src/main.c  **** 	{
 1683              		.loc 1 89 4 is_stmt 0 view .LVU640
 1684 07c0 417041E2 		sub	r7, r1, #65
 1685 07c4 190057E3 		cmp	r7, #25
 1686              	.LBE419:
 1687              	.LBE418:
 556:./src/main.c  **** 		}
 1688              		.loc 1 556 39 view .LVU641
 1689 07c8 022EA0E1 		lsl	r2, r2, #28
 1690              	.LBB424:
 1691              	.LBB422:
  91:./src/main.c  **** 		return chr &0xF;
 1692              		.loc 1 91 7 view .LVU642
 1693 07cc 37104192 		subls	r1, r1, #55
 1694              	.LVL150:
  91:./src/main.c  **** 		return chr &0xF;
 1695              		.loc 1 91 7 view .LVU643
 1696              	.LBE422:
 1697              	.LBE424:
 556:./src/main.c  **** 		}
 1698              		.loc 1 556 39 view .LVU644
 1699 07d0 422CA0E1 		asr	r2, r2, #24
 1700              	.LBB425:
 1701              	.LBB423:
  92:./src/main.c  **** 	}
 1702              		.loc 1 92 14 view .LVU645
 1703 07d4 0F100192 		andls	r1, r1, #15
  89:./src/main.c  **** 	{
 1704              		.loc 1 89 4 view .LVU646
 1705 07d8 0400009A 		bls	.L89
  94:./src/main.c  **** 	{
 1706              		.loc 1 94 2 is_stmt 1 view .LVU647
  94:./src/main.c  **** 	{
 1707              		.loc 1 94 19 is_stmt 0 view .LVU648
 1708 07dc 617041E2 		sub	r7, r1, #97
 1709              	.LVL151:
  94:./src/main.c  **** 	{
 1710              		.loc 1 94 4 view .LVU649
 1711 07e0 FF7007E2 		and	r7, r7, #255
 1712 07e4 190057E3 		cmp	r7, #25
  96:./src/main.c  **** 		return chr &0xF;
 1713              		.loc 1 96 3 is_stmt 1 view .LVU650
 1714              	.LVL152:
  97:./src/main.c  **** 	}
 1715              		.loc 1 97 3 view .LVU651
  96:./src/main.c  **** 		return chr &0xF;
 1716              		.loc 1 96 7 is_stmt 0 view .LVU652
 1717 07e8 57104192 		subls	r1, r1, #87
 1718              	.LVL153:
 1719              	.LBB420:
 1720              	.LBI420:
  87:./src/main.c  **** {
 1721              		.loc 1 87 6 is_stmt 1 view .LVU653
 1722              	.LBB421:
 100:./src/main.c  **** 	{
 1723              		.loc 1 100 2 view .LVU654
 104:./src/main.c  **** }
 1724              		.loc 1 104 2 view .LVU655
 104:./src/main.c  **** }
 1725              		.loc 1 104 13 is_stmt 0 view .LVU656
 1726 07ec 0F1001E2 		and	r1, r1, #15
 1727              	.LVL154:
 1728              	.L89:
 104:./src/main.c  **** }
 1729              		.loc 1 104 13 view .LVU657
 1730              	.LBE421:
 1731              	.LBE420:
 1732              	.LBE423:
 1733              	.LBE425:
 556:./src/main.c  **** 		}
 1734              		.loc 1 556 43 view .LVU658
 1735 07f0 011082E1 		orr	r1, r2, r1
 556:./src/main.c  **** 		}
 1736              		.loc 1 556 22 view .LVU659
 1737 07f4 0110CCE4 		strb	r1, [ip], #1
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1738              		.loc 1 554 29 is_stmt 1 view .LVU660
 1739              	.LVL155:
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1740              		.loc 1 554 29 is_stmt 0 view .LVU661
 1741 07f8 01E08EE2 		add	lr, lr, #1
 1742              	.LVL156:
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1743              		.loc 1 554 29 view .LVU662
 1744 07fc 020080E2 		add	r0, r0, #2
 1745              	.L83:
 1746              	.LVL157:
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1747              		.loc 1 554 12 is_stmt 1 view .LVU663
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1748              		.loc 1 554 3 is_stmt 0 view .LVU664
 1749 0800 FF200EE2 		and	r2, lr, #255
 1750 0804 020053E1 		cmp	r3, r2
 1751 0808 E0FFFF8A 		bhi	.L92
 1752 080c 53FFFFEA 		b	.L245
 1753              	.LVL158:
 1754              	.L32:
 554:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 1755              		.loc 1 554 3 view .LVU665
 1756              	.LBE393:
 1757              	.LBE392:
 340:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 1758              		.loc 1 340 3 is_stmt 1 view .LVU666
 340:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 1759              		.loc 1 340 6 is_stmt 0 view .LVU667
 1760 0810 0A0056E3 		cmp	r6, #10
 1761 0814 66FEFF1A 		bne	.L18
 341:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 1762              		.loc 1 341 3 view .LVU668
 1763 0818 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 1764 081c 010053E3 		cmp	r3, #1
 1765 0820 63FEFF1A 		bne	.L18
 342:./src/main.c  **** 			TransmitExtendedRtr();
 1766              		.loc 1 342 19 view .LVU669
 1767 0824 0C679FE5 		ldr	r6, .L253+16
 1768              	.LVL159:
 342:./src/main.c  **** 			TransmitExtendedRtr();
 1769              		.loc 1 342 3 view .LVU670
 1770 0828 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 1771 082c 000052E3 		cmp	r2, #0
 1772 0830 5FFEFF1A 		bne	.L18
 343:./src/main.c  **** 		}
 1773              		.loc 1 343 4 is_stmt 1 view .LVU671
 1774              	.LBB427:
 1775              	.LBI427:
 839:./src/main.c  **** //-------------------------------------------------
 1776              		.loc 1 839 13 view .LVU672
 1777              	.LBB428:
 842:./src/main.c  **** 
 1778              		.loc 1 842 2 view .LVU673
 844:./src/main.c  **** 
 1779              		.loc 1 844 2 view .LVU674
 1780              	.LVL160:
 847:./src/main.c  **** 
 1781              		.loc 1 847 2 view .LVU675
 850:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 1782              		.loc 1 850 3 view .LVU676
 854:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 1783              		.loc 1 854 34 is_stmt 0 view .LVU677
 1784 0834 0530D5E5 		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 1785              	.LBB429:
 1786              	.LBB430:
  89:./src/main.c  **** 	{
 1787              		.loc 1 89 4 view .LVU678
 1788 0838 411043E2 		sub	r1, r3, #65
 1789 083c 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1790              		.loc 1 91 7 view .LVU679
 1791 0840 37304392 		subls	r3, r3, #55
 1792              	.LBE430:
 1793              	.LBE429:
 850:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 1794              		.loc 1 850 22 view .LVU680
 1795 0844 542085E5 		str	r2, [r5, #84]
 851:./src/main.c  **** 	
 1796              		.loc 1 851 3 is_stmt 1 view .LVU681
 851:./src/main.c  **** 	
 1797              		.loc 1 851 22 is_stmt 0 view .LVU682
 1798 0848 582085E5 		str	r2, [r5, #88]
 854:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 1799              		.loc 1 854 3 is_stmt 1 view .LVU683
 1800              	.LBB434:
 1801              	.LBI429:
  87:./src/main.c  **** {
 1802              		.loc 1 87 6 view .LVU684
 1803              	.LBB433:
  89:./src/main.c  **** 	{
 1804              		.loc 1 89 2 view .LVU685
  92:./src/main.c  **** 	}
 1805              		.loc 1 92 14 is_stmt 0 view .LVU686
 1806 084c 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 1807              		.loc 1 89 4 view .LVU687
 1808 0850 0400009A 		bls	.L164
  94:./src/main.c  **** 	{
 1809              		.loc 1 94 2 is_stmt 1 view .LVU688
  94:./src/main.c  **** 	{
 1810              		.loc 1 94 19 is_stmt 0 view .LVU689
 1811 0854 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 1812              		.loc 1 94 4 view .LVU690
 1813 0858 FF2002E2 		and	r2, r2, #255
 1814 085c 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 1815              		.loc 1 96 3 is_stmt 1 view .LVU691
 1816              	.LVL161:
  97:./src/main.c  **** 	}
 1817              		.loc 1 97 3 view .LVU692
  96:./src/main.c  **** 		return chr &0xF;
 1818              		.loc 1 96 7 is_stmt 0 view .LVU693
 1819 0860 57304392 		subls	r3, r3, #87
 1820              	.LVL162:
 1821              	.LBB431:
 1822              	.LBI431:
  87:./src/main.c  **** {
 1823              		.loc 1 87 6 is_stmt 1 view .LVU694
 1824              	.LBB432:
 100:./src/main.c  **** 	{
 1825              		.loc 1 100 2 view .LVU695
 104:./src/main.c  **** }
 1826              		.loc 1 104 2 view .LVU696
 104:./src/main.c  **** }
 1827              		.loc 1 104 13 is_stmt 0 view .LVU697
 1828 0864 0F3003E2 		and	r3, r3, #15
 1829              	.LVL163:
 1830              	.L164:
 104:./src/main.c  **** }
 1831              		.loc 1 104 13 view .LVU698
 1832              	.LBE432:
 1833              	.LBE431:
 1834              	.LBE433:
 1835              	.LBE434:
 855:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 1836              		.loc 1 855 34 view .LVU699
 1837 0868 0620D5E5 		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 1838              	.LBB435:
 1839              	.LBB436:
  89:./src/main.c  **** 	{
 1840              		.loc 1 89 4 view .LVU700
 1841 086c 411042E2 		sub	r1, r2, #65
 1842 0870 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1843              		.loc 1 91 7 view .LVU701
 1844 0874 37204292 		subls	r2, r2, #55
 1845              	.LBE436:
 1846              	.LBE435:
 854:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 1847              		.loc 1 854 57 view .LVU702
 1848 0878 033EA0E1 		lsl	r3, r3, #28
 855:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 1849              		.loc 1 855 3 is_stmt 1 view .LVU703
 1850              	.LBB440:
 1851              	.LBI435:
  87:./src/main.c  **** {
 1852              		.loc 1 87 6 view .LVU704
 1853              	.LBB439:
  89:./src/main.c  **** 	{
 1854              		.loc 1 89 2 view .LVU705
  92:./src/main.c  **** 	}
 1855              		.loc 1 92 14 is_stmt 0 view .LVU706
 1856 087c 0F100292 		andls	r1, r2, #15
  89:./src/main.c  **** 	{
 1857              		.loc 1 89 4 view .LVU707
 1858 0880 0400009A 		bls	.L168
  94:./src/main.c  **** 	{
 1859              		.loc 1 94 2 is_stmt 1 view .LVU708
  94:./src/main.c  **** 	{
 1860              		.loc 1 94 19 is_stmt 0 view .LVU709
 1861 0884 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 1862              		.loc 1 94 4 view .LVU710
 1863 0888 FF1001E2 		and	r1, r1, #255
 1864 088c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 1865              		.loc 1 96 3 is_stmt 1 view .LVU711
 1866              	.LVL164:
  97:./src/main.c  **** 	}
 1867              		.loc 1 97 3 view .LVU712
  96:./src/main.c  **** 		return chr &0xF;
 1868              		.loc 1 96 7 is_stmt 0 view .LVU713
 1869 0890 57204292 		subls	r2, r2, #87
 1870              	.LVL165:
 1871              	.LBB437:
 1872              	.LBI437:
  87:./src/main.c  **** {
 1873              		.loc 1 87 6 is_stmt 1 view .LVU714
 1874              	.LBB438:
 100:./src/main.c  **** 	{
 1875              		.loc 1 100 2 view .LVU715
 104:./src/main.c  **** }
 1876              		.loc 1 104 2 view .LVU716
 104:./src/main.c  **** }
 1877              		.loc 1 104 13 is_stmt 0 view .LVU717
 1878 0894 0F1002E2 		and	r1, r2, #15
 1879              	.LVL166:
 1880              	.L168:
 104:./src/main.c  **** }
 1881              		.loc 1 104 13 view .LVU718
 1882              	.LBE438:
 1883              	.LBE437:
 1884              	.LBE439:
 1885              	.LBE440:
 856:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 1886              		.loc 1 856 34 view .LVU719
 1887 0898 0720D5E5 		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 855:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 1888              		.loc 1 855 30 view .LVU720
 1889 089c 013C83E1 		orr	r3, r3, r1, lsl #24
 856:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 1890              		.loc 1 856 3 is_stmt 1 view .LVU721
 1891              	.LVL167:
 1892              	.LBB441:
 1893              	.LBI441:
  87:./src/main.c  **** {
 1894              		.loc 1 87 6 view .LVU722
 1895              	.LBB442:
  89:./src/main.c  **** 	{
 1896              		.loc 1 89 2 view .LVU723
  89:./src/main.c  **** 	{
 1897              		.loc 1 89 4 is_stmt 0 view .LVU724
 1898 08a0 411042E2 		sub	r1, r2, #65
 1899 08a4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1900              		.loc 1 91 7 view .LVU725
 1901 08a8 37204292 		subls	r2, r2, #55
 1902              	.LVL168:
  92:./src/main.c  **** 	}
 1903              		.loc 1 92 14 view .LVU726
 1904 08ac 0F100292 		andls	r1, r2, #15
 1905              	.LVL169:
  89:./src/main.c  **** 	{
 1906              		.loc 1 89 4 view .LVU727
 1907 08b0 0400009A 		bls	.L172
  94:./src/main.c  **** 	{
 1908              		.loc 1 94 2 is_stmt 1 view .LVU728
  94:./src/main.c  **** 	{
 1909              		.loc 1 94 19 is_stmt 0 view .LVU729
 1910 08b4 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 1911              		.loc 1 94 4 view .LVU730
 1912 08b8 FF1001E2 		and	r1, r1, #255
 1913 08bc 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 1914              		.loc 1 96 3 is_stmt 1 view .LVU731
 1915              	.LVL170:
  97:./src/main.c  **** 	}
 1916              		.loc 1 97 3 view .LVU732
  96:./src/main.c  **** 		return chr &0xF;
 1917              		.loc 1 96 7 is_stmt 0 view .LVU733
 1918 08c0 57204292 		subls	r2, r2, #87
 1919              	.LVL171:
 1920              	.LBB443:
 1921              	.LBI443:
  87:./src/main.c  **** {
 1922              		.loc 1 87 6 is_stmt 1 view .LVU734
 1923              	.LBB444:
 100:./src/main.c  **** 	{
 1924              		.loc 1 100 2 view .LVU735
 104:./src/main.c  **** }
 1925              		.loc 1 104 2 view .LVU736
 104:./src/main.c  **** }
 1926              		.loc 1 104 13 is_stmt 0 view .LVU737
 1927 08c4 0F1002E2 		and	r1, r2, #15
 1928              	.LVL172:
 1929              	.L172:
 104:./src/main.c  **** }
 1930              		.loc 1 104 13 view .LVU738
 1931              	.LBE444:
 1932              	.LBE443:
 1933              	.LBE442:
 1934              	.LBE441:
 857:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 1935              		.loc 1 857 34 view .LVU739
 1936 08c8 0820D5E5 		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 856:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 1937              		.loc 1 856 30 view .LVU740
 1938 08cc 013A83E1 		orr	r3, r3, r1, lsl #20
 857:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 1939              		.loc 1 857 3 is_stmt 1 view .LVU741
 1940              	.LVL173:
 1941              	.LBB445:
 1942              	.LBI445:
  87:./src/main.c  **** {
 1943              		.loc 1 87 6 view .LVU742
 1944              	.LBB446:
  89:./src/main.c  **** 	{
 1945              		.loc 1 89 2 view .LVU743
  89:./src/main.c  **** 	{
 1946              		.loc 1 89 4 is_stmt 0 view .LVU744
 1947 08d0 411042E2 		sub	r1, r2, #65
 1948 08d4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1949              		.loc 1 91 7 view .LVU745
 1950 08d8 37204292 		subls	r2, r2, #55
 1951              	.LVL174:
  92:./src/main.c  **** 	}
 1952              		.loc 1 92 14 view .LVU746
 1953 08dc 0F100292 		andls	r1, r2, #15
 1954              	.LVL175:
  89:./src/main.c  **** 	{
 1955              		.loc 1 89 4 view .LVU747
 1956 08e0 0400009A 		bls	.L176
  94:./src/main.c  **** 	{
 1957              		.loc 1 94 2 is_stmt 1 view .LVU748
  94:./src/main.c  **** 	{
 1958              		.loc 1 94 19 is_stmt 0 view .LVU749
 1959 08e4 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 1960              		.loc 1 94 4 view .LVU750
 1961 08e8 FF1001E2 		and	r1, r1, #255
 1962 08ec 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 1963              		.loc 1 96 3 is_stmt 1 view .LVU751
 1964              	.LVL176:
  97:./src/main.c  **** 	}
 1965              		.loc 1 97 3 view .LVU752
  96:./src/main.c  **** 		return chr &0xF;
 1966              		.loc 1 96 7 is_stmt 0 view .LVU753
 1967 08f0 57204292 		subls	r2, r2, #87
 1968              	.LVL177:
 1969              	.LBB447:
 1970              	.LBI447:
  87:./src/main.c  **** {
 1971              		.loc 1 87 6 is_stmt 1 view .LVU754
 1972              	.LBB448:
 100:./src/main.c  **** 	{
 1973              		.loc 1 100 2 view .LVU755
 104:./src/main.c  **** }
 1974              		.loc 1 104 2 view .LVU756
 104:./src/main.c  **** }
 1975              		.loc 1 104 13 is_stmt 0 view .LVU757
 1976 08f4 0F1002E2 		and	r1, r2, #15
 1977              	.LVL178:
 1978              	.L176:
 104:./src/main.c  **** }
 1979              		.loc 1 104 13 view .LVU758
 1980              	.LBE448:
 1981              	.LBE447:
 1982              	.LBE446:
 1983              	.LBE445:
 858:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 1984              		.loc 1 858 34 view .LVU759
 1985 08f8 0920D5E5 		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 857:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 1986              		.loc 1 857 30 view .LVU760
 1987 08fc 013883E1 		orr	r3, r3, r1, lsl #16
 858:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 1988              		.loc 1 858 3 is_stmt 1 view .LVU761
 1989              	.LVL179:
 1990              	.LBB449:
 1991              	.LBI449:
  87:./src/main.c  **** {
 1992              		.loc 1 87 6 view .LVU762
 1993              	.LBB450:
  89:./src/main.c  **** 	{
 1994              		.loc 1 89 2 view .LVU763
  89:./src/main.c  **** 	{
 1995              		.loc 1 89 4 is_stmt 0 view .LVU764
 1996 0900 411042E2 		sub	r1, r2, #65
 1997 0904 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1998              		.loc 1 91 7 view .LVU765
 1999 0908 37204292 		subls	r2, r2, #55
 2000              	.LVL180:
  92:./src/main.c  **** 	}
 2001              		.loc 1 92 14 view .LVU766
 2002 090c 0F100292 		andls	r1, r2, #15
 2003              	.LVL181:
  89:./src/main.c  **** 	{
 2004              		.loc 1 89 4 view .LVU767
 2005 0910 0400009A 		bls	.L180
  94:./src/main.c  **** 	{
 2006              		.loc 1 94 2 is_stmt 1 view .LVU768
  94:./src/main.c  **** 	{
 2007              		.loc 1 94 19 is_stmt 0 view .LVU769
 2008 0914 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2009              		.loc 1 94 4 view .LVU770
 2010 0918 FF1001E2 		and	r1, r1, #255
 2011 091c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2012              		.loc 1 96 3 is_stmt 1 view .LVU771
 2013              	.LVL182:
  97:./src/main.c  **** 	}
 2014              		.loc 1 97 3 view .LVU772
  96:./src/main.c  **** 		return chr &0xF;
 2015              		.loc 1 96 7 is_stmt 0 view .LVU773
 2016 0920 57204292 		subls	r2, r2, #87
 2017              	.LVL183:
 2018              	.LBB451:
 2019              	.LBI451:
  87:./src/main.c  **** {
 2020              		.loc 1 87 6 is_stmt 1 view .LVU774
 2021              	.LBB452:
 100:./src/main.c  **** 	{
 2022              		.loc 1 100 2 view .LVU775
 104:./src/main.c  **** }
 2023              		.loc 1 104 2 view .LVU776
 104:./src/main.c  **** }
 2024              		.loc 1 104 13 is_stmt 0 view .LVU777
 2025 0924 0F1002E2 		and	r1, r2, #15
 2026              	.LVL184:
 2027              	.L180:
 104:./src/main.c  **** }
 2028              		.loc 1 104 13 view .LVU778
 2029              	.LBE452:
 2030              	.LBE451:
 2031              	.LBE450:
 2032              	.LBE449:
 859:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 2033              		.loc 1 859 34 view .LVU779
 2034 0928 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 858:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 2035              		.loc 1 858 30 view .LVU780
 2036 092c 013683E1 		orr	r3, r3, r1, lsl #12
 859:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 2037              		.loc 1 859 3 is_stmt 1 view .LVU781
 2038              	.LVL185:
 2039              	.LBB453:
 2040              	.LBI453:
  87:./src/main.c  **** {
 2041              		.loc 1 87 6 view .LVU782
 2042              	.LBB454:
  89:./src/main.c  **** 	{
 2043              		.loc 1 89 2 view .LVU783
  89:./src/main.c  **** 	{
 2044              		.loc 1 89 4 is_stmt 0 view .LVU784
 2045 0930 411042E2 		sub	r1, r2, #65
 2046 0934 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2047              		.loc 1 91 7 view .LVU785
 2048 0938 37204292 		subls	r2, r2, #55
 2049              	.LVL186:
  92:./src/main.c  **** 	}
 2050              		.loc 1 92 14 view .LVU786
 2051 093c 0F100292 		andls	r1, r2, #15
 2052              	.LVL187:
  89:./src/main.c  **** 	{
 2053              		.loc 1 89 4 view .LVU787
 2054 0940 0400009A 		bls	.L184
  94:./src/main.c  **** 	{
 2055              		.loc 1 94 2 is_stmt 1 view .LVU788
  94:./src/main.c  **** 	{
 2056              		.loc 1 94 19 is_stmt 0 view .LVU789
 2057 0944 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2058              		.loc 1 94 4 view .LVU790
 2059 0948 FF1001E2 		and	r1, r1, #255
 2060 094c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2061              		.loc 1 96 3 is_stmt 1 view .LVU791
 2062              	.LVL188:
  97:./src/main.c  **** 	}
 2063              		.loc 1 97 3 view .LVU792
  96:./src/main.c  **** 		return chr &0xF;
 2064              		.loc 1 96 7 is_stmt 0 view .LVU793
 2065 0950 57204292 		subls	r2, r2, #87
 2066              	.LVL189:
 2067              	.LBB455:
 2068              	.LBI455:
  87:./src/main.c  **** {
 2069              		.loc 1 87 6 is_stmt 1 view .LVU794
 2070              	.LBB456:
 100:./src/main.c  **** 	{
 2071              		.loc 1 100 2 view .LVU795
 104:./src/main.c  **** }
 2072              		.loc 1 104 2 view .LVU796
 104:./src/main.c  **** }
 2073              		.loc 1 104 13 is_stmt 0 view .LVU797
 2074 0954 0F1002E2 		and	r1, r2, #15
 2075              	.LVL190:
 2076              	.L184:
 104:./src/main.c  **** }
 2077              		.loc 1 104 13 view .LVU798
 2078              	.LBE456:
 2079              	.LBE455:
 2080              	.LBE454:
 2081              	.LBE453:
 860:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 2082              		.loc 1 860 34 view .LVU799
 2083 0958 0B20D5E5 		ldrb	r2, [r5, #11]	@ zero_extendqisi2
 859:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 2084              		.loc 1 859 30 view .LVU800
 2085 095c 013483E1 		orr	r3, r3, r1, lsl #8
 860:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 2086              		.loc 1 860 3 is_stmt 1 view .LVU801
 2087              	.LVL191:
 2088              	.LBB457:
 2089              	.LBI457:
  87:./src/main.c  **** {
 2090              		.loc 1 87 6 view .LVU802
 2091              	.LBB458:
  89:./src/main.c  **** 	{
 2092              		.loc 1 89 2 view .LVU803
  89:./src/main.c  **** 	{
 2093              		.loc 1 89 4 is_stmt 0 view .LVU804
 2094 0960 411042E2 		sub	r1, r2, #65
 2095 0964 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2096              		.loc 1 91 7 view .LVU805
 2097 0968 37204292 		subls	r2, r2, #55
 2098              	.LVL192:
  92:./src/main.c  **** 	}
 2099              		.loc 1 92 14 view .LVU806
 2100 096c 0F100292 		andls	r1, r2, #15
 2101              	.LVL193:
  89:./src/main.c  **** 	{
 2102              		.loc 1 89 4 view .LVU807
 2103 0970 0400009A 		bls	.L188
  94:./src/main.c  **** 	{
 2104              		.loc 1 94 2 is_stmt 1 view .LVU808
  94:./src/main.c  **** 	{
 2105              		.loc 1 94 19 is_stmt 0 view .LVU809
 2106 0974 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2107              		.loc 1 94 4 view .LVU810
 2108 0978 FF1001E2 		and	r1, r1, #255
 2109 097c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2110              		.loc 1 96 3 is_stmt 1 view .LVU811
 2111              	.LVL194:
  97:./src/main.c  **** 	}
 2112              		.loc 1 97 3 view .LVU812
  96:./src/main.c  **** 		return chr &0xF;
 2113              		.loc 1 96 7 is_stmt 0 view .LVU813
 2114 0980 57204292 		subls	r2, r2, #87
 2115              	.LVL195:
 2116              	.LBB459:
 2117              	.LBI459:
  87:./src/main.c  **** {
 2118              		.loc 1 87 6 is_stmt 1 view .LVU814
 2119              	.LBB460:
 100:./src/main.c  **** 	{
 2120              		.loc 1 100 2 view .LVU815
 104:./src/main.c  **** }
 2121              		.loc 1 104 2 view .LVU816
 104:./src/main.c  **** }
 2122              		.loc 1 104 13 is_stmt 0 view .LVU817
 2123 0984 0F1002E2 		and	r1, r2, #15
 2124              	.LVL196:
 2125              	.L188:
 104:./src/main.c  **** }
 2126              		.loc 1 104 13 view .LVU818
 2127              	.LBE460:
 2128              	.LBE459:
 2129              	.LBE458:
 2130              	.LBE457:
 861:./src/main.c  **** 		
 2131              		.loc 1 861 34 view .LVU819
 2132 0988 0C20D5E5 		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 860:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 2133              		.loc 1 860 30 view .LVU820
 2134 098c 013283E1 		orr	r3, r3, r1, lsl #4
 861:./src/main.c  **** 		
 2135              		.loc 1 861 3 is_stmt 1 view .LVU821
 2136              	.LVL197:
 2137              	.LBB461:
 2138              	.LBI461:
  87:./src/main.c  **** {
 2139              		.loc 1 87 6 view .LVU822
 2140              	.LBB462:
  89:./src/main.c  **** 	{
 2141              		.loc 1 89 2 view .LVU823
  89:./src/main.c  **** 	{
 2142              		.loc 1 89 4 is_stmt 0 view .LVU824
 2143 0990 411042E2 		sub	r1, r2, #65
 2144 0994 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2145              		.loc 1 91 7 view .LVU825
 2146 0998 37204292 		subls	r2, r2, #55
 2147              	.LVL198:
  92:./src/main.c  **** 	}
 2148              		.loc 1 92 14 view .LVU826
 2149 099c 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 2150              		.loc 1 89 4 view .LVU827
 2151 09a0 0400009A 		bls	.L192
  94:./src/main.c  **** 	{
 2152              		.loc 1 94 2 is_stmt 1 view .LVU828
  94:./src/main.c  **** 	{
 2153              		.loc 1 94 19 is_stmt 0 view .LVU829
 2154 09a4 611042E2 		sub	r1, r2, #97
 2155              	.LVL199:
  94:./src/main.c  **** 	{
 2156              		.loc 1 94 4 view .LVU830
 2157 09a8 FF1001E2 		and	r1, r1, #255
 2158 09ac 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2159              		.loc 1 96 3 is_stmt 1 view .LVU831
 2160              	.LVL200:
  97:./src/main.c  **** 	}
 2161              		.loc 1 97 3 view .LVU832
  96:./src/main.c  **** 		return chr &0xF;
 2162              		.loc 1 96 7 is_stmt 0 view .LVU833
 2163 09b0 57204292 		subls	r2, r2, #87
 2164              	.LVL201:
 2165              	.LBB463:
 2166              	.LBI463:
  87:./src/main.c  **** {
 2167              		.loc 1 87 6 is_stmt 1 view .LVU834
 2168              	.LBB464:
 100:./src/main.c  **** 	{
 2169              		.loc 1 100 2 view .LVU835
 104:./src/main.c  **** }
 2170              		.loc 1 104 2 view .LVU836
 104:./src/main.c  **** }
 2171              		.loc 1 104 13 is_stmt 0 view .LVU837
 2172 09b4 0F2002E2 		and	r2, r2, #15
 2173              	.LVL202:
 2174              	.L192:
 104:./src/main.c  **** }
 2175              		.loc 1 104 13 view .LVU838
 2176              	.LBE464:
 2177              	.LBE463:
 2178              	.LBE462:
 2179              	.LBE461:
 864:./src/main.c  **** 	
 2180              		.loc 1 864 17 view .LVU839
 2181 09b8 0310A0E3 		mov	r1, #3
 861:./src/main.c  **** 		
 2182              		.loc 1 861 30 view .LVU840
 2183 09bc 032082E1 		orr	r2, r2, r3
 867:./src/main.c  **** 				
 2184              		.loc 1 867 19 view .LVU841
 2185 09c0 0D30D5E5 		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 861:./src/main.c  **** 		
 2186              		.loc 1 861 15 view .LVU842
 2187 09c4 502085E5 		str	r2, [r5, #80]
 864:./src/main.c  **** 	
 2188              		.loc 1 864 3 is_stmt 1 view .LVU843
 2189              	.LBB465:
 2190              	.LBB466:
  89:./src/main.c  **** 	{
 2191              		.loc 1 89 4 is_stmt 0 view .LVU844
 2192 09c8 412043E2 		sub	r2, r3, #65
 2193 09cc 190052E3 		cmp	r2, #25
 2194              	.LBE466:
 2195              	.LBE465:
 864:./src/main.c  **** 	
 2196              		.loc 1 864 17 view .LVU845
 2197 09d0 4E10C5E5 		strb	r1, [r5, #78]
 867:./src/main.c  **** 				
 2198              		.loc 1 867 3 is_stmt 1 view .LVU846
 2199              	.LVL203:
 2200              	.LBB471:
 2201              	.LBI465:
  87:./src/main.c  **** {
 2202              		.loc 1 87 6 view .LVU847
 2203              	.LBB469:
  89:./src/main.c  **** 	{
 2204              		.loc 1 89 2 view .LVU848
  89:./src/main.c  **** 	{
 2205              		.loc 1 89 4 is_stmt 0 view .LVU849
 2206 09d4 D800009A 		bls	.L248
 2207              	.LVL204:
 2208              	.L195:
  94:./src/main.c  **** 	{
 2209              		.loc 1 94 2 is_stmt 1 view .LVU850
  94:./src/main.c  **** 	{
 2210              		.loc 1 94 19 is_stmt 0 view .LVU851
 2211 09d8 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 2212              		.loc 1 94 4 view .LVU852
 2213 09dc FF2002E2 		and	r2, r2, #255
 2214 09e0 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 2215              		.loc 1 96 3 is_stmt 1 view .LVU853
 2216              	.LVL205:
  97:./src/main.c  **** 	}
 2217              		.loc 1 97 3 view .LVU854
  96:./src/main.c  **** 		return chr &0xF;
 2218              		.loc 1 96 7 is_stmt 0 view .LVU855
 2219 09e4 57304392 		subls	r3, r3, #87
 2220              	.LVL206:
 2221              	.LBB467:
 2222              	.LBI467:
  87:./src/main.c  **** {
 2223              		.loc 1 87 6 is_stmt 1 view .LVU856
 2224              	.LBB468:
 100:./src/main.c  **** 	{
 2225              		.loc 1 100 2 view .LVU857
 104:./src/main.c  **** }
 2226              		.loc 1 104 2 view .LVU858
 104:./src/main.c  **** }
 2227              		.loc 1 104 13 is_stmt 0 view .LVU859
 2228 09e8 0F3003E2 		and	r3, r3, #15
 2229              	.LVL207:
 2230              	.L196:
 104:./src/main.c  **** }
 2231              		.loc 1 104 13 view .LVU860
 2232              	.LBE468:
 2233              	.LBE467:
 2234              	.LBE469:
 2235              	.LBE471:
 870:./src/main.c  **** 	}
 2236              		.loc 1 870 3 view .LVU861
 2237 09ec 4C159FE5 		ldr	r1, .L253+24
 2238 09f0 0000A0E3 		mov	r0, #0
 2239              	.LVL208:
 867:./src/main.c  **** 				
 2240              		.loc 1 867 16 view .LVU862
 2241 09f4 4F30C5E5 		strb	r3, [r5, #79]
 870:./src/main.c  **** 	}
 2242              		.loc 1 870 3 is_stmt 1 view .LVU863
 2243 09f8 FEFFFFEB 		bl	CAN_UserWrite
 2244              	.LVL209:
 877:./src/main.c  **** 
 2245              		.loc 1 877 2 view .LVU864
 877:./src/main.c  **** 
 2246              		.loc 1 877 15 is_stmt 0 view .LVU865
 2247 09fc 0020A0E3 		mov	r2, #0
 879:./src/main.c  **** 		if (Result == ret_OK) {
 2248              		.loc 1 879 5 view .LVU866
 2249 0a00 0530D6E5 		ldrb	r3, [r6, #5]	@ zero_extendqisi2
 2250 0a04 010053E3 		cmp	r3, #1
 877:./src/main.c  **** 
 2251              		.loc 1 877 15 view .LVU867
 2252 0a08 4920C5E5 		strb	r2, [r5, #73]
 879:./src/main.c  **** 		if (Result == ret_OK) {
 2253              		.loc 1 879 2 is_stmt 1 view .LVU868
 880:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'z';
 2254              		.loc 1 880 3 view .LVU869
 881:./src/main.c  **** 			SerXmtBufPtr++;
 2255              		.loc 1 881 4 view .LVU870
 881:./src/main.c  **** 			SerXmtBufPtr++;
 2256              		.loc 1 881 28 is_stmt 0 view .LVU871
 2257 0a0c 7A20A003 		moveq	r2, #122
 885:./src/main.c  **** 	SerXmtBufPtr++;
 2258              		.loc 1 885 26 view .LVU872
 2259 0a10 0DC0A0E3 		mov	ip, #13
 882:./src/main.c  **** 		}
 2260              		.loc 1 882 16 view .LVU873
 2261 0a14 4930C505 		strbeq	r3, [r5, #73]
 885:./src/main.c  **** 	SerXmtBufPtr++;
 2262              		.loc 1 885 11 view .LVU874
 2263 0a18 4930D5E5 		ldrb	r3, [r5, #73]	@ zero_extendqisi2
 881:./src/main.c  **** 			SerXmtBufPtr++;
 2264              		.loc 1 881 28 view .LVU875
 2265 0a1c 2820C505 		strbeq	r2, [r5, #40]
 882:./src/main.c  **** 		}
 2266              		.loc 1 882 4 is_stmt 1 view .LVU876
 885:./src/main.c  **** 	SerXmtBufPtr++;
 2267              		.loc 1 885 2 view .LVU877
 886:./src/main.c  **** 	
 2268              		.loc 1 886 14 is_stmt 0 view .LVU878
 2269 0a20 012083E2 		add	r2, r3, #1
 2270 0a24 FF2002E2 		and	r2, r2, #255
 885:./src/main.c  **** 	SerXmtBufPtr++;
 2271              		.loc 1 885 26 view .LVU879
 2272 0a28 033085E0 		add	r3, r5, r3
 886:./src/main.c  **** 	
 2273              		.loc 1 886 14 view .LVU880
 2274 0a2c 4920C5E5 		strb	r2, [r5, #73]
 889:./src/main.c  **** }
 2275              		.loc 1 889 2 view .LVU881
 2276 0a30 F4149FE5 		ldr	r1, .L253+4
 885:./src/main.c  **** 	SerXmtBufPtr++;
 2277              		.loc 1 885 26 view .LVU882
 2278 0a34 28C0C3E5 		strb	ip, [r3, #40]
 886:./src/main.c  **** 	
 2279              		.loc 1 886 2 is_stmt 1 view .LVU883
 889:./src/main.c  **** }
 2280              		.loc 1 889 2 view .LVU884
 2281 0a38 0000A0E3 		mov	r0, #0
 2282 0a3c FEFFFFEB 		bl	SER_Write
 2283              	.LVL210:
 890:./src/main.c  **** /**************************************************/
 2284              		.loc 1 890 1 is_stmt 0 view .LVU885
 2285 0a40 F4FDFFEA 		b	.L43
 2286              	.LVL211:
 2287              	.L31:
 890:./src/main.c  **** /**************************************************/
 2288              		.loc 1 890 1 view .LVU886
 2289              	.LBE428:
 2290              	.LBE427:
 227:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 8)&&(CanChnOpen==0)) {
 2291              		.loc 1 227 3 is_stmt 1 view .LVU887
 227:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 8)&&(CanChnOpen==0)) {
 2292              		.loc 1 227 6 is_stmt 0 view .LVU888
 2293 0a44 020056E3 		cmp	r6, #2
 2294 0a48 D9FDFF1A 		bne	.L18
 228:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 2295              		.loc 1 228 8 view .LVU889
 2296 0a4c 0510D5E5 		ldrb	r1, [r5, #5]	@ zero_extendqisi2
 2297              	.LVL212:
 2298              	.LBB474:
 2299              	.LBI474:
  87:./src/main.c  **** {
 2300              		.loc 1 87 6 is_stmt 1 view .LVU890
 2301              	.LBB475:
  89:./src/main.c  **** 	{
 2302              		.loc 1 89 2 view .LVU891
  89:./src/main.c  **** 	{
 2303              		.loc 1 89 4 is_stmt 0 view .LVU892
 2304 0a50 413041E2 		sub	r3, r1, #65
 2305 0a54 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 2306              		.loc 1 91 7 view .LVU893
 2307 0a58 37104192 		subls	r1, r1, #55
 2308              	.LVL213:
  92:./src/main.c  **** 	}
 2309              		.loc 1 92 14 view .LVU894
 2310 0a5c 0F100192 		andls	r1, r1, #15
  89:./src/main.c  **** 	{
 2311              		.loc 1 89 4 view .LVU895
 2312 0a60 0400009A 		bls	.L40
  94:./src/main.c  **** 	{
 2313              		.loc 1 94 2 is_stmt 1 view .LVU896
  94:./src/main.c  **** 	{
 2314              		.loc 1 94 19 is_stmt 0 view .LVU897
 2315 0a64 613041E2 		sub	r3, r1, #97
 2316              	.LVL214:
  94:./src/main.c  **** 	{
 2317              		.loc 1 94 4 view .LVU898
 2318 0a68 FF3003E2 		and	r3, r3, #255
 2319 0a6c 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 2320              		.loc 1 96 3 is_stmt 1 view .LVU899
 2321              	.LVL215:
  97:./src/main.c  **** 	}
 2322              		.loc 1 97 3 view .LVU900
  96:./src/main.c  **** 		return chr &0xF;
 2323              		.loc 1 96 7 is_stmt 0 view .LVU901
 2324 0a70 57104192 		subls	r1, r1, #87
 2325              	.LVL216:
 2326              	.LBB476:
 2327              	.LBI476:
  87:./src/main.c  **** {
 2328              		.loc 1 87 6 is_stmt 1 view .LVU902
 2329              	.LBB477:
 100:./src/main.c  **** 	{
 2330              		.loc 1 100 2 view .LVU903
 104:./src/main.c  **** }
 2331              		.loc 1 104 2 view .LVU904
 104:./src/main.c  **** }
 2332              		.loc 1 104 13 is_stmt 0 view .LVU905
 2333 0a74 0F1001E2 		and	r1, r1, #15
 2334              	.LVL217:
 2335              	.L40:
 104:./src/main.c  **** }
 2336              		.loc 1 104 13 view .LVU906
 2337              	.LBE477:
 2338              	.LBE476:
 2339              	.LBE475:
 2340              	.LBE474:
 228:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 2341              		.loc 1 228 3 view .LVU907
 2342 0a78 080051E3 		cmp	r1, #8
 2343 0a7c CCFDFF8A 		bhi	.L18
 228:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 2344              		.loc 1 228 37 discriminator 1 view .LVU908
 2345 0a80 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 2346 0a84 000054E3 		cmp	r4, #0
 2347 0a88 C9FDFF1A 		bne	.L18
 229:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 2348              		.loc 1 229 4 is_stmt 1 view .LVU909
 229:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 2349              		.loc 1 229 13 is_stmt 0 view .LVU910
 2350 0a8c A4349FE5 		ldr	r3, .L253+16
 230:./src/main.c  **** 			CanInitialized = 1;
 2351              		.loc 1 230 4 view .LVU911
 2352 0a90 0400A0E1 		mov	r0, r4
 2353              	.LVL218:
 229:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 2354              		.loc 1 229 13 view .LVU912
 2355 0a94 001083E5 		str	r1, [r3]
 230:./src/main.c  **** 			CanInitialized = 1;
 2356              		.loc 1 230 4 is_stmt 1 view .LVU913
 2357 0a98 FEFFFFEB 		bl	CAN_InitChannelMio
 2358              	.LVL219:
 231:./src/main.c  **** 			// Send ASCII OK
 2359              		.loc 1 231 4 view .LVU914
 231:./src/main.c  **** 			// Send ASCII OK
 2360              		.loc 1 231 19 is_stmt 0 view .LVU915
 2361 0a9c 0120A0E3 		mov	r2, #1
 233:./src/main.c  **** 		}
 2362              		.loc 1 233 4 view .LVU916
 2363 0aa0 0400A0E1 		mov	r0, r4
 2364 0aa4 07108DE2 		add	r1, sp, #7
 231:./src/main.c  **** 			// Send ASCII OK
 2365              		.loc 1 231 19 view .LVU917
 2366 0aa8 2720C5E5 		strb	r2, [r5, #39]
 233:./src/main.c  **** 		}
 2367              		.loc 1 233 4 is_stmt 1 view .LVU918
 2368 0aac FEFFFFEB 		bl	SER_Write
 2369              	.LVL220:
 2370 0ab0 D8FDFFEA 		b	.L43
 2371              	.LVL221:
 2372              	.L36:
 364:./src/main.c  **** 			GetStatusFlags(); // returns 1 byte with 7 flags
 2373              		.loc 1 364 3 view .LVU919
 364:./src/main.c  **** 			GetStatusFlags(); // returns 1 byte with 7 flags
 2374              		.loc 1 364 6 is_stmt 0 view .LVU920
 2375 0ab4 010056E3 		cmp	r6, #1
 2376 0ab8 BDFDFF1A 		bne	.L18
 365:./src/main.c  **** 		}
 2377              		.loc 1 365 4 is_stmt 1 view .LVU921
 2378              	.LBB478:
 2379              	.LBI478:
 915:./src/main.c  **** //-------------------------------------------------
 2380              		.loc 1 915 13 view .LVU922
 2381              	.LBB479:
 921:./src/main.c  **** 
 2382              		.loc 1 921 2 view .LVU923
 2383              	.LVL222:
 924:./src/main.c  **** 
 2384              		.loc 1 924 2 view .LVU924
 926:./src/main.c  **** 
 2385              		.loc 1 926 5 is_stmt 0 view .LVU925
 2386 0abc 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 2387 0ac0 010053E3 		cmp	r3, #1
 924:./src/main.c  **** 
 2388              		.loc 1 924 15 view .LVU926
 2389 0ac4 0010A0E3 		mov	r1, #0
 952:./src/main.c  **** 		SerXmtBufPtr++;
 2390              		.loc 1 952 27 view .LVU927
 2391 0ac8 0730A013 		movne	r3, #7
 924:./src/main.c  **** 
 2392              		.loc 1 924 15 view .LVU928
 2393 0acc 4910C5E5 		strb	r1, [r5, #73]
 926:./src/main.c  **** 
 2394              		.loc 1 926 2 is_stmt 1 view .LVU929
 952:./src/main.c  **** 		SerXmtBufPtr++;
 2395              		.loc 1 952 27 is_stmt 0 view .LVU930
 2396 0ad0 2830C515 		strbne	r3, [r5, #40]
 953:./src/main.c  **** 	}
 2397              		.loc 1 953 15 view .LVU931
 2398 0ad4 4960C515 		strbne	r6, [r5, #73]
 926:./src/main.c  **** 
 2399              		.loc 1 926 5 view .LVU932
 2400 0ad8 1B00001A 		bne	.L205
 931:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 2401              		.loc 1 931 3 is_stmt 1 view .LVU933
 931:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 2402              		.loc 1 931 18 is_stmt 0 view .LVU934
 2403 0adc 68249FE5 		ldr	r2, .L253+36
 932:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 2404              		.loc 1 932 39 view .LVU935
 2405 0ae0 2530D5E5 		ldrb	r3, [r5, #37]	@ zero_extendqisi2
 931:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 2406              		.loc 1 931 18 view .LVU936
 2407 0ae4 0C2092E5 		ldr	r2, [r2, #12]
 2408              	.LVL223:
 932:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 2409              		.loc 1 932 3 is_stmt 1 view .LVU937
 933:./src/main.c  **** 		
 2410              		.loc 1 933 3 view .LVU938
 932:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 2411              		.loc 1 932 39 is_stmt 0 view .LVU939
 2412 0ae8 013003E2 		and	r3, r3, #1
 931:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 2413              		.loc 1 931 24 view .LVU940
 2414 0aec EC2002E2 		and	r2, r2, #236
 2415              	.LVL224:
 932:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 2416              		.loc 1 932 14 view .LVU941
 2417 0af0 023083E1 		orr	r3, r3, r2
 933:./src/main.c  **** 		
 2418              		.loc 1 933 14 view .LVU942
 2419 0af4 5C20D5E5 		ldrb	r2, [r5, #92]	@ zero_extendqisi2
 2420 0af8 012002E2 		and	r2, r2, #1
 2421              	.LBB480:
 2422              	.LBB481:
  76:./src/main.c  **** 	{
 2423              		.loc 1 76 4 view .LVU943
 2424 0afc 9F0053E3 		cmp	r3, #159
 2425              	.LBE481:
 2426              	.LBE480:
 933:./src/main.c  **** 		
 2427              		.loc 1 933 14 view .LVU944
 2428 0b00 822083E1 		orr	r2, r3, r2, lsl #1
 2429              	.LVL225:
 935:./src/main.c  **** 		//statusbits.bit1 = (SerTxCongestionOccurred & 0x01); // transmit FIFO full
 2430              		.loc 1 935 3 is_stmt 1 view .LVU945
 937:./src/main.c  **** 
 2431              		.loc 1 937 3 view .LVU946
 940:./src/main.c  **** 		SerXmtBufPtr++;
 2432              		.loc 1 940 3 view .LVU947
 942:./src/main.c  **** 		SerXmtBufPtr++;
 2433              		.loc 1 942 29 is_stmt 0 view .LVU948
 2434 0b04 2332A0E1 		lsr	r3, r3, #4
 2435              	.LBB484:
 2436              	.LBB482:
  78:./src/main.c  **** 	}
 2437              		.loc 1 78 7 view .LVU949
 2438 0b08 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 2439              		.loc 1 82 7 view .LVU950
 2440 0b0c 30308392 		addls	r3, r3, #48
 2441              	.LBE482:
 2442              	.LBE484:
 942:./src/main.c  **** 		SerXmtBufPtr++;
 2443              		.loc 1 942 27 view .LVU951
 2444 0b10 2930C5E5 		strb	r3, [r5, #41]
 947:./src/main.c  **** 
 2445              		.loc 1 947 15 view .LVU952
 2446 0b14 0430A0E3 		mov	r3, #4
 940:./src/main.c  **** 		SerXmtBufPtr++;
 2447              		.loc 1 940 27 view .LVU953
 2448 0b18 4600A0E3 		mov	r0, #70
 2449              	.LVL226:
 935:./src/main.c  **** 		//statusbits.bit1 = (SerTxCongestionOccurred & 0x01); // transmit FIFO full
 2450              		.loc 1 935 24 view .LVU954
 2451 0b1c 2510C5E5 		strb	r1, [r5, #37]
 937:./src/main.c  **** 
 2452              		.loc 1 937 27 view .LVU955
 2453 0b20 5C10C5E5 		strb	r1, [r5, #92]
 946:./src/main.c  **** 		SerXmtBufPtr++;
 2454              		.loc 1 946 27 view .LVU956
 2455 0b24 0D10A0E3 		mov	r1, #13
 2456 0b28 0360A0E1 		mov	r6, r3
 2457              	.LVL227:
 944:./src/main.c  **** 		SerXmtBufPtr++;
 2458              		.loc 1 944 29 view .LVU957
 2459 0b2c 0F2002E2 		and	r2, r2, #15
 2460              	.LVL228:
 2461              	.LBB485:
 2462              	.LBB486:
  76:./src/main.c  **** 	{
 2463              		.loc 1 76 4 view .LVU958
 2464 0b30 090052E3 		cmp	r2, #9
  78:./src/main.c  **** 	}
 2465              		.loc 1 78 7 view .LVU959
 2466 0b34 37208282 		addhi	r2, r2, #55
  82:./src/main.c  **** 	}
 2467              		.loc 1 82 7 view .LVU960
 2468 0b38 30208292 		addls	r2, r2, #48
 2469              	.LBE486:
 2470              	.LBE485:
 940:./src/main.c  **** 		SerXmtBufPtr++;
 2471              		.loc 1 940 27 view .LVU961
 2472 0b3c 2800C5E5 		strb	r0, [r5, #40]
 941:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii((statusbyte & 0xF0) >> 4);
 2473              		.loc 1 941 3 is_stmt 1 view .LVU962
 942:./src/main.c  **** 		SerXmtBufPtr++;
 2474              		.loc 1 942 3 view .LVU963
 2475              	.LBB488:
 2476              	.LBI480:
  73:./src/main.c  **** {
 2477              		.loc 1 73 6 view .LVU964
 2478              	.LBB483:
  75:./src/main.c  **** 	if(chr > 9)
 2479              		.loc 1 75 2 view .LVU965
  76:./src/main.c  **** 	{
 2480              		.loc 1 76 2 view .LVU966
  78:./src/main.c  **** 	}
 2481              		.loc 1 78 3 view .LVU967
  82:./src/main.c  **** 	}
 2482              		.loc 1 82 3 view .LVU968
  84:./src/main.c  **** }
 2483              		.loc 1 84 2 view .LVU969
 2484              	.LBE483:
 2485              	.LBE488:
 943:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii (statusbyte & 0x0F);
 2486              		.loc 1 943 3 view .LVU970
 944:./src/main.c  **** 		SerXmtBufPtr++;
 2487              		.loc 1 944 3 view .LVU971
 2488              	.LBB489:
 2489              	.LBI485:
  73:./src/main.c  **** {
 2490              		.loc 1 73 6 view .LVU972
 2491              	.LBB487:
  75:./src/main.c  **** 	if(chr > 9)
 2492              		.loc 1 75 2 view .LVU973
  76:./src/main.c  **** 	{
 2493              		.loc 1 76 2 view .LVU974
  78:./src/main.c  **** 	}
 2494              		.loc 1 78 3 view .LVU975
  82:./src/main.c  **** 	}
 2495              		.loc 1 82 3 view .LVU976
 2496              	.LVL229:
  84:./src/main.c  **** }
 2497              		.loc 1 84 2 view .LVU977
  84:./src/main.c  **** }
 2498              		.loc 1 84 2 is_stmt 0 view .LVU978
 2499              	.LBE487:
 2500              	.LBE489:
 944:./src/main.c  **** 		SerXmtBufPtr++;
 2501              		.loc 1 944 27 view .LVU979
 2502 0b40 2A20C5E5 		strb	r2, [r5, #42]
 945:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = ret_OK; // [<CR>]
 2503              		.loc 1 945 3 is_stmt 1 view .LVU980
 946:./src/main.c  **** 		SerXmtBufPtr++;
 2504              		.loc 1 946 3 view .LVU981
 946:./src/main.c  **** 		SerXmtBufPtr++;
 2505              		.loc 1 946 27 is_stmt 0 view .LVU982
 2506 0b44 2B10C5E5 		strb	r1, [r5, #43]
 947:./src/main.c  **** 
 2507              		.loc 1 947 3 is_stmt 1 view .LVU983
 947:./src/main.c  **** 
 2508              		.loc 1 947 15 is_stmt 0 view .LVU984
 2509 0b48 4930C5E5 		strb	r3, [r5, #73]
 2510              	.L205:
 958:./src/main.c  **** }
 2511              		.loc 1 958 2 is_stmt 1 view .LVU985
 2512 0b4c 0620A0E1 		mov	r2, r6
 2513 0b50 D4139FE5 		ldr	r1, .L253+4
 2514 0b54 0000A0E3 		mov	r0, #0
 2515 0b58 FEFFFFEB 		bl	SER_Write
 2516              	.LVL230:
 959:./src/main.c  **** /**************************************************/
 2517              		.loc 1 959 1 is_stmt 0 view .LVU986
 2518 0b5c ADFDFFEA 		b	.L43
 2519              	.LVL231:
 2520              	.L28:
 959:./src/main.c  **** /**************************************************/
 2521              		.loc 1 959 1 view .LVU987
 2522              	.LBE479:
 2523              	.LBE478:
 373:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 2524              		.loc 1 373 3 is_stmt 1 view .LVU988
 373:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 2525              		.loc 1 373 6 is_stmt 0 view .LVU989
 2526 0b60 020056E3 		cmp	r6, #2
 2527 0b64 92FDFF1A 		bne	.L18
 374:./src/main.c  **** 			SetAutoPollAutoSend();
 2528              		.loc 1 374 8 view .LVU990
 2529 0b68 0500D5E5 		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 2530              	.LVL232:
 2531              	.LBB490:
 2532              	.LBI490:
  87:./src/main.c  **** {
 2533              		.loc 1 87 6 is_stmt 1 view .LVU991
 2534              	.LBB491:
  89:./src/main.c  **** 	{
 2535              		.loc 1 89 2 view .LVU992
  89:./src/main.c  **** 	{
 2536              		.loc 1 89 4 is_stmt 0 view .LVU993
 2537 0b6c 413040E2 		sub	r3, r0, #65
 2538 0b70 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 2539              		.loc 1 91 7 view .LVU994
 2540 0b74 37304092 		subls	r3, r0, #55
  92:./src/main.c  **** 	}
 2541              		.loc 1 92 14 view .LVU995
 2542 0b78 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 2543              		.loc 1 89 4 view .LVU996
 2544 0b7c 0400009A 		bls	.L207
  94:./src/main.c  **** 	{
 2545              		.loc 1 94 2 is_stmt 1 view .LVU997
  94:./src/main.c  **** 	{
 2546              		.loc 1 94 4 is_stmt 0 view .LVU998
 2547 0b80 613040E2 		sub	r3, r0, #97
 2548 0b84 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 2549              		.loc 1 96 3 is_stmt 1 view .LVU999
 2550              	.LVL233:
  97:./src/main.c  **** 	}
 2551              		.loc 1 97 3 view .LVU1000
 2552              	.LBB492:
 2553              	.LBI492:
  87:./src/main.c  **** {
 2554              		.loc 1 87 6 view .LVU1001
 2555              	.LBB493:
 100:./src/main.c  **** 	{
 2556              		.loc 1 100 2 view .LVU1002
 104:./src/main.c  **** }
 2557              		.loc 1 104 2 view .LVU1003
 2558              	.LBE493:
 2559              	.LBE492:
  96:./src/main.c  **** 		return chr &0xF;
 2560              		.loc 1 96 7 is_stmt 0 view .LVU1004
 2561 0b88 57304092 		subls	r3, r0, #87
  97:./src/main.c  **** 	}
 2562              		.loc 1 97 14 view .LVU1005
 2563 0b8c 0F300392 		andls	r3, r3, #15
 2564              	.LBB495:
 2565              	.LBB494:
 104:./src/main.c  **** }
 2566              		.loc 1 104 13 view .LVU1006
 2567 0b90 0F300082 		andhi	r3, r0, #15
 2568              	.LVL234:
 2569              	.L207:
 104:./src/main.c  **** }
 2570              		.loc 1 104 13 view .LVU1007
 2571              	.LBE494:
 2572              	.LBE495:
 2573              	.LBE491:
 2574              	.LBE490:
 374:./src/main.c  **** 			SetAutoPollAutoSend();
 2575              		.loc 1 374 3 view .LVU1008
 2576 0b94 010053E3 		cmp	r3, #1
 2577 0b98 85FDFF8A 		bhi	.L18
 375:./src/main.c  **** 		}
 2578              		.loc 1 375 4 is_stmt 1 view .LVU1009
 2579              	.LBB496:
 2580              	.LBI496:
 989:./src/main.c  **** //-------------------------------------------------
 2581              		.loc 1 989 13 view .LVU1010
 2582              	.LBB497:
 992:./src/main.c  **** 	
 2583              		.loc 1 992 2 view .LVU1011
 994:./src/main.c  **** 	
 2584              		.loc 1 994 2 view .LVU1012
 2585              	.LVL235:
 996:./src/main.c  **** 		AutoPollAutoSend = ascii2hex(SerRcvBuf[1]);
 2586              		.loc 1 996 2 view .LVU1013
 996:./src/main.c  **** 		AutoPollAutoSend = ascii2hex(SerRcvBuf[1]);
 2587              		.loc 1 996 5 is_stmt 0 view .LVU1014
 2588 0b9c 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 2589 0ba0 000053E3 		cmp	r3, #0
 2590 0ba4 9800001A 		bne	.L232
 997:./src/main.c  **** 	}
 2591              		.loc 1 997 3 is_stmt 1 view .LVU1015
 997:./src/main.c  **** 	}
 2592              		.loc 1 997 22 is_stmt 0 view .LVU1016
 2593 0ba8 FEFFFFEB 		bl	ascii2hex
 2594              	.LVL236:
 997:./src/main.c  **** 	}
 2595              		.loc 1 997 20 view .LVU1017
 2596 0bac 84339FE5 		ldr	r3, .L253+16
 2597 0bb0 0500C3E5 		strb	r0, [r3, #5]
 2598 0bb4 B6FDFFEA 		b	.L222
 2599              	.LVL237:
 2600              	.L27:
 997:./src/main.c  **** 	}
 2601              		.loc 1 997 20 view .LVU1018
 2602              	.LBE497:
 2603              	.LBE496:
 266:./src/main.c  **** 			AutoPollAutoSend=1;
 2604              		.loc 1 266 3 is_stmt 1 view .LVU1019
 266:./src/main.c  **** 			AutoPollAutoSend=1;
 2605              		.loc 1 266 6 is_stmt 0 view .LVU1020
 2606 0bb8 010056E3 		cmp	r6, #1
 2607 0bbc 7CFDFF1A 		bne	.L18
 266:./src/main.c  **** 			AutoPollAutoSend=1;
 2608              		.loc 1 266 23 discriminator 1 view .LVU1021
 2609 0bc0 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 2610 0bc4 000054E3 		cmp	r4, #0
 2611 0bc8 79FDFF1A 		bne	.L18
 266:./src/main.c  **** 			AutoPollAutoSend=1;
 2612              		.loc 1 266 44 discriminator 2 view .LVU1022
 2613 0bcc 2730D5E5 		ldrb	r3, [r5, #39]	@ zero_extendqisi2
 2614 0bd0 010053E3 		cmp	r3, #1
 2615 0bd4 76FDFF1A 		bne	.L18
 267:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2616              		.loc 1 267 4 is_stmt 1 view .LVU1023
 267:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2617              		.loc 1 267 20 is_stmt 0 view .LVU1024
 2618 0bd8 58739FE5 		ldr	r7, .L253+16
 268:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 2619              		.loc 1 268 4 view .LVU1025
 2620 0bdc 0400A0E1 		mov	r0, r4
 2621              	.LVL238:
 267:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2622              		.loc 1 267 20 view .LVU1026
 2623 0be0 0560C7E5 		strb	r6, [r7, #5]
 268:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 2624              		.loc 1 268 4 is_stmt 1 view .LVU1027
 2625 0be4 FEFFFFEB 		bl	CAN_ReInitChannel
 2626              	.LVL239:
 269:./src/main.c  **** 			CanChnOpen = 1;
 2627              		.loc 1 269 4 view .LVU1028
 2628 0be8 0410A0E1 		mov	r1, r4
 2629 0bec 0400A0E1 		mov	r0, r4
 2630 0bf0 FEFFFFEB 		bl	CAN_SetBusMode
 2631              	.LVL240:
 270:./src/main.c  **** 			CanBusMode = BUS_ON;
 2632              		.loc 1 270 4 view .LVU1029
 273:./src/main.c  **** 		}
 2633              		.loc 1 273 4 is_stmt 0 view .LVU1030
 2634 0bf4 0620A0E1 		mov	r2, r6
 2635 0bf8 0400A0E1 		mov	r0, r4
 2636 0bfc 07108DE2 		add	r1, sp, #7
 270:./src/main.c  **** 			CanBusMode = BUS_ON;
 2637              		.loc 1 270 15 view .LVU1031
 2638 0c00 2660C5E5 		strb	r6, [r5, #38]
 271:./src/main.c  **** 			// Send ASCII OK
 2639              		.loc 1 271 4 is_stmt 1 view .LVU1032
 271:./src/main.c  **** 			// Send ASCII OK
 2640              		.loc 1 271 15 is_stmt 0 view .LVU1033
 2641 0c04 0440C7E5 		strb	r4, [r7, #4]
 273:./src/main.c  **** 		}
 2642              		.loc 1 273 4 is_stmt 1 view .LVU1034
 2643 0c08 FEFFFFEB 		bl	SER_Write
 2644              	.LVL241:
 2645 0c0c 81FDFFEA 		b	.L43
 2646              	.LVL242:
 2647              	.L26:
 466:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 2648              		.loc 1 466 3 view .LVU1035
 466:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 2649              		.loc 1 466 6 is_stmt 0 view .LVU1036
 2650 0c10 020056E3 		cmp	r6, #2
 2651 0c14 66FDFF1A 		bne	.L18
 467:./src/main.c  **** 			SetRcvTimestampMode(); // u8_t TimestampMode
 2652              		.loc 1 467 8 view .LVU1037
 2653 0c18 0500D5E5 		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 2654              	.LVL243:
 2655              	.LBB498:
 2656              	.LBI498:
  87:./src/main.c  **** {
 2657              		.loc 1 87 6 is_stmt 1 view .LVU1038
 2658              	.LBB499:
  89:./src/main.c  **** 	{
 2659              		.loc 1 89 2 view .LVU1039
  89:./src/main.c  **** 	{
 2660              		.loc 1 89 4 is_stmt 0 view .LVU1040
 2661 0c1c 413040E2 		sub	r3, r0, #65
 2662 0c20 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 2663              		.loc 1 91 7 view .LVU1041
 2664 0c24 37304092 		subls	r3, r0, #55
  92:./src/main.c  **** 	}
 2665              		.loc 1 92 14 view .LVU1042
 2666 0c28 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 2667              		.loc 1 89 4 view .LVU1043
 2668 0c2c 0400009A 		bls	.L219
  94:./src/main.c  **** 	{
 2669              		.loc 1 94 2 is_stmt 1 view .LVU1044
  94:./src/main.c  **** 	{
 2670              		.loc 1 94 4 is_stmt 0 view .LVU1045
 2671 0c30 613040E2 		sub	r3, r0, #97
 2672 0c34 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 2673              		.loc 1 96 3 is_stmt 1 view .LVU1046
 2674              	.LVL244:
  97:./src/main.c  **** 	}
 2675              		.loc 1 97 3 view .LVU1047
 2676              	.LBB500:
 2677              	.LBI500:
  87:./src/main.c  **** {
 2678              		.loc 1 87 6 view .LVU1048
 2679              	.LBB501:
 100:./src/main.c  **** 	{
 2680              		.loc 1 100 2 view .LVU1049
 104:./src/main.c  **** }
 2681              		.loc 1 104 2 view .LVU1050
 2682              	.LBE501:
 2683              	.LBE500:
  96:./src/main.c  **** 		return chr &0xF;
 2684              		.loc 1 96 7 is_stmt 0 view .LVU1051
 2685 0c38 57304092 		subls	r3, r0, #87
  97:./src/main.c  **** 	}
 2686              		.loc 1 97 14 view .LVU1052
 2687 0c3c 0F300392 		andls	r3, r3, #15
 2688              	.LBB503:
 2689              	.LBB502:
 104:./src/main.c  **** }
 2690              		.loc 1 104 13 view .LVU1053
 2691 0c40 0F300082 		andhi	r3, r0, #15
 2692              	.LVL245:
 2693              	.L219:
 104:./src/main.c  **** }
 2694              		.loc 1 104 13 view .LVU1054
 2695              	.LBE502:
 2696              	.LBE503:
 2697              	.LBE499:
 2698              	.LBE498:
 467:./src/main.c  **** 			SetRcvTimestampMode(); // u8_t TimestampMode
 2699              		.loc 1 467 3 view .LVU1055
 2700 0c44 010053E3 		cmp	r3, #1
 2701 0c48 59FDFF8A 		bhi	.L18
 468:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 2702              		.loc 1 468 4 is_stmt 1 view .LVU1056
 2703              	.LBB504:
 2704              	.LBI320:
1165:./src/main.c  **** //-------------------------------------------------
 2705              		.loc 1 1165 13 view .LVU1057
 2706              	.LBB322:
1168:./src/main.c  **** 	
 2707              		.loc 1 1168 2 view .LVU1058
1170:./src/main.c  **** 		
 2708              		.loc 1 1170 2 view .LVU1059
 2709              	.LVL246:
1172:./src/main.c  **** 		CanRcvTimestampOn = ascii2hex(SerRcvBuf[1]);
 2710              		.loc 1 1172 2 view .LVU1060
1172:./src/main.c  **** 		CanRcvTimestampOn = ascii2hex(SerRcvBuf[1]);
 2711              		.loc 1 1172 5 is_stmt 0 view .LVU1061
 2712 0c4c 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 2713 0c50 000053E3 		cmp	r3, #0
 2714 0c54 6C00001A 		bne	.L232
1173:./src/main.c  **** 	}
 2715              		.loc 1 1173 3 is_stmt 1 view .LVU1062
1173:./src/main.c  **** 	}
 2716              		.loc 1 1173 23 is_stmt 0 view .LVU1063
 2717 0c58 FEFFFFEB 		bl	ascii2hex
 2718              	.LVL247:
1173:./src/main.c  **** 	}
 2719              		.loc 1 1173 21 view .LVU1064
 2720 0c5c 5E00C5E5 		strb	r0, [r5, #94]
 2721 0c60 8BFDFFEA 		b	.L222
 2722              	.LVL248:
 2723              	.L23:
1173:./src/main.c  **** 	}
 2724              		.loc 1 1173 21 view .LVU1065
 2725              	.LBE322:
 2726              	.LBE504:
 329:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 2727              		.loc 1 329 3 is_stmt 1 view .LVU1066
 329:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 2728              		.loc 1 329 6 is_stmt 0 view .LVU1067
 2729 0c64 050056E3 		cmp	r6, #5
 2730 0c68 51FDFF1A 		bne	.L18
 330:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 2731              		.loc 1 330 3 view .LVU1068
 2732 0c6c 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 2733 0c70 010053E3 		cmp	r3, #1
 2734 0c74 4EFDFF1A 		bne	.L18
 331:./src/main.c  **** 			TransmitStandardRtr();
 2735              		.loc 1 331 19 view .LVU1069
 2736 0c78 B8629FE5 		ldr	r6, .L253+16
 2737              	.LVL249:
 331:./src/main.c  **** 			TransmitStandardRtr();
 2738              		.loc 1 331 3 view .LVU1070
 2739 0c7c 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 2740 0c80 000052E3 		cmp	r2, #0
 2741 0c84 4AFDFF1A 		bne	.L18
 332:./src/main.c  **** 		}
 2742              		.loc 1 332 4 is_stmt 1 view .LVU1071
 2743              	.LBB505:
 2744              	.LBI505:
 767:./src/main.c  **** //-------------------------------------------------
 2745              		.loc 1 767 13 view .LVU1072
 2746              	.LBB506:
 770:./src/main.c  **** 
 2747              		.loc 1 770 2 view .LVU1073
 772:./src/main.c  **** 
 2748              		.loc 1 772 2 view .LVU1074
 2749              	.LVL250:
 775:./src/main.c  **** 
 2750              		.loc 1 775 2 view .LVU1075
 778:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 2751              		.loc 1 778 3 view .LVU1076
 782:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 2752              		.loc 1 782 34 is_stmt 0 view .LVU1077
 2753 0c88 0530D5E5 		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 2754              	.LBB507:
 2755              	.LBB508:
  89:./src/main.c  **** 	{
 2756              		.loc 1 89 4 view .LVU1078
 2757 0c8c 411043E2 		sub	r1, r3, #65
 2758 0c90 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2759              		.loc 1 91 7 view .LVU1079
 2760 0c94 37304392 		subls	r3, r3, #55
 2761              	.LBE508:
 2762              	.LBE507:
 778:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 2763              		.loc 1 778 22 view .LVU1080
 2764 0c98 542085E5 		str	r2, [r5, #84]
 779:./src/main.c  **** 	
 2765              		.loc 1 779 3 is_stmt 1 view .LVU1081
 779:./src/main.c  **** 	
 2766              		.loc 1 779 22 is_stmt 0 view .LVU1082
 2767 0c9c 582085E5 		str	r2, [r5, #88]
 782:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 2768              		.loc 1 782 3 is_stmt 1 view .LVU1083
 2769              	.LBB512:
 2770              	.LBI507:
  87:./src/main.c  **** {
 2771              		.loc 1 87 6 view .LVU1084
 2772              	.LBB511:
  89:./src/main.c  **** 	{
 2773              		.loc 1 89 2 view .LVU1085
  92:./src/main.c  **** 	}
 2774              		.loc 1 92 14 is_stmt 0 view .LVU1086
 2775 0ca0 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 2776              		.loc 1 89 4 view .LVU1087
 2777 0ca4 0400009A 		bls	.L147
  94:./src/main.c  **** 	{
 2778              		.loc 1 94 2 is_stmt 1 view .LVU1088
  94:./src/main.c  **** 	{
 2779              		.loc 1 94 19 is_stmt 0 view .LVU1089
 2780 0ca8 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 2781              		.loc 1 94 4 view .LVU1090
 2782 0cac FF2002E2 		and	r2, r2, #255
 2783 0cb0 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 2784              		.loc 1 96 3 is_stmt 1 view .LVU1091
 2785              	.LVL251:
  97:./src/main.c  **** 	}
 2786              		.loc 1 97 3 view .LVU1092
  96:./src/main.c  **** 		return chr &0xF;
 2787              		.loc 1 96 7 is_stmt 0 view .LVU1093
 2788 0cb4 57304392 		subls	r3, r3, #87
 2789              	.LVL252:
 2790              	.LBB509:
 2791              	.LBI509:
  87:./src/main.c  **** {
 2792              		.loc 1 87 6 is_stmt 1 view .LVU1094
 2793              	.LBB510:
 100:./src/main.c  **** 	{
 2794              		.loc 1 100 2 view .LVU1095
 104:./src/main.c  **** }
 2795              		.loc 1 104 2 view .LVU1096
 104:./src/main.c  **** }
 2796              		.loc 1 104 13 is_stmt 0 view .LVU1097
 2797 0cb8 0F3003E2 		and	r3, r3, #15
 2798              	.LVL253:
 2799              	.L147:
 104:./src/main.c  **** }
 2800              		.loc 1 104 13 view .LVU1098
 2801              	.LBE510:
 2802              	.LBE509:
 2803              	.LBE511:
 2804              	.LBE512:
 783:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 2805              		.loc 1 783 34 view .LVU1099
 2806 0cbc 0620D5E5 		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 2807              	.LBB513:
 2808              	.LBB514:
  89:./src/main.c  **** 	{
 2809              		.loc 1 89 4 view .LVU1100
 2810 0cc0 411042E2 		sub	r1, r2, #65
 2811 0cc4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2812              		.loc 1 91 7 view .LVU1101
 2813 0cc8 37204292 		subls	r2, r2, #55
 2814              	.LBE514:
 2815              	.LBE513:
 782:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 2816              		.loc 1 782 57 view .LVU1102
 2817 0ccc 0334A0E1 		lsl	r3, r3, #8
 783:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 2818              		.loc 1 783 3 is_stmt 1 view .LVU1103
 2819              	.LBB518:
 2820              	.LBI513:
  87:./src/main.c  **** {
 2821              		.loc 1 87 6 view .LVU1104
 2822              	.LBB517:
  89:./src/main.c  **** 	{
 2823              		.loc 1 89 2 view .LVU1105
  92:./src/main.c  **** 	}
 2824              		.loc 1 92 14 is_stmt 0 view .LVU1106
 2825 0cd0 0F100292 		andls	r1, r2, #15
  89:./src/main.c  **** 	{
 2826              		.loc 1 89 4 view .LVU1107
 2827 0cd4 0400009A 		bls	.L151
  94:./src/main.c  **** 	{
 2828              		.loc 1 94 2 is_stmt 1 view .LVU1108
  94:./src/main.c  **** 	{
 2829              		.loc 1 94 19 is_stmt 0 view .LVU1109
 2830 0cd8 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2831              		.loc 1 94 4 view .LVU1110
 2832 0cdc FF1001E2 		and	r1, r1, #255
 2833 0ce0 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2834              		.loc 1 96 3 is_stmt 1 view .LVU1111
 2835              	.LVL254:
  97:./src/main.c  **** 	}
 2836              		.loc 1 97 3 view .LVU1112
  96:./src/main.c  **** 		return chr &0xF;
 2837              		.loc 1 96 7 is_stmt 0 view .LVU1113
 2838 0ce4 57204292 		subls	r2, r2, #87
 2839              	.LVL255:
 2840              	.LBB515:
 2841              	.LBI515:
  87:./src/main.c  **** {
 2842              		.loc 1 87 6 is_stmt 1 view .LVU1114
 2843              	.LBB516:
 100:./src/main.c  **** 	{
 2844              		.loc 1 100 2 view .LVU1115
 104:./src/main.c  **** }
 2845              		.loc 1 104 2 view .LVU1116
 104:./src/main.c  **** }
 2846              		.loc 1 104 13 is_stmt 0 view .LVU1117
 2847 0ce8 0F1002E2 		and	r1, r2, #15
 2848              	.LVL256:
 2849              	.L151:
 104:./src/main.c  **** }
 2850              		.loc 1 104 13 view .LVU1118
 2851              	.LBE516:
 2852              	.LBE515:
 2853              	.LBE517:
 2854              	.LBE518:
 784:./src/main.c  **** 		
 2855              		.loc 1 784 34 view .LVU1119
 2856 0cec 0720D5E5 		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 783:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 2857              		.loc 1 783 30 view .LVU1120
 2858 0cf0 013283E1 		orr	r3, r3, r1, lsl #4
 784:./src/main.c  **** 		
 2859              		.loc 1 784 3 is_stmt 1 view .LVU1121
 2860              	.LVL257:
 2861              	.LBB519:
 2862              	.LBI519:
  87:./src/main.c  **** {
 2863              		.loc 1 87 6 view .LVU1122
 2864              	.LBB520:
  89:./src/main.c  **** 	{
 2865              		.loc 1 89 2 view .LVU1123
  89:./src/main.c  **** 	{
 2866              		.loc 1 89 4 is_stmt 0 view .LVU1124
 2867 0cf4 411042E2 		sub	r1, r2, #65
 2868 0cf8 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2869              		.loc 1 91 7 view .LVU1125
 2870 0cfc 37204292 		subls	r2, r2, #55
 2871              	.LVL258:
  92:./src/main.c  **** 	}
 2872              		.loc 1 92 14 view .LVU1126
 2873 0d00 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 2874              		.loc 1 89 4 view .LVU1127
 2875 0d04 0400009A 		bls	.L155
  94:./src/main.c  **** 	{
 2876              		.loc 1 94 2 is_stmt 1 view .LVU1128
  94:./src/main.c  **** 	{
 2877              		.loc 1 94 19 is_stmt 0 view .LVU1129
 2878 0d08 611042E2 		sub	r1, r2, #97
 2879              	.LVL259:
  94:./src/main.c  **** 	{
 2880              		.loc 1 94 4 view .LVU1130
 2881 0d0c FF1001E2 		and	r1, r1, #255
 2882 0d10 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2883              		.loc 1 96 3 is_stmt 1 view .LVU1131
 2884              	.LVL260:
  97:./src/main.c  **** 	}
 2885              		.loc 1 97 3 view .LVU1132
  96:./src/main.c  **** 		return chr &0xF;
 2886              		.loc 1 96 7 is_stmt 0 view .LVU1133
 2887 0d14 57204292 		subls	r2, r2, #87
 2888              	.LVL261:
 2889              	.LBB521:
 2890              	.LBI521:
  87:./src/main.c  **** {
 2891              		.loc 1 87 6 is_stmt 1 view .LVU1134
 2892              	.LBB522:
 100:./src/main.c  **** 	{
 2893              		.loc 1 100 2 view .LVU1135
 104:./src/main.c  **** }
 2894              		.loc 1 104 2 view .LVU1136
 104:./src/main.c  **** }
 2895              		.loc 1 104 13 is_stmt 0 view .LVU1137
 2896 0d18 0F2002E2 		and	r2, r2, #15
 2897              	.LVL262:
 2898              	.L155:
 104:./src/main.c  **** }
 2899              		.loc 1 104 13 view .LVU1138
 2900              	.LBE522:
 2901              	.LBE521:
 2902              	.LBE520:
 2903              	.LBE519:
 787:./src/main.c  **** 	
 2904              		.loc 1 787 17 view .LVU1139
 2905 0d1c 0110A0E3 		mov	r1, #1
 784:./src/main.c  **** 		
 2906              		.loc 1 784 30 view .LVU1140
 2907 0d20 032082E1 		orr	r2, r2, r3
 790:./src/main.c  **** 				
 2908              		.loc 1 790 19 view .LVU1141
 2909 0d24 0830D5E5 		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 784:./src/main.c  **** 		
 2910              		.loc 1 784 15 view .LVU1142
 2911 0d28 502085E5 		str	r2, [r5, #80]
 787:./src/main.c  **** 	
 2912              		.loc 1 787 3 is_stmt 1 view .LVU1143
 2913              	.LBB523:
 2914              	.LBB524:
  89:./src/main.c  **** 	{
 2915              		.loc 1 89 4 is_stmt 0 view .LVU1144
 2916 0d2c 412043E2 		sub	r2, r3, #65
 2917 0d30 190052E3 		cmp	r2, #25
 2918              	.LBE524:
 2919              	.LBE523:
 787:./src/main.c  **** 	
 2920              		.loc 1 787 17 view .LVU1145
 2921 0d34 4E10C5E5 		strb	r1, [r5, #78]
 790:./src/main.c  **** 				
 2922              		.loc 1 790 3 is_stmt 1 view .LVU1146
 2923              	.LVL263:
 2924              	.LBB526:
 2925              	.LBI523:
  87:./src/main.c  **** {
 2926              		.loc 1 87 6 view .LVU1147
 2927              	.LBB525:
  89:./src/main.c  **** 	{
 2928              		.loc 1 89 2 view .LVU1148
  89:./src/main.c  **** 	{
 2929              		.loc 1 89 4 is_stmt 0 view .LVU1149
 2930 0d38 26FFFF8A 		bhi	.L195
 2931              	.LVL264:
 2932              	.L248:
  89:./src/main.c  **** 	{
 2933              		.loc 1 89 4 view .LVU1150
 2934              	.LBE525:
 2935              	.LBE526:
 2936              	.LBE506:
 2937              	.LBE505:
 2938              	.LBB527:
 2939              	.LBB473:
 2940              	.LBB472:
 2941              	.LBB470:
  91:./src/main.c  **** 		return chr &0xF;
 2942              		.loc 1 91 3 is_stmt 1 view .LVU1151
  92:./src/main.c  **** 	}
 2943              		.loc 1 92 3 view .LVU1152
  91:./src/main.c  **** 		return chr &0xF;
 2944              		.loc 1 91 7 is_stmt 0 view .LVU1153
 2945 0d3c 373043E2 		sub	r3, r3, #55
 2946              	.LVL265:
  92:./src/main.c  **** 	}
 2947              		.loc 1 92 14 view .LVU1154
 2948 0d40 0F3003E2 		and	r3, r3, #15
 2949 0d44 28FFFFEA 		b	.L196
 2950              	.LVL266:
 2951              	.L22:
  92:./src/main.c  **** 	}
 2952              		.loc 1 92 14 view .LVU1155
 2953              	.LBE470:
 2954              	.LBE472:
 2955              	.LBE473:
 2956              	.LBE527:
 241:./src/main.c  **** 			SetCanBTR0BTR1();
 2957              		.loc 1 241 3 is_stmt 1 view .LVU1156
 241:./src/main.c  **** 			SetCanBTR0BTR1();
 2958              		.loc 1 241 6 is_stmt 0 view .LVU1157
 2959 0d48 050056E3 		cmp	r6, #5
 2960 0d4c 18FDFF1A 		bne	.L18
 242:./src/main.c  **** 		//	EepromData.CanSpeed = 0xFF; 	// not a standard speed
 2961              		.loc 1 242 4 is_stmt 1 view .LVU1158
 2962              	.LBB528:
 2963              	.LBI528:
 693:./src/main.c  **** //-------------------------------------------------
 2964              		.loc 1 693 13 view .LVU1159
 2965              	.LBB529:
 696:./src/main.c  **** 	u32_t LpcBtr; // This is the LPC2194's "CANBTR" register
 2966              		.loc 1 696 2 view .LVU1160
 697:./src/main.c  **** 	u8_t BYTE0;
 2967              		.loc 1 697 2 view .LVU1161
 698:./src/main.c  **** 	u8_t BYTE1;
 2968              		.loc 1 698 2 view .LVU1162
 699:./src/main.c  **** 
 2969              		.loc 1 699 2 view .LVU1163
 701:./src/main.c  **** 	
 2970              		.loc 1 701 2 view .LVU1164
 2971              	.LVL267:
 704:./src/main.c  **** 	BYTE0 |= ((ascii2hex(SerRcvBuf[2])   )& 0x0F);
 2972              		.loc 1 704 2 view .LVU1165
 704:./src/main.c  **** 	BYTE0 |= ((ascii2hex(SerRcvBuf[2])   )& 0x0F);
 2973              		.loc 1 704 13 is_stmt 0 view .LVU1166
 2974 0d50 0560D5E5 		ldrb	r6, [r5, #5]	@ zero_extendqisi2
 2975              	.LVL268:
 2976              	.LBB530:
 2977              	.LBI530:
  87:./src/main.c  **** {
 2978              		.loc 1 87 6 is_stmt 1 view .LVU1167
 2979              	.LBB531:
  89:./src/main.c  **** 	{
 2980              		.loc 1 89 2 view .LVU1168
  89:./src/main.c  **** 	{
 2981              		.loc 1 89 4 is_stmt 0 view .LVU1169
 2982 0d54 413046E2 		sub	r3, r6, #65
 2983 0d58 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 2984              		.loc 1 91 7 view .LVU1170
 2985 0d5c 37604692 		subls	r6, r6, #55
 2986              	.LVL269:
  92:./src/main.c  **** 	}
 2987              		.loc 1 92 14 view .LVU1171
 2988 0d60 0F600692 		andls	r6, r6, #15
  89:./src/main.c  **** 	{
 2989              		.loc 1 89 4 view .LVU1172
 2990 0d64 0400009A 		bls	.L46
  94:./src/main.c  **** 	{
 2991              		.loc 1 94 2 is_stmt 1 view .LVU1173
  94:./src/main.c  **** 	{
 2992              		.loc 1 94 19 is_stmt 0 view .LVU1174
 2993 0d68 613046E2 		sub	r3, r6, #97
 2994              	.LVL270:
  94:./src/main.c  **** 	{
 2995              		.loc 1 94 4 view .LVU1175
 2996 0d6c FF3003E2 		and	r3, r3, #255
 2997 0d70 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 2998              		.loc 1 96 3 is_stmt 1 view .LVU1176
 2999              	.LVL271:
  97:./src/main.c  **** 	}
 3000              		.loc 1 97 3 view .LVU1177
  96:./src/main.c  **** 		return chr &0xF;
 3001              		.loc 1 96 7 is_stmt 0 view .LVU1178
 3002 0d74 57604692 		subls	r6, r6, #87
 3003              	.LVL272:
 3004              	.LBB532:
 3005              	.LBI532:
  87:./src/main.c  **** {
 3006              		.loc 1 87 6 is_stmt 1 view .LVU1179
 3007              	.LBB533:
 100:./src/main.c  **** 	{
 3008              		.loc 1 100 2 view .LVU1180
 104:./src/main.c  **** }
 3009              		.loc 1 104 2 view .LVU1181
 104:./src/main.c  **** }
 3010              		.loc 1 104 13 is_stmt 0 view .LVU1182
 3011 0d78 0F6006E2 		and	r6, r6, #15
 3012              	.LVL273:
 3013              	.L46:
 104:./src/main.c  **** }
 3014              		.loc 1 104 13 view .LVU1183
 3015              	.LBE533:
 3016              	.LBE532:
 3017              	.LBE531:
 3018              	.LBE530:
 705:./src/main.c  **** 	// get BTR1 from the received UART command line
 3019              		.loc 1 705 2 is_stmt 1 view .LVU1184
 705:./src/main.c  **** 	// get BTR1 from the received UART command line
 3020              		.loc 1 705 13 is_stmt 0 view .LVU1185
 3021 0d7c 0630D5E5 		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 3022              	.LVL274:
 3023              	.LBB534:
 3024              	.LBI534:
  87:./src/main.c  **** {
 3025              		.loc 1 87 6 is_stmt 1 view .LVU1186
 3026              	.LBB535:
  89:./src/main.c  **** 	{
 3027              		.loc 1 89 2 view .LVU1187
  89:./src/main.c  **** 	{
 3028              		.loc 1 89 4 is_stmt 0 view .LVU1188
 3029 0d80 412043E2 		sub	r2, r3, #65
 3030 0d84 190052E3 		cmp	r2, #25
  91:./src/main.c  **** 		return chr &0xF;
 3031              		.loc 1 91 7 view .LVU1189
 3032 0d88 37304392 		subls	r3, r3, #55
 3033              	.LVL275:
  92:./src/main.c  **** 	}
 3034              		.loc 1 92 14 view .LVU1190
 3035 0d8c 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 3036              		.loc 1 89 4 view .LVU1191
 3037 0d90 0400009A 		bls	.L50
  94:./src/main.c  **** 	{
 3038              		.loc 1 94 2 is_stmt 1 view .LVU1192
  94:./src/main.c  **** 	{
 3039              		.loc 1 94 19 is_stmt 0 view .LVU1193
 3040 0d94 612043E2 		sub	r2, r3, #97
 3041              	.LVL276:
  94:./src/main.c  **** 	{
 3042              		.loc 1 94 4 view .LVU1194
 3043 0d98 FF2002E2 		and	r2, r2, #255
 3044 0d9c 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 3045              		.loc 1 96 3 is_stmt 1 view .LVU1195
 3046              	.LVL277:
  97:./src/main.c  **** 	}
 3047              		.loc 1 97 3 view .LVU1196
  96:./src/main.c  **** 		return chr &0xF;
 3048              		.loc 1 96 7 is_stmt 0 view .LVU1197
 3049 0da0 57304392 		subls	r3, r3, #87
 3050              	.LVL278:
 3051              	.LBB536:
 3052              	.LBI536:
  87:./src/main.c  **** {
 3053              		.loc 1 87 6 is_stmt 1 view .LVU1198
 3054              	.LBB537:
 100:./src/main.c  **** 	{
 3055              		.loc 1 100 2 view .LVU1199
 104:./src/main.c  **** }
 3056              		.loc 1 104 2 view .LVU1200
 104:./src/main.c  **** }
 3057              		.loc 1 104 13 is_stmt 0 view .LVU1201
 3058 0da4 0F3003E2 		and	r3, r3, #15
 3059              	.LVL279:
 3060              	.L50:
 104:./src/main.c  **** }
 3061              		.loc 1 104 13 view .LVU1202
 3062              	.LBE537:
 3063              	.LBE536:
 3064              	.LBE535:
 3065              	.LBE534:
 707:./src/main.c  **** 	BYTE1 |= ((ascii2hex(SerRcvBuf[4])   )& 0x0F);
 3066              		.loc 1 707 2 is_stmt 1 view .LVU1203
 707:./src/main.c  **** 	BYTE1 |= ((ascii2hex(SerRcvBuf[4])   )& 0x0F);
 3067              		.loc 1 707 13 is_stmt 0 view .LVU1204
 3068 0da8 0720D5E5 		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 3069              	.LVL280:
 3070              	.LBB538:
 3071              	.LBI538:
  87:./src/main.c  **** {
 3072              		.loc 1 87 6 is_stmt 1 view .LVU1205
 3073              	.LBB539:
  89:./src/main.c  **** 	{
 3074              		.loc 1 89 2 view .LVU1206
  89:./src/main.c  **** 	{
 3075              		.loc 1 89 4 is_stmt 0 view .LVU1207
 3076 0dac 411042E2 		sub	r1, r2, #65
 3077 0db0 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 3078              		.loc 1 91 7 view .LVU1208
 3079 0db4 37204292 		subls	r2, r2, #55
 3080              	.LVL281:
  92:./src/main.c  **** 	}
 3081              		.loc 1 92 14 view .LVU1209
 3082 0db8 0F100292 		andls	r1, r2, #15
 3083              	.LVL282:
  89:./src/main.c  **** 	{
 3084              		.loc 1 89 4 view .LVU1210
 3085 0dbc 0400009A 		bls	.L54
  94:./src/main.c  **** 	{
 3086              		.loc 1 94 2 is_stmt 1 view .LVU1211
  94:./src/main.c  **** 	{
 3087              		.loc 1 94 19 is_stmt 0 view .LVU1212
 3088 0dc0 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 3089              		.loc 1 94 4 view .LVU1213
 3090 0dc4 FF1001E2 		and	r1, r1, #255
 3091 0dc8 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 3092              		.loc 1 96 3 is_stmt 1 view .LVU1214
 3093              	.LVL283:
  97:./src/main.c  **** 	}
 3094              		.loc 1 97 3 view .LVU1215
  96:./src/main.c  **** 		return chr &0xF;
 3095              		.loc 1 96 7 is_stmt 0 view .LVU1216
 3096 0dcc 57204292 		subls	r2, r2, #87
 3097              	.LVL284:
 3098              	.LBB540:
 3099              	.LBI540:
  87:./src/main.c  **** {
 3100              		.loc 1 87 6 is_stmt 1 view .LVU1217
 3101              	.LBB541:
 100:./src/main.c  **** 	{
 3102              		.loc 1 100 2 view .LVU1218
 104:./src/main.c  **** }
 3103              		.loc 1 104 2 view .LVU1219
 104:./src/main.c  **** }
 3104              		.loc 1 104 13 is_stmt 0 view .LVU1220
 3105 0dd0 0F1002E2 		and	r1, r2, #15
 3106              	.LVL285:
 3107              	.L54:
 104:./src/main.c  **** }
 3108              		.loc 1 104 13 view .LVU1221
 3109              	.LBE541:
 3110              	.LBE540:
 3111              	.LBE539:
 3112              	.LBE538:
 708:./src/main.c  **** 
 3113              		.loc 1 708 2 is_stmt 1 view .LVU1222
 708:./src/main.c  **** 
 3114              		.loc 1 708 13 is_stmt 0 view .LVU1223
 3115 0dd4 0820D5E5 		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 3116              	.LVL286:
 3117              	.LBB542:
 3118              	.LBI542:
  87:./src/main.c  **** {
 3119              		.loc 1 87 6 is_stmt 1 view .LVU1224
 3120              	.LBB543:
  89:./src/main.c  **** 	{
 3121              		.loc 1 89 2 view .LVU1225
  89:./src/main.c  **** 	{
 3122              		.loc 1 89 4 is_stmt 0 view .LVU1226
 3123 0dd8 410042E2 		sub	r0, r2, #65
 3124              	.LVL287:
  89:./src/main.c  **** 	{
 3125              		.loc 1 89 4 view .LVU1227
 3126 0ddc 190050E3 		cmp	r0, #25
  91:./src/main.c  **** 		return chr &0xF;
 3127              		.loc 1 91 7 view .LVU1228
 3128 0de0 37204292 		subls	r2, r2, #55
 3129              	.LVL288:
  92:./src/main.c  **** 	}
 3130              		.loc 1 92 14 view .LVU1229
 3131 0de4 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 3132              		.loc 1 89 4 view .LVU1230
 3133 0de8 0400009A 		bls	.L58
  94:./src/main.c  **** 	{
 3134              		.loc 1 94 2 is_stmt 1 view .LVU1231
  94:./src/main.c  **** 	{
 3135              		.loc 1 94 19 is_stmt 0 view .LVU1232
 3136 0dec 610042E2 		sub	r0, r2, #97
 3137              	.LVL289:
  94:./src/main.c  **** 	{
 3138              		.loc 1 94 4 view .LVU1233
 3139 0df0 FF0000E2 		and	r0, r0, #255
 3140 0df4 190050E3 		cmp	r0, #25
  96:./src/main.c  **** 		return chr &0xF;
 3141              		.loc 1 96 3 is_stmt 1 view .LVU1234
 3142              	.LVL290:
  97:./src/main.c  **** 	}
 3143              		.loc 1 97 3 view .LVU1235
  96:./src/main.c  **** 		return chr &0xF;
 3144              		.loc 1 96 7 is_stmt 0 view .LVU1236
 3145 0df8 57204292 		subls	r2, r2, #87
 3146              	.LVL291:
 3147              	.LBB544:
 3148              	.LBI544:
  87:./src/main.c  **** {
 3149              		.loc 1 87 6 is_stmt 1 view .LVU1237
 3150              	.LBB545:
 100:./src/main.c  **** 	{
 3151              		.loc 1 100 2 view .LVU1238
 104:./src/main.c  **** }
 3152              		.loc 1 104 2 view .LVU1239
 104:./src/main.c  **** }
 3153              		.loc 1 104 13 is_stmt 0 view .LVU1240
 3154 0dfc 0F2002E2 		and	r2, r2, #15
 3155              	.LVL292:
 3156              	.L58:
 104:./src/main.c  **** }
 3157              		.loc 1 104 13 view .LVU1241
 3158              	.LBE545:
 3159              	.LBE544:
 3160              	.LBE543:
 3161              	.LBE542:
 711:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 3162              		.loc 1 711 2 is_stmt 1 view .LVU1242
 711:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 3163              		.loc 1 711 5 is_stmt 0 view .LVU1243
 3164 0e00 2670D5E5 		ldrb	r7, [r5, #38]	@ zero_extendqisi2
 3165 0e04 000057E3 		cmp	r7, #0
 3166 0e08 2300000A 		beq	.L252
 3167              	.LVL293:
 3168              	.L232:
 711:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 3169              		.loc 1 711 5 view .LVU1244
 3170              	.LBE529:
 3171              	.LBE528:
 3172              	.LBB547:
 3173              	.LBB323:
1176:./src/main.c  **** 	}
 3174              		.loc 1 1176 10 view .LVU1245
 3175 0e0c 0740A0E3 		mov	r4, #7
 3176 0e10 1FFDFFEA 		b	.L222
 3177              	.LVL294:
 3178              	.L33:
1176:./src/main.c  **** 	}
 3179              		.loc 1 1176 10 view .LVU1246
 3180              	.LBE323:
 3181              	.LBE547:
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 3182              		.loc 1 252 3 is_stmt 1 view .LVU1247
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 3183              		.loc 1 252 6 is_stmt 0 view .LVU1248
 3184 0e14 010056E3 		cmp	r6, #1
 3185 0e18 E5FCFF1A 		bne	.L18
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 3186              		.loc 1 252 23 discriminator 1 view .LVU1249
 3187 0e1c 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 3188 0e20 000054E3 		cmp	r4, #0
 3189 0e24 E2FCFF1A 		bne	.L18
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 3190              		.loc 1 252 44 discriminator 2 view .LVU1250
 3191 0e28 2730D5E5 		ldrb	r3, [r5, #39]	@ zero_extendqisi2
 3192 0e2c 010053E3 		cmp	r3, #1
 3193 0e30 DFFCFF1A 		bne	.L18
 253:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 3194              		.loc 1 253 4 is_stmt 1 view .LVU1251
 3195 0e34 0400A0E1 		mov	r0, r4
 3196              	.LVL295:
 253:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 3197              		.loc 1 253 4 is_stmt 0 view .LVU1252
 3198 0e38 FEFFFFEB 		bl	CAN_ReInitChannel
 3199              	.LVL296:
 254:./src/main.c  **** 			CanChnOpen = 1;
 3200              		.loc 1 254 4 is_stmt 1 view .LVU1253
 3201 0e3c 0410A0E1 		mov	r1, r4
 3202 0e40 0400A0E1 		mov	r0, r4
 3203 0e44 FEFFFFEB 		bl	CAN_SetBusMode
 3204              	.LVL297:
 255:./src/main.c  **** 			CanBusMode = BUS_ON;
 3205              		.loc 1 255 4 view .LVU1254
 256:./src/main.c  **** 			// Send ASCII OK
 3206              		.loc 1 256 15 is_stmt 0 view .LVU1255
 3207 0e48 E8309FE5 		ldr	r3, .L253+16
 258:./src/main.c  **** 		}
 3208              		.loc 1 258 4 view .LVU1256
 3209 0e4c 0620A0E1 		mov	r2, r6
 3210 0e50 0400A0E1 		mov	r0, r4
 3211 0e54 07108DE2 		add	r1, sp, #7
 255:./src/main.c  **** 			CanBusMode = BUS_ON;
 3212              		.loc 1 255 15 view .LVU1257
 3213 0e58 2660C5E5 		strb	r6, [r5, #38]
 256:./src/main.c  **** 			// Send ASCII OK
 3214              		.loc 1 256 4 is_stmt 1 view .LVU1258
 256:./src/main.c  **** 			// Send ASCII OK
 3215              		.loc 1 256 15 is_stmt 0 view .LVU1259
 3216 0e5c 0440C3E5 		strb	r4, [r3, #4]
 258:./src/main.c  **** 		}
 3217              		.loc 1 258 4 is_stmt 1 view .LVU1260
 3218 0e60 FEFFFFEB 		bl	SER_Write
 3219              	.LVL298:
 3220 0e64 EBFCFFEA 		b	.L43
 3221              	.LVL299:
 3222              	.L38:
 295:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3223              		.loc 1 295 3 view .LVU1261
 295:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3224              		.loc 1 295 6 is_stmt 0 view .LVU1262
 3225 0e68 010056E3 		cmp	r6, #1
 3226 0e6c D0FCFF1A 		bne	.L18
 296:./src/main.c  **** 			CanChnOpen = 0;
 3227              		.loc 1 296 4 is_stmt 1 view .LVU1263
 3228 0e70 0610A0E1 		mov	r1, r6
 3229 0e74 0000A0E3 		mov	r0, #0
 3230              	.LVL300:
 296:./src/main.c  **** 			CanChnOpen = 0;
 3231              		.loc 1 296 4 is_stmt 0 view .LVU1264
 3232 0e78 FEFFFFEB 		bl	CAN_SetBusMode
 3233              	.LVL301:
 297:./src/main.c  **** 			CanBusMode = BUS_OFF;
 3234              		.loc 1 297 4 is_stmt 1 view .LVU1265
 297:./src/main.c  **** 			CanBusMode = BUS_OFF;
 3235              		.loc 1 297 15 is_stmt 0 view .LVU1266
 3236 0e7c 0000A0E3 		mov	r0, #0
 298:./src/main.c  **** 			// Send ASCII OK
 3237              		.loc 1 298 15 view .LVU1267
 3238 0e80 B0309FE5 		ldr	r3, .L253+16
 300:./src/main.c  **** 		}
 3239              		.loc 1 300 4 view .LVU1268
 3240 0e84 0620A0E1 		mov	r2, r6
 3241 0e88 07108DE2 		add	r1, sp, #7
 298:./src/main.c  **** 			// Send ASCII OK
 3242              		.loc 1 298 15 view .LVU1269
 3243 0e8c 0460C3E5 		strb	r6, [r3, #4]
 297:./src/main.c  **** 			CanBusMode = BUS_OFF;
 3244              		.loc 1 297 15 view .LVU1270
 3245 0e90 2600C5E5 		strb	r0, [r5, #38]
 298:./src/main.c  **** 			// Send ASCII OK
 3246              		.loc 1 298 4 is_stmt 1 view .LVU1271
 300:./src/main.c  **** 		}
 3247              		.loc 1 300 4 view .LVU1272
 3248 0e94 FEFFFFEB 		bl	SER_Write
 3249              	.LVL302:
 3250 0e98 DEFCFFEA 		b	.L43
 3251              	.LVL303:
 3252              	.L252:
 3253              	.LBB548:
 3254              	.LBB546:
 718:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3255              		.loc 1 718 8 is_stmt 0 view .LVU1273
 3256 0e9c 0180A0E3 		mov	r8, #1
 715:./src/main.c  **** 		// Write values to CAN controller
 3257              		.loc 1 715 16 view .LVU1274
 3258 0ea0 012282E1 		orr	r2, r2, r1, lsl #4
 3259              	.LVL304:
 705:./src/main.c  **** 	// get BTR1 from the received UART command line
 3260              		.loc 1 705 8 view .LVU1275
 3261 0ea4 061283E1 		orr	r1, r3, r6, lsl #4
 713:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3262              		.loc 1 713 3 is_stmt 1 view .LVU1276
 713:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3263              		.loc 1 713 40 is_stmt 0 view .LVU1277
 3264 0ea8 3F3001E2 		and	r3, r1, #63
 3265              	.LVL305:
 713:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3266              		.loc 1 713 40 view .LVU1278
 3267 0eac 083083E0 		add	r3, r3, r8
 3268 0eb0 133883E0 		add	r3, r3, r3, lsl r8
 714:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3269              		.loc 1 714 36 view .LVU1279
 3270 0eb4 0164A0E1 		lsl	r6, r1, #8
 713:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3271              		.loc 1 713 40 view .LVU1280
 3272 0eb8 1338A0E1 		lsl	r3, r3, r8
 713:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3273              		.loc 1 713 11 view .LVU1281
 3274 0ebc 013043E2 		sub	r3, r3, #1
 3275              	.LVL306:
 714:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3276              		.loc 1 714 3 is_stmt 1 view .LVU1282
 714:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3277              		.loc 1 714 36 is_stmt 0 view .LVU1283
 3278 0ec0 036906E2 		and	r6, r6, #49152
 714:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3279              		.loc 1 714 10 view .LVU1284
 3280 0ec4 036086E1 		orr	r6, r6, r3
 3281              	.LVL307:
 715:./src/main.c  **** 		// Write values to CAN controller
 3282              		.loc 1 715 3 is_stmt 1 view .LVU1285
 715:./src/main.c  **** 		// Write values to CAN controller
 3283              		.loc 1 715 10 is_stmt 0 view .LVU1286
 3284 0ec8 026886E1 		orr	r6, r6, r2, lsl #16
 3285              	.LVL308:
 717:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 3286              		.loc 1 717 3 is_stmt 1 view .LVU1287
 717:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 3287              		.loc 1 717 11 is_stmt 0 view .LVU1288
 3288 0ecc 7C209FE5 		ldr	r2, .L253+40
 3289 0ed0 043092E5 		ldr	r3, [r2, #4]
 718:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3290              		.loc 1 718 8 view .LVU1289
 3291 0ed4 70909FE5 		ldr	r9, .L253+36
 717:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 3292              		.loc 1 717 11 view .LVU1290
 3293 0ed8 553583E3 		orr	r3, r3, #356515840
 3294 0edc 153983E3 		orr	r3, r3, #344064
 3295 0ee0 043082E5 		str	r3, [r2, #4]
 3296              	.LVL309:
 718:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3297              		.loc 1 718 3 is_stmt 1 view .LVU1291
 719:./src/main.c  **** 		C1IER=0x00; // Disabling all interrupts
 3298              		.loc 1 719 3 is_stmt 0 view .LVU1292
 3299 0ee4 0810A0E1 		mov	r1, r8
 3300 0ee8 0700A0E1 		mov	r0, r7
 718:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3301              		.loc 1 718 8 view .LVU1293
 3302 0eec 008089E5 		str	r8, [r9]
 719:./src/main.c  **** 		C1IER=0x00; // Disabling all interrupts
 3303              		.loc 1 719 3 is_stmt 1 view .LVU1294
 3304 0ef0 FEFFFFEB 		bl	CAN_SetBusMode
 3305              	.LVL310:
 720:./src/main.c  **** 		C1BTR = LpcBtr;
 3306              		.loc 1 720 3 view .LVU1295
 720:./src/main.c  **** 		C1BTR = LpcBtr;
 3307              		.loc 1 720 8 is_stmt 0 view .LVU1296
 3308 0ef4 107089E5 		str	r7, [r9, #16]
 721:./src/main.c  **** 		//CAN_InitChannel (CAN_BUS1, LpcBtr);
 3309              		.loc 1 721 3 is_stmt 1 view .LVU1297
 724:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 3310              		.loc 1 724 3 is_stmt 0 view .LVU1298
 3311 0ef8 0810A0E1 		mov	r1, r8
 721:./src/main.c  **** 		//CAN_InitChannel (CAN_BUS1, LpcBtr);
 3312              		.loc 1 721 9 view .LVU1299
 3313 0efc 146089E5 		str	r6, [r9, #20]
 723:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);					// CAN Bus On
 3314              		.loc 1 723 3 is_stmt 1 view .LVU1300
 724:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 3315              		.loc 1 724 3 is_stmt 0 view .LVU1301
 3316 0f00 0700A0E1 		mov	r0, r7
 723:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);					// CAN Bus On
 3317              		.loc 1 723 8 view .LVU1302
 3318 0f04 007089E5 		str	r7, [r9]
 724:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 3319              		.loc 1 724 3 is_stmt 1 view .LVU1303
 3320 0f08 FEFFFFEB 		bl	CAN_SetBusMode
 3321              	.LVL311:
 725:./src/main.c  **** 
 3322              		.loc 1 725 3 view .LVU1304
 3323 0f0c 0700A0E1 		mov	r0, r7
 3324 0f10 FEFFFFEB 		bl	CAN_ReInitChannel
 3325              	.LVL312:
 727:./src/main.c  **** 	}
 3326              		.loc 1 727 3 view .LVU1305
 727:./src/main.c  **** 	}
 3327              		.loc 1 727 18 is_stmt 0 view .LVU1306
 3328 0f14 2780C5E5 		strb	r8, [r5, #39]
 3329 0f18 DDFCFFEA 		b	.L222
 3330              	.LVL313:
 3331              	.L66:
 727:./src/main.c  **** 	}
 3332              		.loc 1 727 18 view .LVU1307
 3333              	.LBE546:
 3334              	.LBE548:
 3335              	.LBB549:
 3336              	.LBB426:
 565:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 3337              		.loc 1 565 2 is_stmt 1 view .LVU1308
 563:./src/main.c  **** 	}
 3338              		.loc 1 563 10 is_stmt 0 view .LVU1309
 3339 0f1c 0740A0E3 		mov	r4, #7
 565:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 3340              		.loc 1 565 15 view .LVU1310
 3341 0f20 4900C5E5 		strb	r0, [r5, #73]
 567:./src/main.c  **** 		if (Result == ret_OK) {
 3342              		.loc 1 567 2 is_stmt 1 view .LVU1311
 3343 0f24 97FDFFEA 		b	.L145
 3344              	.L254:
 3345              		.align	2
 3346              	.L253:
 3347 0f28 00000000 		.word	.LANCHOR0
 3348 0f2c 28000000 		.word	.LANCHOR0+40
 3349 0f30 56303030 		.word	808464470
 3350 0f34 310D0000 		.word	3377
 3351 0f38 00000000 		.word	.LANCHOR1
 3352 0f3c 54000000 		.word	.LANCHOR0+84
 3353 0f40 4C000000 		.word	.LANCHOR0+76
 3354 0f44 00000000 		.word	.LC0
 3355 0f48 29000000 		.word	.LANCHOR0+41
 3356 0f4c 004004E0 		.word	-536592384
 3357 0f50 00C002E0 		.word	-536690688
 3358              	.LBE426:
 3359              	.LBE549:
 3360              		.cfi_endproc
 3361              	.LFE6:
 3363              		.align	2
 3364              		.global	ProcessMsgFromCan
 3365              		.syntax unified
 3366              		.arm
 3367              		.fpu softvfp
 3369              	ProcessMsgFromCan:
 3370              	.LFB18:
1188:./src/main.c  **** /**************************************************/
1189:./src/main.c  **** 
1190:./src/main.c  **** 
1191:./src/main.c  **** 
1192:./src/main.c  **** 
1193:./src/main.c  **** 
1194:./src/main.c  **** 
1195:./src/main.c  **** //*************************************************
1196:./src/main.c  **** //! @brief	
1197:./src/main.c  **** //! Reads one MSG or RTR from CAN and passes this to RS232 UART (Host-PC).
1198:./src/main.c  **** //! To be called from MAIN() cyclically, as fast as possible.
1199:./src/main.c  **** //!
1200:./src/main.c  **** //! Reads messages from CAN and forwards them to the host PC (RS232), with or without timestamp.
1201:./src/main.c  **** //!
1202:./src/main.c  **** //! @param	void
1203:./src/main.c  **** //!
1204:./src/main.c  **** //! @return	void
1205:./src/main.c  **** //!
1206:./src/main.c  **** void ProcessMsgFromCan(void) 
1207:./src/main.c  **** //-------------------------------------------------
1208:./src/main.c  **** {
 3371              		.loc 1 1208 1 view -0
 3372              		.cfi_startproc
 3373              		@ Function supports interworking.
 3374              		@ args = 0, pretend = 0, frame = 0
 3375              		@ frame_needed = 0, uses_anonymous_args = 0
1209:./src/main.c  **** 	static u8_t i; //all purpose loop counter
 3376              		.loc 1 1209 2 view .LVU1313
1210:./src/main.c  **** 	static u16_t Timestamp;
 3377              		.loc 1 1210 2 view .LVU1314
1211:./src/main.c  **** 
1212:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 3378              		.loc 1 1212 2 view .LVU1315
 3379              		.loc 1 1212 23 is_stmt 0 view .LVU1316
 3380 0f54 8C339FE5 		ldr	r3, .L354
 3381              		.loc 1 1212 5 view .LVU1317
 3382 0f58 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3383 0f5c 010053E3 		cmp	r3, #1
 3384 0f60 1EFF2F11 		bxne	lr
1213:./src/main.c  **** 
1214:./src/main.c  **** 		// repeat previous message if not successfully sent in last cycle
1215:./src/main.c  **** 		if (UARTWriteResult != SER_ERR_OK) {
 3385              		.loc 1 1215 3 is_stmt 1 view .LVU1318
1208:./src/main.c  **** 	static u8_t i; //all purpose loop counter
 3386              		.loc 1 1208 1 is_stmt 0 view .LVU1319
 3387 0f64 70402DE9 		push	{r4, r5, r6, lr}
 3388              	.LCFI5:
 3389              		.cfi_def_cfa_offset 16
 3390              		.cfi_offset 4, -16
 3391              		.cfi_offset 5, -12
 3392              		.cfi_offset 6, -8
 3393              		.cfi_offset 14, -4
 3394              		.loc 1 1215 23 view .LVU1320
 3395 0f68 7C439FE5 		ldr	r4, .L354+4
 3396              		.loc 1 1215 6 view .LVU1321
 3397 0f6c 600094E5 		ldr	r0, [r4, #96]
 3398 0f70 000050E3 		cmp	r0, #0
 3399 0f74 4000001A 		bne	.L352
1216:./src/main.c  **** 			SerTxCongestionOccurred = 1; // set flag indicationg Tx buffer was full before
1217:./src/main.c  **** 			// Repeat sending last ASCII string to RS232 UART (Host-PC)
1218:./src/main.c  **** 			UARTWriteResult = SER_Write ( SER_PORT1, &SerXmtBuf[0], SerXmtBufPtr);
1219:./src/main.c  **** 			return;
1220:./src/main.c  **** 		}
1221:./src/main.c  **** 		//-------------------------------------------------
1222:./src/main.c  **** 
1223:./src/main.c  **** 		if (CAN_UserRead (CAN_BUS1, &CanRxMsg) != 0) {
 3400              		.loc 1 1223 3 is_stmt 1 view .LVU1322
 3401              		.loc 1 1223 7 is_stmt 0 view .LVU1323
 3402 0f78 641084E2 		add	r1, r4, #100
 3403 0f7c FEFFFFEB 		bl	CAN_UserRead
 3404              	.LVL314:
 3405              		.loc 1 1223 6 view .LVU1324
 3406 0f80 000050E3 		cmp	r0, #0
 3407 0f84 4200000A 		beq	.L255
 3408              	.LBB602:
 3409              	.LBI602:
1206:./src/main.c  **** //-------------------------------------------------
 3410              		.loc 1 1206 6 is_stmt 1 view .LVU1325
 3411              	.LBB603:
1224:./src/main.c  **** 			
1225:./src/main.c  **** 			Timestamp = Millitimer; // get current timestamp 
 3412              		.loc 1 1225 4 view .LVU1326
1226:./src/main.c  **** 
1227:./src/main.c  **** 			// if 11 bit Id
1228:./src/main.c  **** 			if ((CanRxMsg.Type & CAN_MSG_EXTENDED) == 0) { // is -not- 29 bit
 3413              		.loc 1 1228 17 is_stmt 0 view .LVU1327
 3414 0f88 6630D4E5 		ldrb	r3, [r4, #102]	@ zero_extendqisi2
 3415              		.loc 1 1228 7 view .LVU1328
 3416 0f8c 020013E3 		tst	r3, #2
1225:./src/main.c  **** 
 3417              		.loc 1 1225 14 view .LVU1329
 3418 0f90 B407D4E1 		ldrh	r0, [r4, #116]
 3419              		.loc 1 1228 4 is_stmt 1 view .LVU1330
 3420              		.loc 1 1228 7 is_stmt 0 view .LVU1331
 3421 0f94 4000001A 		bne	.L260
1229:./src/main.c  **** 
1230:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
 3422              		.loc 1 1230 5 is_stmt 1 view .LVU1332
1231:./src/main.c  **** 					SerXmtBuf[0] = 't';
 3423              		.loc 1 1231 19 is_stmt 0 view .LVU1333
 3424 0f98 013013E2 		ands	r3, r3, #1
 3425 0f9c 72C0A013 		movne	ip, #114
 3426 0fa0 74C0A003 		moveq	ip, #116
1232:./src/main.c  **** 				}
1233:./src/main.c  **** 				else { // is 11 bit RTR	
1234:./src/main.c  **** 					SerXmtBuf[0] = 'r';
1235:./src/main.c  **** 				}
1236:./src/main.c  **** 				// convert 11 bit Id
1237:./src/main.c  **** 				SerXmtBuf[1] = hex2ascii((CanRxMsg.Id & 0x700)>>8);
 3427              		.loc 1 1237 39 view .LVU1334
 3428 0fa4 682094E5 		ldr	r2, [r4, #104]
 3429              		.loc 1 1237 51 view .LVU1335
 3430 0fa8 2214A0E1 		lsr	r1, r2, #8
 3431              		.loc 1 1237 20 view .LVU1336
 3432 0fac 071001E2 		and	r1, r1, #7
 3433              	.LBB604:
 3434              	.LBB605:
  82:./src/main.c  **** 	}
 3435              		.loc 1 82 7 view .LVU1337
 3436 0fb0 301081E2 		add	r1, r1, #48
 3437              	.LBE605:
 3438              	.LBE604:
 3439              		.loc 1 1237 18 view .LVU1338
 3440 0fb4 2910C4E5 		strb	r1, [r4, #41]
1238:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F0)>>4);
 3441              		.loc 1 1238 51 view .LVU1339
 3442 0fb8 2212A0E1 		lsr	r1, r2, #4
 3443              		.loc 1 1238 20 view .LVU1340
 3444 0fbc 0F1001E2 		and	r1, r1, #15
1239:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii (CanRxMsg.Id & 0x00F);
 3445              		.loc 1 1239 20 view .LVU1341
 3446 0fc0 0F2002E2 		and	r2, r2, #15
 3447              	.LBB607:
 3448              	.LBB608:
  76:./src/main.c  **** 	{
 3449              		.loc 1 76 4 view .LVU1342
 3450 0fc4 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3451              		.loc 1 78 7 view .LVU1343
 3452 0fc8 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3453              		.loc 1 82 7 view .LVU1344
 3454 0fcc 30108192 		addls	r1, r1, #48
 3455              	.LBE608:
 3456              	.LBE607:
1240:./src/main.c  **** 				// convert DLC
1241:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii(CanRxMsg.Len);
 3457              		.loc 1 1241 20 view .LVU1345
 3458 0fd0 67E0D4E5 		ldrb	lr, [r4, #103]	@ zero_extendqisi2
 3459              	.LBB610:
 3460              	.LBB611:
  76:./src/main.c  **** 	{
 3461              		.loc 1 76 4 view .LVU1346
 3462 0fd4 090052E3 		cmp	r2, #9
  78:./src/main.c  **** 	}
 3463              		.loc 1 78 7 view .LVU1347
 3464 0fd8 37208282 		addhi	r2, r2, #55
  82:./src/main.c  **** 	}
 3465              		.loc 1 82 7 view .LVU1348
 3466 0fdc 30208292 		addls	r2, r2, #48
 3467              	.LBE611:
 3468              	.LBE610:
1239:./src/main.c  **** 				// convert DLC
 3469              		.loc 1 1239 18 view .LVU1349
 3470 0fe0 2B20C4E5 		strb	r2, [r4, #43]
 3471              	.LBB613:
 3472              	.LBB614:
  75:./src/main.c  **** 	if(chr > 9)
 3473              		.loc 1 75 6 view .LVU1350
 3474 0fe4 0F200EE2 		and	r2, lr, #15
  76:./src/main.c  **** 	{
 3475              		.loc 1 76 4 view .LVU1351
 3476 0fe8 090052E3 		cmp	r2, #9
 3477 0fec 28C0C4E5 		strb	ip, [r4, #40]
 3478              	.LBE614:
 3479              	.LBE613:
1237:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F0)>>4);
 3480              		.loc 1 1237 5 is_stmt 1 view .LVU1352
 3481              	.LBB617:
 3482              	.LBI604:
  73:./src/main.c  **** {
 3483              		.loc 1 73 6 view .LVU1353
 3484              	.LBB606:
  75:./src/main.c  **** 	if(chr > 9)
 3485              		.loc 1 75 2 view .LVU1354
  76:./src/main.c  **** 	{
 3486              		.loc 1 76 2 view .LVU1355
  82:./src/main.c  **** 	}
 3487              		.loc 1 82 3 view .LVU1356
  84:./src/main.c  **** }
 3488              		.loc 1 84 2 view .LVU1357
 3489              	.LBE606:
 3490              	.LBE617:
1238:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii (CanRxMsg.Id & 0x00F);
 3491              		.loc 1 1238 5 view .LVU1358
 3492              	.LBB618:
 3493              	.LBI607:
  73:./src/main.c  **** {
 3494              		.loc 1 73 6 view .LVU1359
 3495              	.LBB609:
  75:./src/main.c  **** 	if(chr > 9)
 3496              		.loc 1 75 2 view .LVU1360
  76:./src/main.c  **** 	{
 3497              		.loc 1 76 2 view .LVU1361
  78:./src/main.c  **** 	}
 3498              		.loc 1 78 3 view .LVU1362
  82:./src/main.c  **** 	}
 3499              		.loc 1 82 3 view .LVU1363
 3500              	.LVL315:
  84:./src/main.c  **** }
 3501              		.loc 1 84 2 view .LVU1364
  84:./src/main.c  **** }
 3502              		.loc 1 84 2 is_stmt 0 view .LVU1365
 3503              	.LBE609:
 3504              	.LBE618:
1238:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii (CanRxMsg.Id & 0x00F);
 3505              		.loc 1 1238 18 view .LVU1366
 3506 0ff0 2A10C4E5 		strb	r1, [r4, #42]
1239:./src/main.c  **** 				// convert DLC
 3507              		.loc 1 1239 5 is_stmt 1 view .LVU1367
 3508              	.LBB619:
 3509              	.LBI610:
  73:./src/main.c  **** {
 3510              		.loc 1 73 6 view .LVU1368
 3511              	.LBB612:
  75:./src/main.c  **** 	if(chr > 9)
 3512              		.loc 1 75 2 view .LVU1369
  76:./src/main.c  **** 	{
 3513              		.loc 1 76 2 view .LVU1370
  78:./src/main.c  **** 	}
 3514              		.loc 1 78 3 view .LVU1371
  82:./src/main.c  **** 	}
 3515              		.loc 1 82 3 view .LVU1372
  84:./src/main.c  **** }
 3516              		.loc 1 84 2 view .LVU1373
 3517              	.LBE612:
 3518              	.LBE619:
 3519              		.loc 1 1241 5 view .LVU1374
 3520              	.LVL316:
 3521              	.LBB620:
 3522              	.LBI613:
  73:./src/main.c  **** {
 3523              		.loc 1 73 6 view .LVU1375
 3524              	.LBB615:
  75:./src/main.c  **** 	if(chr > 9)
 3525              		.loc 1 75 2 view .LVU1376
  76:./src/main.c  **** 	{
 3526              		.loc 1 76 2 view .LVU1377
  76:./src/main.c  **** 	{
 3527              		.loc 1 76 4 is_stmt 0 view .LVU1378
 3528 0ff4 B400008A 		bhi	.L353
  82:./src/main.c  **** 	}
 3529              		.loc 1 82 3 is_stmt 1 view .LVU1379
 3530              	.LVL317:
  84:./src/main.c  **** }
 3531              		.loc 1 84 2 view .LVU1380
  82:./src/main.c  **** 	}
 3532              		.loc 1 82 7 is_stmt 0 view .LVU1381
 3533 0ff8 302082E2 		add	r2, r2, #48
 3534              	.LBE615:
 3535              	.LBE620:
1242:./src/main.c  **** 
1243:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
 3536              		.loc 1 1243 8 view .LVU1382
 3537 0ffc 000053E3 		cmp	r3, #0
1241:./src/main.c  **** 
 3538              		.loc 1 1241 18 view .LVU1383
 3539 1000 2C20C4E5 		strb	r2, [r4, #44]
 3540              		.loc 1 1243 5 is_stmt 1 view .LVU1384
 3541              		.loc 1 1243 8 is_stmt 0 view .LVU1385
 3542 1004 B400001A 		bne	.L268
1244:./src/main.c  **** 					// convert data bytes to ASCII
1245:./src/main.c  **** 					for (i=0;i<CanRxMsg.Len;++i) {
 3543              		.loc 1 1245 6 is_stmt 1 view .LVU1386
 3544 1008 00005EE3 		cmp	lr, #0
 3545              		.loc 1 1245 12 is_stmt 0 view .LVU1387
 3546 100c 7630C4E5 		strb	r3, [r4, #118]
 3547              		.loc 1 1245 15 is_stmt 1 view .LVU1388
 3548              		.loc 1 1245 6 is_stmt 0 view .LVU1389
 3549 1010 1400000A 		beq	.L269
 3550              	.L267:
 3551 1014 D4C29FE5 		ldr	ip, .L354+8
 3552 1018 01504EE2 		sub	r5, lr, #1
 3553 101c FF3005E2 		and	r3, r5, #255
 3554 1020 01508CE2 		add	r5, ip, #1
 3555 1024 43204CE2 		sub	r2, ip, #67
 3556 1028 035085E0 		add	r5, r5, r3
 3557              	.L274:
1246:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3558              		.loc 1 1246 7 is_stmt 1 view .LVU1390
 3559              	.LBB621:
 3560              	.LBB622:
  78:./src/main.c  **** 	}
 3561              		.loc 1 78 3 view .LVU1391
  82:./src/main.c  **** 	}
 3562              		.loc 1 82 3 view .LVU1392
 3563              	.LBE622:
 3564              	.LBE621:
 3565              		.loc 1 1246 51 is_stmt 0 view .LVU1393
 3566 102c 0130FCE5 		ldrb	r3, [ip, #1]!	@ zero_extendqisi2
 3567              	.LBB626:
 3568              	.LBB623:
  76:./src/main.c  **** 	{
 3569              		.loc 1 76 4 view .LVU1394
 3570 1030 9F0053E3 		cmp	r3, #159
 3571              	.LBE623:
 3572              	.LBE626:
 3573              		.loc 1 1246 26 view .LVU1395
 3574 1034 2312A0E1 		lsr	r1, r3, #4
 3575              	.LVL318:
 3576              	.LBB627:
 3577              	.LBI621:
  73:./src/main.c  **** {
 3578              		.loc 1 73 6 is_stmt 1 view .LVU1396
 3579              	.LBB624:
  75:./src/main.c  **** 	if(chr > 9)
 3580              		.loc 1 75 2 view .LVU1397
  76:./src/main.c  **** 	{
 3581              		.loc 1 76 2 view .LVU1398
 3582              	.LBE624:
 3583              	.LBE627:
1247:./src/main.c  **** 						SerXmtBuf[6+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 3584              		.loc 1 1247 26 is_stmt 0 view .LVU1399
 3585 1038 0F3003E2 		and	r3, r3, #15
 3586              	.LBB628:
 3587              	.LBB625:
  78:./src/main.c  **** 	}
 3588              		.loc 1 78 7 view .LVU1400
 3589 103c 37108182 		addhi	r1, r1, #55
 3590              	.LVL319:
  82:./src/main.c  **** 	}
 3591              		.loc 1 82 7 view .LVU1401
 3592 1040 30108192 		addls	r1, r1, #48
 3593              	.LVL320:
  84:./src/main.c  **** }
 3594              		.loc 1 84 2 is_stmt 1 view .LVU1402
  84:./src/main.c  **** }
 3595              		.loc 1 84 2 is_stmt 0 view .LVU1403
 3596              	.LBE625:
 3597              	.LBE628:
 3598              	.LBB629:
 3599              	.LBB630:
  78:./src/main.c  **** 	}
 3600              		.loc 1 78 3 is_stmt 1 view .LVU1404
  82:./src/main.c  **** 	}
 3601              		.loc 1 82 3 view .LVU1405
  76:./src/main.c  **** 	{
 3602              		.loc 1 76 4 is_stmt 0 view .LVU1406
 3603 1044 090053E3 		cmp	r3, #9
  78:./src/main.c  **** 	}
 3604              		.loc 1 78 7 view .LVU1407
 3605 1048 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 3606              		.loc 1 82 7 view .LVU1408
 3607 104c 30308392 		addls	r3, r3, #48
 3608              	.LBE630:
 3609              	.LBE629:
1245:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3610              		.loc 1 1245 6 view .LVU1409
 3611 1050 0C0055E1 		cmp	r5, ip
1246:./src/main.c  **** 						SerXmtBuf[6+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 3612              		.loc 1 1246 24 view .LVU1410
 3613 1054 0510C2E5 		strb	r1, [r2, #5]
 3614              		.loc 1 1247 7 is_stmt 1 view .LVU1411
 3615              	.LBB632:
 3616              	.LBI629:
  73:./src/main.c  **** {
 3617              		.loc 1 73 6 view .LVU1412
 3618              	.LBB631:
  75:./src/main.c  **** 	if(chr > 9)
 3619              		.loc 1 75 2 view .LVU1413
  76:./src/main.c  **** 	{
 3620              		.loc 1 76 2 view .LVU1414
 3621              	.LVL321:
  84:./src/main.c  **** }
 3622              		.loc 1 84 2 view .LVU1415
  84:./src/main.c  **** }
 3623              		.loc 1 84 2 is_stmt 0 view .LVU1416
 3624              	.LBE631:
 3625              	.LBE632:
 3626              		.loc 1 1247 24 view .LVU1417
 3627 1058 0630C2E5 		strb	r3, [r2, #6]
1245:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3628              		.loc 1 1245 30 is_stmt 1 view .LVU1418
1245:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3629              		.loc 1 1245 15 view .LVU1419
1245:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3630              		.loc 1 1245 6 is_stmt 0 view .LVU1420
 3631 105c 022082E2 		add	r2, r2, #2
 3632 1060 F1FFFF1A 		bne	.L274
 3633 1064 76E0C4E5 		strb	lr, [r4, #118]
 3634              	.L269:
1248:./src/main.c  **** 					}
1249:./src/main.c  **** 					SerXmtBufPtr = 5 + (CanRxMsg.Len *2);
 3635              		.loc 1 1249 6 is_stmt 1 view .LVU1421
 3636              		.loc 1 1249 23 is_stmt 0 view .LVU1422
 3637 1068 8E30A0E1 		lsl	r3, lr, #1
 3638 106c 053083E2 		add	r3, r3, #5
 3639 1070 FF3003E2 		and	r3, r3, #255
1250:./src/main.c  **** 				}
1251:./src/main.c  **** 				else { // is RTR: no data
1252:./src/main.c  **** 					SerXmtBufPtr = 5;
1253:./src/main.c  **** 				}
1254:./src/main.c  **** 
1255:./src/main.c  **** 				// append timestamp, if enabled
1256:./src/main.c  **** 				if (CanRcvTimestampOn == 1) {
1257:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 3640              		.loc 1 1257 15 view .LVU1423
 3641 1074 0310A0E1 		mov	r1, r3
 3642 1078 430000EA 		b	.L309
 3643              	.L352:
 3644              	.LBE603:
 3645              	.LBE602:
1216:./src/main.c  **** 			// Repeat sending last ASCII string to RS232 UART (Host-PC)
 3646              		.loc 1 1216 4 is_stmt 1 view .LVU1424
1218:./src/main.c  **** 			return;
 3647              		.loc 1 1218 22 is_stmt 0 view .LVU1425
 3648 107c 0000A0E3 		mov	r0, #0
 3649 1080 4920D4E5 		ldrb	r2, [r4, #73]	@ zero_extendqisi2
 3650 1084 281084E2 		add	r1, r4, #40
1216:./src/main.c  **** 			// Repeat sending last ASCII string to RS232 UART (Host-PC)
 3651              		.loc 1 1216 28 view .LVU1426
 3652 1088 5C30C4E5 		strb	r3, [r4, #92]
1218:./src/main.c  **** 			return;
 3653              		.loc 1 1218 4 is_stmt 1 view .LVU1427
1218:./src/main.c  **** 			return;
 3654              		.loc 1 1218 22 is_stmt 0 view .LVU1428
 3655 108c FEFFFFEB 		bl	SER_Write
 3656              	.LVL322:
1218:./src/main.c  **** 			return;
 3657              		.loc 1 1218 20 view .LVU1429
 3658 1090 600084E5 		str	r0, [r4, #96]
1219:./src/main.c  **** 		}
 3659              		.loc 1 1219 4 is_stmt 1 view .LVU1430
 3660              	.L255:
1258:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
1259:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
1260:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
1261:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
1262:./src/main.c  **** 				}   
1263:./src/main.c  **** 	
1264:./src/main.c  **** 				SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
1265:./src/main.c  **** 				SerXmtBufPtr ++;
1266:./src/main.c  **** 
1267:./src/main.c  **** 				// Send ASCII string to RS232 UART (Host-PC)
1268:./src/main.c  **** 				UARTWriteResult = SER_Write ( SER_PORT1, &SerXmtBuf[0], SerXmtBufPtr);
1269:./src/main.c  **** 			} // IF Id=not Extended
1270:./src/main.c  **** 			//-------------------------------------------------
1271:./src/main.c  **** 
1272:./src/main.c  **** 			else { // Id = EXTENDED 29 bit
1273:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
1274:./src/main.c  **** 					SerXmtBuf[0] = 'T';
1275:./src/main.c  **** 				}
1276:./src/main.c  **** 				else { // is 29 bit RTR	
1277:./src/main.c  **** 					SerXmtBuf[0] = 'R';
1278:./src/main.c  **** 				}
1279:./src/main.c  **** 				SerXmtBufPtr++;
1280:./src/main.c  **** 				// 29 bit Id
1281:./src/main.c  **** 				SerXmtBuf[1] = hex2ascii((CanRxMsg.Id & 0x10000000)>>28);
1282:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
1283:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
1284:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
1285:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
1286:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
1287:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
1288:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
1289:./src/main.c  **** 				// DLC
1290:./src/main.c  **** 				SerXmtBuf[9] = hex2ascii(CanRxMsg.Len);
1291:./src/main.c  **** 				// data bytes
1292:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
1293:./src/main.c  **** 					// convert data bytes to ASCII
1294:./src/main.c  **** 					for (i=0;i<CanRxMsg.Len;++i) {
1295:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
1296:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
1297:./src/main.c  **** 					}
1298:./src/main.c  **** 					SerXmtBufPtr = 10 + (CanRxMsg.Len *2);
1299:./src/main.c  **** 				}
1300:./src/main.c  **** 				else { // is RTR: no data
1301:./src/main.c  **** 					SerXmtBufPtr = 10;
1302:./src/main.c  **** 				}
1303:./src/main.c  **** 				// append timestamp, if enabled
1304:./src/main.c  **** 				if (CanRcvTimestampOn == 1) {
1305:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
1306:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
1308:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
1309:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
1310:./src/main.c  **** 				}   
1311:./src/main.c  **** 
1312:./src/main.c  **** 				SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
1313:./src/main.c  **** 				SerXmtBufPtr ++;
1314:./src/main.c  **** 
1315:./src/main.c  **** 				// Send ASCII string to RS232 UART (Host-PC)
1316:./src/main.c  **** 				UARTWriteResult = SER_Write ( SER_PORT1, &SerXmtBuf[0], SerXmtBufPtr);
1317:./src/main.c  **** 			} // IF Id=Extended
1318:./src/main.c  **** 			//-------------------------------------------------
1319:./src/main.c  **** 		} // IF Can read
1320:./src/main.c  **** 	} // IF auto poll auto send
1321:./src/main.c  **** }
 3661              		.loc 1 1321 1 is_stmt 0 view .LVU1431
 3662 1094 7040BDE8 		pop	{r4, r5, r6, lr}
 3663              	.LCFI6:
 3664              		.cfi_remember_state
 3665              		.cfi_restore 14
 3666              		.cfi_restore 6
 3667              		.cfi_restore 5
 3668              		.cfi_restore 4
 3669              		.cfi_def_cfa_offset 0
 3670 1098 1EFF2FE1 		bx	lr
 3671              	.L260:
 3672              	.LCFI7:
 3673              		.cfi_restore_state
 3674              	.LBB704:
 3675              	.LBB702:
1273:./src/main.c  **** 					SerXmtBuf[0] = 'T';
 3676              		.loc 1 1273 5 is_stmt 1 view .LVU1432
1274:./src/main.c  **** 				}
 3677              		.loc 1 1274 19 is_stmt 0 view .LVU1433
 3678 109c 012013E2 		ands	r2, r3, #1
 3679 10a0 52C0A013 		movne	ip, #82
 3680 10a4 54C0A003 		moveq	ip, #84
1281:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3681              		.loc 1 1281 39 view .LVU1434
 3682 10a8 683094E5 		ldr	r3, [r4, #104]
1281:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3683              		.loc 1 1281 56 view .LVU1435
 3684 10ac 231EA0E1 		lsr	r1, r3, #28
1281:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3685              		.loc 1 1281 20 view .LVU1436
 3686 10b0 011001E2 		and	r1, r1, #1
 3687              	.LBB633:
 3688              	.LBB634:
  82:./src/main.c  **** 	}
 3689              		.loc 1 82 7 view .LVU1437
 3690 10b4 301081E2 		add	r1, r1, #48
 3691              	.LBE634:
 3692              	.LBE633:
1281:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3693              		.loc 1 1281 18 view .LVU1438
 3694 10b8 2910C4E5 		strb	r1, [r4, #41]
1282:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3695              		.loc 1 1282 56 view .LVU1439
 3696 10bc 231CA0E1 		lsr	r1, r3, #24
1282:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3697              		.loc 1 1282 20 view .LVU1440
 3698 10c0 0F1001E2 		and	r1, r1, #15
 3699              	.LBB636:
 3700              	.LBB637:
  76:./src/main.c  **** 	{
 3701              		.loc 1 76 4 view .LVU1441
 3702 10c4 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3703              		.loc 1 78 7 view .LVU1442
 3704 10c8 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3705              		.loc 1 82 7 view .LVU1443
 3706 10cc 30108192 		addls	r1, r1, #48
 3707              	.LBE637:
 3708              	.LBE636:
1282:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3709              		.loc 1 1282 18 view .LVU1444
 3710 10d0 2A10C4E5 		strb	r1, [r4, #42]
1283:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3711              		.loc 1 1283 56 view .LVU1445
 3712 10d4 231AA0E1 		lsr	r1, r3, #20
1283:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3713              		.loc 1 1283 20 view .LVU1446
 3714 10d8 0F1001E2 		and	r1, r1, #15
 3715              	.LBB639:
 3716              	.LBB640:
  76:./src/main.c  **** 	{
 3717              		.loc 1 76 4 view .LVU1447
 3718 10dc 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3719              		.loc 1 78 7 view .LVU1448
 3720 10e0 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3721              		.loc 1 82 7 view .LVU1449
 3722 10e4 30108192 		addls	r1, r1, #48
 3723              	.LBE640:
 3724              	.LBE639:
1283:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3725              		.loc 1 1283 18 view .LVU1450
 3726 10e8 2B10C4E5 		strb	r1, [r4, #43]
1284:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3727              		.loc 1 1284 56 view .LVU1451
 3728 10ec 2318A0E1 		lsr	r1, r3, #16
1284:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3729              		.loc 1 1284 20 view .LVU1452
 3730 10f0 0F1001E2 		and	r1, r1, #15
 3731              	.LBB642:
 3732              	.LBB643:
  76:./src/main.c  **** 	{
 3733              		.loc 1 76 4 view .LVU1453
 3734 10f4 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3735              		.loc 1 78 7 view .LVU1454
 3736 10f8 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3737              		.loc 1 82 7 view .LVU1455
 3738 10fc 30108192 		addls	r1, r1, #48
 3739              	.LBE643:
 3740              	.LBE642:
1284:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3741              		.loc 1 1284 18 view .LVU1456
 3742 1100 2C10C4E5 		strb	r1, [r4, #44]
1285:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3743              		.loc 1 1285 56 view .LVU1457
 3744 1104 2316A0E1 		lsr	r1, r3, #12
1285:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3745              		.loc 1 1285 20 view .LVU1458
 3746 1108 0F1001E2 		and	r1, r1, #15
 3747              	.LBB645:
 3748              	.LBB646:
  76:./src/main.c  **** 	{
 3749              		.loc 1 76 4 view .LVU1459
 3750 110c 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3751              		.loc 1 78 7 view .LVU1460
 3752 1110 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3753              		.loc 1 82 7 view .LVU1461
 3754 1114 30108192 		addls	r1, r1, #48
 3755              	.LBE646:
 3756              	.LBE645:
1285:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3757              		.loc 1 1285 18 view .LVU1462
 3758 1118 2D10C4E5 		strb	r1, [r4, #45]
1286:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3759              		.loc 1 1286 56 view .LVU1463
 3760 111c 2314A0E1 		lsr	r1, r3, #8
1286:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3761              		.loc 1 1286 20 view .LVU1464
 3762 1120 0F1001E2 		and	r1, r1, #15
 3763              	.LBB648:
 3764              	.LBB649:
  76:./src/main.c  **** 	{
 3765              		.loc 1 76 4 view .LVU1465
 3766 1124 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3767              		.loc 1 78 7 view .LVU1466
 3768 1128 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3769              		.loc 1 82 7 view .LVU1467
 3770 112c 30108192 		addls	r1, r1, #48
 3771              	.LBE649:
 3772              	.LBE648:
1286:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3773              		.loc 1 1286 18 view .LVU1468
 3774 1130 2E10C4E5 		strb	r1, [r4, #46]
1287:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3775              		.loc 1 1287 56 view .LVU1469
 3776 1134 2312A0E1 		lsr	r1, r3, #4
1287:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3777              		.loc 1 1287 20 view .LVU1470
 3778 1138 0F1001E2 		and	r1, r1, #15
1288:./src/main.c  **** 				// DLC
 3779              		.loc 1 1288 20 view .LVU1471
 3780 113c 0F3003E2 		and	r3, r3, #15
 3781              	.LBB651:
 3782              	.LBB652:
  76:./src/main.c  **** 	{
 3783              		.loc 1 76 4 view .LVU1472
 3784 1140 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3785              		.loc 1 78 7 view .LVU1473
 3786 1144 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3787              		.loc 1 82 7 view .LVU1474
 3788 1148 30108192 		addls	r1, r1, #48
 3789 114c 28C0C4E5 		strb	ip, [r4, #40]
 3790              	.LBE652:
 3791              	.LBE651:
1279:./src/main.c  **** 				// 29 bit Id
 3792              		.loc 1 1279 5 is_stmt 1 view .LVU1475
1281:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3793              		.loc 1 1281 5 view .LVU1476
 3794              	.LBB654:
 3795              	.LBI633:
  73:./src/main.c  **** {
 3796              		.loc 1 73 6 view .LVU1477
 3797              	.LBB635:
  75:./src/main.c  **** 	if(chr > 9)
 3798              		.loc 1 75 2 view .LVU1478
  76:./src/main.c  **** 	{
 3799              		.loc 1 76 2 view .LVU1479
  82:./src/main.c  **** 	}
 3800              		.loc 1 82 3 view .LVU1480
  84:./src/main.c  **** }
 3801              		.loc 1 84 2 view .LVU1481
 3802              	.LBE635:
 3803              	.LBE654:
1282:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3804              		.loc 1 1282 5 view .LVU1482
 3805              	.LBB655:
 3806              	.LBI636:
  73:./src/main.c  **** {
 3807              		.loc 1 73 6 view .LVU1483
 3808              	.LBB638:
  75:./src/main.c  **** 	if(chr > 9)
 3809              		.loc 1 75 2 view .LVU1484
  76:./src/main.c  **** 	{
 3810              		.loc 1 76 2 view .LVU1485
  78:./src/main.c  **** 	}
 3811              		.loc 1 78 3 view .LVU1486
  82:./src/main.c  **** 	}
 3812              		.loc 1 82 3 view .LVU1487
  84:./src/main.c  **** }
 3813              		.loc 1 84 2 view .LVU1488
 3814              	.LBE638:
 3815              	.LBE655:
1283:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3816              		.loc 1 1283 5 view .LVU1489
 3817              	.LBB656:
 3818              	.LBI639:
  73:./src/main.c  **** {
 3819              		.loc 1 73 6 view .LVU1490
 3820              	.LBB641:
  75:./src/main.c  **** 	if(chr > 9)
 3821              		.loc 1 75 2 view .LVU1491
  76:./src/main.c  **** 	{
 3822              		.loc 1 76 2 view .LVU1492
  78:./src/main.c  **** 	}
 3823              		.loc 1 78 3 view .LVU1493
  82:./src/main.c  **** 	}
 3824              		.loc 1 82 3 view .LVU1494
  84:./src/main.c  **** }
 3825              		.loc 1 84 2 view .LVU1495
 3826              	.LBE641:
 3827              	.LBE656:
1284:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3828              		.loc 1 1284 5 view .LVU1496
 3829              	.LBB657:
 3830              	.LBI642:
  73:./src/main.c  **** {
 3831              		.loc 1 73 6 view .LVU1497
 3832              	.LBB644:
  75:./src/main.c  **** 	if(chr > 9)
 3833              		.loc 1 75 2 view .LVU1498
  76:./src/main.c  **** 	{
 3834              		.loc 1 76 2 view .LVU1499
  78:./src/main.c  **** 	}
 3835              		.loc 1 78 3 view .LVU1500
  82:./src/main.c  **** 	}
 3836              		.loc 1 82 3 view .LVU1501
  84:./src/main.c  **** }
 3837              		.loc 1 84 2 view .LVU1502
 3838              	.LBE644:
 3839              	.LBE657:
1285:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3840              		.loc 1 1285 5 view .LVU1503
 3841              	.LBB658:
 3842              	.LBI645:
  73:./src/main.c  **** {
 3843              		.loc 1 73 6 view .LVU1504
 3844              	.LBB647:
  75:./src/main.c  **** 	if(chr > 9)
 3845              		.loc 1 75 2 view .LVU1505
  76:./src/main.c  **** 	{
 3846              		.loc 1 76 2 view .LVU1506
  78:./src/main.c  **** 	}
 3847              		.loc 1 78 3 view .LVU1507
  82:./src/main.c  **** 	}
 3848              		.loc 1 82 3 view .LVU1508
  84:./src/main.c  **** }
 3849              		.loc 1 84 2 view .LVU1509
 3850              	.LBE647:
 3851              	.LBE658:
1286:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3852              		.loc 1 1286 5 view .LVU1510
 3853              	.LBB659:
 3854              	.LBI648:
  73:./src/main.c  **** {
 3855              		.loc 1 73 6 view .LVU1511
 3856              	.LBB650:
  75:./src/main.c  **** 	if(chr > 9)
 3857              		.loc 1 75 2 view .LVU1512
  76:./src/main.c  **** 	{
 3858              		.loc 1 76 2 view .LVU1513
  78:./src/main.c  **** 	}
 3859              		.loc 1 78 3 view .LVU1514
  82:./src/main.c  **** 	}
 3860              		.loc 1 82 3 view .LVU1515
  84:./src/main.c  **** }
 3861              		.loc 1 84 2 view .LVU1516
 3862              	.LBE650:
 3863              	.LBE659:
1287:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3864              		.loc 1 1287 5 view .LVU1517
 3865              	.LBB660:
 3866              	.LBI651:
  73:./src/main.c  **** {
 3867              		.loc 1 73 6 view .LVU1518
 3868              	.LBB653:
  75:./src/main.c  **** 	if(chr > 9)
 3869              		.loc 1 75 2 view .LVU1519
  76:./src/main.c  **** 	{
 3870              		.loc 1 76 2 view .LVU1520
  78:./src/main.c  **** 	}
 3871              		.loc 1 78 3 view .LVU1521
  82:./src/main.c  **** 	}
 3872              		.loc 1 82 3 view .LVU1522
 3873              	.LVL323:
  84:./src/main.c  **** }
 3874              		.loc 1 84 2 view .LVU1523
  84:./src/main.c  **** }
 3875              		.loc 1 84 2 is_stmt 0 view .LVU1524
 3876              	.LBE653:
 3877              	.LBE660:
 3878              	.LBB661:
 3879              	.LBB662:
  76:./src/main.c  **** 	{
 3880              		.loc 1 76 4 view .LVU1525
 3881 1150 090053E3 		cmp	r3, #9
 3882              	.LBE662:
 3883              	.LBE661:
1290:./src/main.c  **** 				// data bytes
 3884              		.loc 1 1290 20 view .LVU1526
 3885 1154 67C0D4E5 		ldrb	ip, [r4, #103]	@ zero_extendqisi2
 3886              	.LBB665:
 3887              	.LBB663:
  78:./src/main.c  **** 	}
 3888              		.loc 1 78 7 view .LVU1527
 3889 1158 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 3890              		.loc 1 82 7 view .LVU1528
 3891 115c 30308392 		addls	r3, r3, #48
 3892              	.LBE663:
 3893              	.LBE665:
1288:./src/main.c  **** 				// DLC
 3894              		.loc 1 1288 18 view .LVU1529
 3895 1160 3030C4E5 		strb	r3, [r4, #48]
 3896              	.LBB666:
 3897              	.LBB667:
  75:./src/main.c  **** 	if(chr > 9)
 3898              		.loc 1 75 6 view .LVU1530
 3899 1164 0F300CE2 		and	r3, ip, #15
  76:./src/main.c  **** 	{
 3900              		.loc 1 76 4 view .LVU1531
 3901 1168 090053E3 		cmp	r3, #9
 3902              	.LBE667:
 3903              	.LBE666:
1287:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3904              		.loc 1 1287 18 view .LVU1532
 3905 116c 2F10C4E5 		strb	r1, [r4, #47]
1288:./src/main.c  **** 				// DLC
 3906              		.loc 1 1288 5 is_stmt 1 view .LVU1533
 3907              	.LBB670:
 3908              	.LBI661:
  73:./src/main.c  **** {
 3909              		.loc 1 73 6 view .LVU1534
 3910              	.LBB664:
  75:./src/main.c  **** 	if(chr > 9)
 3911              		.loc 1 75 2 view .LVU1535
  76:./src/main.c  **** 	{
 3912              		.loc 1 76 2 view .LVU1536
  78:./src/main.c  **** 	}
 3913              		.loc 1 78 3 view .LVU1537
  82:./src/main.c  **** 	}
 3914              		.loc 1 82 3 view .LVU1538
  84:./src/main.c  **** }
 3915              		.loc 1 84 2 view .LVU1539
 3916              	.LBE664:
 3917              	.LBE670:
1290:./src/main.c  **** 				// data bytes
 3918              		.loc 1 1290 5 view .LVU1540
 3919              	.LVL324:
 3920              	.LBB671:
 3921              	.LBI666:
  73:./src/main.c  **** {
 3922              		.loc 1 73 6 view .LVU1541
 3923              	.LBB668:
  75:./src/main.c  **** 	if(chr > 9)
 3924              		.loc 1 75 2 view .LVU1542
  76:./src/main.c  **** 	{
 3925              		.loc 1 76 2 view .LVU1543
  76:./src/main.c  **** 	{
 3926              		.loc 1 76 4 is_stmt 0 view .LVU1544
 3927 1170 3400009A 		bls	.L300
  78:./src/main.c  **** 	}
 3928              		.loc 1 78 3 is_stmt 1 view .LVU1545
 3929              	.LVL325:
  84:./src/main.c  **** }
 3930              		.loc 1 84 2 view .LVU1546
  78:./src/main.c  **** 	}
 3931              		.loc 1 78 7 is_stmt 0 view .LVU1547
 3932 1174 373083E2 		add	r3, r3, #55
 3933              	.LBE668:
 3934              	.LBE671:
1292:./src/main.c  **** 					// convert data bytes to ASCII
 3935              		.loc 1 1292 8 view .LVU1548
 3936 1178 000052E3 		cmp	r2, #0
1290:./src/main.c  **** 				// data bytes
 3937              		.loc 1 1290 18 view .LVU1549
 3938 117c 3130C4E5 		strb	r3, [r4, #49]
1292:./src/main.c  **** 					// convert data bytes to ASCII
 3939              		.loc 1 1292 5 is_stmt 1 view .LVU1550
1292:./src/main.c  **** 					// convert data bytes to ASCII
 3940              		.loc 1 1292 8 is_stmt 0 view .LVU1551
 3941 1180 3700000A 		beq	.L301
 3942              	.L302:
1301:./src/main.c  **** 				}
 3943              		.loc 1 1301 6 is_stmt 1 view .LVU1552
1301:./src/main.c  **** 				}
 3944              		.loc 1 1301 19 is_stmt 0 view .LVU1553
 3945 1184 0A10A0E3 		mov	r1, #10
 3946 1188 0130A0E1 		mov	r3, r1
 3947              	.L309:
1304:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 3948              		.loc 1 1304 5 is_stmt 1 view .LVU1554
1304:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 3949              		.loc 1 1304 8 is_stmt 0 view .LVU1555
 3950 118c 5E20D4E5 		ldrb	r2, [r4, #94]	@ zero_extendqisi2
 3951 1190 010052E3 		cmp	r2, #1
 3952 1194 1F00001A 		bne	.L310
1305:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 3953              		.loc 1 1305 6 is_stmt 1 view .LVU1556
1305:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 3954              		.loc 1 1305 34 is_stmt 0 view .LVU1557
 3955 1198 20C6A0E1 		lsr	ip, r0, #12
 3956              	.LVL326:
 3957              	.LBB672:
 3958              	.LBI672:
  73:./src/main.c  **** {
 3959              		.loc 1 73 6 is_stmt 1 view .LVU1558
 3960              	.LBB673:
  75:./src/main.c  **** 	if(chr > 9)
 3961              		.loc 1 75 2 view .LVU1559
  76:./src/main.c  **** 	{
 3962              		.loc 1 76 2 view .LVU1560
  78:./src/main.c  **** 	}
 3963              		.loc 1 78 3 view .LVU1561
  76:./src/main.c  **** 	{
 3964              		.loc 1 76 4 is_stmt 0 view .LVU1562
 3965 119c 0A0A50E3 		cmp	r0, #40960
 3966              	.LBE673:
 3967              	.LBE672:
1306:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3968              		.loc 1 1306 64 view .LVU1563
 3969 11a0 4024A0E1 		asr	r2, r0, #8
1306:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3970              		.loc 1 1306 34 view .LVU1564
 3971 11a4 0F2002E2 		and	r2, r2, #15
 3972              	.LBB675:
 3973              	.LBB674:
  78:./src/main.c  **** 	}
 3974              		.loc 1 78 7 view .LVU1565
 3975 11a8 37C08C22 		addcs	ip, ip, #55
 3976              	.LVL327:
  82:./src/main.c  **** 	}
 3977              		.loc 1 82 3 is_stmt 1 view .LVU1566
  82:./src/main.c  **** 	}
 3978              		.loc 1 82 7 is_stmt 0 view .LVU1567
 3979 11ac 30C08C32 		addcc	ip, ip, #48
 3980              	.LVL328:
  84:./src/main.c  **** }
 3981              		.loc 1 84 2 is_stmt 1 view .LVU1568
  84:./src/main.c  **** }
 3982              		.loc 1 84 2 is_stmt 0 view .LVU1569
 3983              	.LBE674:
 3984              	.LBE675:
1305:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 3985              		.loc 1 1305 32 view .LVU1570
 3986 11b0 01E084E0 		add	lr, r4, r1
 3987 11b4 28C0CEE5 		strb	ip, [lr, #40]
1306:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3988              		.loc 1 1306 6 is_stmt 1 view .LVU1571
 3989              	.LBB676:
 3990              	.LBB677:
  76:./src/main.c  **** 	{
 3991              		.loc 1 76 4 is_stmt 0 view .LVU1572
 3992 11b8 090052E3 		cmp	r2, #9
 3993              	.LBE677:
 3994              	.LBE676:
1306:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3995              		.loc 1 1306 28 view .LVU1573
 3996 11bc 01C081E2 		add	ip, r1, #1
 3997              	.LVL329:
 3998              	.LBB679:
 3999              	.LBI676:
  73:./src/main.c  **** {
 4000              		.loc 1 73 6 is_stmt 1 view .LVU1574
 4001              	.LBB678:
  75:./src/main.c  **** 	if(chr > 9)
 4002              		.loc 1 75 2 view .LVU1575
  76:./src/main.c  **** 	{
 4003              		.loc 1 76 2 view .LVU1576
  78:./src/main.c  **** 	}
 4004              		.loc 1 78 3 view .LVU1577
  78:./src/main.c  **** 	}
 4005              		.loc 1 78 7 is_stmt 0 view .LVU1578
 4006 11c0 37208282 		addhi	r2, r2, #55
 4007              	.LVL330:
  82:./src/main.c  **** 	}
 4008              		.loc 1 82 3 is_stmt 1 view .LVU1579
  82:./src/main.c  **** 	}
 4009              		.loc 1 82 7 is_stmt 0 view .LVU1580
 4010 11c4 30208292 		addls	r2, r2, #48
 4011              	.LVL331:
  84:./src/main.c  **** }
 4012              		.loc 1 84 2 is_stmt 1 view .LVU1581
  84:./src/main.c  **** }
 4013              		.loc 1 84 2 is_stmt 0 view .LVU1582
 4014              	.LBE678:
 4015              	.LBE679:
1306:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 4016              		.loc 1 1306 32 view .LVU1583
 4017 11c8 0CC084E0 		add	ip, r4, ip
 4018 11cc 2820CCE5 		strb	r2, [ip, #40]
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4019              		.loc 1 1307 6 is_stmt 1 view .LVU1584
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4020              		.loc 1 1307 64 is_stmt 0 view .LVU1585
 4021 11d0 4022A0E1 		asr	r2, r0, #4
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4022              		.loc 1 1307 34 view .LVU1586
 4023 11d4 0F2002E2 		and	r2, r2, #15
 4024              	.LBB680:
 4025              	.LBB681:
  76:./src/main.c  **** 	{
 4026              		.loc 1 76 4 view .LVU1587
 4027 11d8 090052E3 		cmp	r2, #9
 4028              	.LBE681:
 4029              	.LBE680:
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4030              		.loc 1 1307 28 view .LVU1588
 4031 11dc 02C081E2 		add	ip, r1, #2
 4032              	.LVL332:
 4033              	.LBB684:
 4034              	.LBI680:
  73:./src/main.c  **** {
 4035              		.loc 1 73 6 is_stmt 1 view .LVU1589
 4036              	.LBB682:
  75:./src/main.c  **** 	if(chr > 9)
 4037              		.loc 1 75 2 view .LVU1590
  76:./src/main.c  **** 	{
 4038              		.loc 1 76 2 view .LVU1591
  78:./src/main.c  **** 	}
 4039              		.loc 1 78 3 view .LVU1592
 4040              	.LBE682:
 4041              	.LBE684:
1309:./src/main.c  **** 				}   
 4042              		.loc 1 1309 34 is_stmt 0 view .LVU1593
 4043 11e0 043083E2 		add	r3, r3, #4
 4044              	.LBB685:
 4045              	.LBB683:
  78:./src/main.c  **** 	}
 4046              		.loc 1 78 7 view .LVU1594
 4047 11e4 37208282 		addhi	r2, r2, #55
 4048              	.LVL333:
  82:./src/main.c  **** 	}
 4049              		.loc 1 82 3 is_stmt 1 view .LVU1595
  82:./src/main.c  **** 	}
 4050              		.loc 1 82 7 is_stmt 0 view .LVU1596
 4051 11e8 30208292 		addls	r2, r2, #48
 4052              	.LVL334:
  84:./src/main.c  **** }
 4053              		.loc 1 84 2 is_stmt 1 view .LVU1597
  84:./src/main.c  **** }
 4054              		.loc 1 84 2 is_stmt 0 view .LVU1598
 4055              	.LBE683:
 4056              	.LBE685:
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4057              		.loc 1 1307 32 view .LVU1599
 4058 11ec 0CC084E0 		add	ip, r4, ip
1309:./src/main.c  **** 				}   
 4059              		.loc 1 1309 34 view .LVU1600
 4060 11f0 FF3003E2 		and	r3, r3, #255
1307:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4061              		.loc 1 1307 32 view .LVU1601
 4062 11f4 2820CCE5 		strb	r2, [ip, #40]
1308:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4063              		.loc 1 1308 6 is_stmt 1 view .LVU1602
1308:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4064              		.loc 1 1308 28 is_stmt 0 view .LVU1603
 4065 11f8 032081E2 		add	r2, r1, #3
1312:./src/main.c  **** 				SerXmtBufPtr ++;
 4066              		.loc 1 1312 14 view .LVU1604
 4067 11fc 0310A0E1 		mov	r1, r3
1308:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4068              		.loc 1 1308 34 view .LVU1605
 4069 1200 0F0000E2 		and	r0, r0, #15
 4070              	.LVL335:
 4071              	.LBB686:
 4072              	.LBI686:
  73:./src/main.c  **** {
 4073              		.loc 1 73 6 is_stmt 1 view .LVU1606
 4074              	.LBB687:
  75:./src/main.c  **** 	if(chr > 9)
 4075              		.loc 1 75 2 view .LVU1607
  76:./src/main.c  **** 	{
 4076              		.loc 1 76 2 view .LVU1608
  78:./src/main.c  **** 	}
 4077              		.loc 1 78 3 view .LVU1609
  76:./src/main.c  **** 	{
 4078              		.loc 1 76 4 is_stmt 0 view .LVU1610
 4079 1204 090050E3 		cmp	r0, #9
  78:./src/main.c  **** 	}
 4080              		.loc 1 78 7 view .LVU1611
 4081 1208 37008082 		addhi	r0, r0, #55
 4082              	.LVL336:
  82:./src/main.c  **** 	}
 4083              		.loc 1 82 3 is_stmt 1 view .LVU1612
  82:./src/main.c  **** 	}
 4084              		.loc 1 82 7 is_stmt 0 view .LVU1613
 4085 120c 30008092 		addls	r0, r0, #48
 4086              	.LVL337:
  84:./src/main.c  **** }
 4087              		.loc 1 84 2 is_stmt 1 view .LVU1614
  84:./src/main.c  **** }
 4088              		.loc 1 84 2 is_stmt 0 view .LVU1615
 4089              	.LBE687:
 4090              	.LBE686:
1308:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4091              		.loc 1 1308 32 view .LVU1616
 4092 1210 022084E0 		add	r2, r4, r2
 4093 1214 2800C2E5 		strb	r0, [r2, #40]
1309:./src/main.c  **** 				}   
 4094              		.loc 1 1309 6 is_stmt 1 view .LVU1617
 4095              	.L310:
1312:./src/main.c  **** 				SerXmtBufPtr ++;
 4096              		.loc 1 1312 5 view .LVU1618
1312:./src/main.c  **** 				SerXmtBufPtr ++;
 4097              		.loc 1 1312 29 is_stmt 0 view .LVU1619
 4098 1218 0DC0A0E3 		mov	ip, #13
1313:./src/main.c  **** 
 4099              		.loc 1 1313 18 view .LVU1620
 4100 121c 013083E2 		add	r3, r3, #1
 4101 1220 FF2003E2 		and	r2, r3, #255
1312:./src/main.c  **** 				SerXmtBufPtr ++;
 4102              		.loc 1 1312 29 view .LVU1621
 4103 1224 013084E0 		add	r3, r4, r1
1313:./src/main.c  **** 
 4104              		.loc 1 1313 18 view .LVU1622
 4105 1228 4920C4E5 		strb	r2, [r4, #73]
1316:./src/main.c  **** 			} // IF Id=Extended
 4106              		.loc 1 1316 23 view .LVU1623
 4107 122c 0000A0E3 		mov	r0, #0
 4108 1230 BC109FE5 		ldr	r1, .L354+12
1312:./src/main.c  **** 				SerXmtBufPtr ++;
 4109              		.loc 1 1312 29 view .LVU1624
 4110 1234 28C0C3E5 		strb	ip, [r3, #40]
1313:./src/main.c  **** 
 4111              		.loc 1 1313 5 is_stmt 1 view .LVU1625
1316:./src/main.c  **** 			} // IF Id=Extended
 4112              		.loc 1 1316 5 view .LVU1626
1316:./src/main.c  **** 			} // IF Id=Extended
 4113              		.loc 1 1316 23 is_stmt 0 view .LVU1627
 4114 1238 FEFFFFEB 		bl	SER_Write
 4115              	.LVL338:
1316:./src/main.c  **** 			} // IF Id=Extended
 4116              		.loc 1 1316 21 view .LVU1628
 4117 123c 600084E5 		str	r0, [r4, #96]
 4118              	.LBE702:
 4119              	.LBE704:
 4120              		.loc 1 1321 1 view .LVU1629
 4121 1240 7040BDE8 		pop	{r4, r5, r6, lr}
 4122              	.LCFI8:
 4123              		.cfi_remember_state
 4124              		.cfi_restore 14
 4125              		.cfi_restore 6
 4126              		.cfi_restore 5
 4127              		.cfi_restore 4
 4128              		.cfi_def_cfa_offset 0
 4129 1244 1EFF2FE1 		bx	lr
 4130              	.LVL339:
 4131              	.L300:
 4132              	.LCFI9:
 4133              		.cfi_restore_state
 4134              	.LBB705:
 4135              	.LBB703:
 4136              	.LBB688:
 4137              	.LBB669:
  82:./src/main.c  **** 	}
 4138              		.loc 1 82 3 is_stmt 1 view .LVU1630
  84:./src/main.c  **** }
 4139              		.loc 1 84 2 view .LVU1631
  82:./src/main.c  **** 	}
 4140              		.loc 1 82 7 is_stmt 0 view .LVU1632
 4141 1248 303083E2 		add	r3, r3, #48
 4142              	.LBE669:
 4143              	.LBE688:
1292:./src/main.c  **** 					// convert data bytes to ASCII
 4144              		.loc 1 1292 8 view .LVU1633
 4145 124c 000052E3 		cmp	r2, #0
1290:./src/main.c  **** 				// data bytes
 4146              		.loc 1 1290 18 view .LVU1634
 4147 1250 3130C4E5 		strb	r3, [r4, #49]
1292:./src/main.c  **** 					// convert data bytes to ASCII
 4148              		.loc 1 1292 5 is_stmt 1 view .LVU1635
1292:./src/main.c  **** 					// convert data bytes to ASCII
 4149              		.loc 1 1292 8 is_stmt 0 view .LVU1636
 4150 1254 CAFFFF1A 		bne	.L302
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4151              		.loc 1 1294 6 is_stmt 1 view .LVU1637
 4152 1258 00005CE3 		cmp	ip, #0
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4153              		.loc 1 1294 12 is_stmt 0 view .LVU1638
 4154 125c 7620C4E5 		strb	r2, [r4, #118]
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4155              		.loc 1 1294 15 is_stmt 1 view .LVU1639
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4156              		.loc 1 1294 6 is_stmt 0 view .LVU1640
 4157 1260 1400000A 		beq	.L303
 4158              	.L301:
 4159 1264 84E09FE5 		ldr	lr, .L354+8
 4160 1268 01504CE2 		sub	r5, ip, #1
 4161 126c FF5005E2 		and	r5, r5, #255
 4162 1270 01308EE2 		add	r3, lr, #1
 4163 1274 43204EE2 		sub	r2, lr, #67
 4164 1278 035085E0 		add	r5, r5, r3
 4165              	.L308:
1295:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4166              		.loc 1 1295 7 is_stmt 1 view .LVU1641
 4167              	.LBB689:
 4168              	.LBB690:
  78:./src/main.c  **** 	}
 4169              		.loc 1 78 3 view .LVU1642
  82:./src/main.c  **** 	}
 4170              		.loc 1 82 3 view .LVU1643
 4171              	.LBE690:
 4172              	.LBE689:
1295:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4173              		.loc 1 1295 52 is_stmt 0 view .LVU1644
 4174 127c 0130FEE5 		ldrb	r3, [lr, #1]!	@ zero_extendqisi2
 4175              	.LBB694:
 4176              	.LBB691:
  76:./src/main.c  **** 	{
 4177              		.loc 1 76 4 view .LVU1645
 4178 1280 9F0053E3 		cmp	r3, #159
 4179              	.LBE691:
 4180              	.LBE694:
1295:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4181              		.loc 1 1295 27 view .LVU1646
 4182 1284 2312A0E1 		lsr	r1, r3, #4
 4183              	.LVL340:
 4184              	.LBB695:
 4185              	.LBI689:
  73:./src/main.c  **** {
 4186              		.loc 1 73 6 is_stmt 1 view .LVU1647
 4187              	.LBB692:
  75:./src/main.c  **** 	if(chr > 9)
 4188              		.loc 1 75 2 view .LVU1648
  76:./src/main.c  **** 	{
 4189              		.loc 1 76 2 view .LVU1649
 4190              	.LBE692:
 4191              	.LBE695:
1296:./src/main.c  **** 					}
 4192              		.loc 1 1296 27 is_stmt 0 view .LVU1650
 4193 1288 0F3003E2 		and	r3, r3, #15
 4194              	.LBB696:
 4195              	.LBB693:
  78:./src/main.c  **** 	}
 4196              		.loc 1 78 7 view .LVU1651
 4197 128c 37108182 		addhi	r1, r1, #55
 4198              	.LVL341:
  82:./src/main.c  **** 	}
 4199              		.loc 1 82 7 view .LVU1652
 4200 1290 30108192 		addls	r1, r1, #48
 4201              	.LVL342:
  84:./src/main.c  **** }
 4202              		.loc 1 84 2 is_stmt 1 view .LVU1653
  84:./src/main.c  **** }
 4203              		.loc 1 84 2 is_stmt 0 view .LVU1654
 4204              	.LBE693:
 4205              	.LBE696:
 4206              	.LBB697:
 4207              	.LBB698:
  78:./src/main.c  **** 	}
 4208              		.loc 1 78 3 is_stmt 1 view .LVU1655
  82:./src/main.c  **** 	}
 4209              		.loc 1 82 3 view .LVU1656
  76:./src/main.c  **** 	{
 4210              		.loc 1 76 4 is_stmt 0 view .LVU1657
 4211 1294 090053E3 		cmp	r3, #9
  78:./src/main.c  **** 	}
 4212              		.loc 1 78 7 view .LVU1658
 4213 1298 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 4214              		.loc 1 82 7 view .LVU1659
 4215 129c 30308392 		addls	r3, r3, #48
 4216              	.LBE698:
 4217              	.LBE697:
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4218              		.loc 1 1294 6 view .LVU1660
 4219 12a0 0E0055E1 		cmp	r5, lr
1295:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4220              		.loc 1 1295 25 view .LVU1661
 4221 12a4 0A10C2E5 		strb	r1, [r2, #10]
1296:./src/main.c  **** 					}
 4222              		.loc 1 1296 7 is_stmt 1 view .LVU1662
 4223              	.LBB700:
 4224              	.LBI697:
  73:./src/main.c  **** {
 4225              		.loc 1 73 6 view .LVU1663
 4226              	.LBB699:
  75:./src/main.c  **** 	if(chr > 9)
 4227              		.loc 1 75 2 view .LVU1664
  76:./src/main.c  **** 	{
 4228              		.loc 1 76 2 view .LVU1665
 4229              	.LVL343:
  84:./src/main.c  **** }
 4230              		.loc 1 84 2 view .LVU1666
  84:./src/main.c  **** }
 4231              		.loc 1 84 2 is_stmt 0 view .LVU1667
 4232              	.LBE699:
 4233              	.LBE700:
1296:./src/main.c  **** 					}
 4234              		.loc 1 1296 25 view .LVU1668
 4235 12a8 0B30C2E5 		strb	r3, [r2, #11]
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4236              		.loc 1 1294 30 is_stmt 1 view .LVU1669
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4237              		.loc 1 1294 15 view .LVU1670
1294:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4238              		.loc 1 1294 6 is_stmt 0 view .LVU1671
 4239 12ac 022082E2 		add	r2, r2, #2
 4240 12b0 F1FFFF1A 		bne	.L308
 4241 12b4 76C0C4E5 		strb	ip, [r4, #118]
 4242              	.L303:
1298:./src/main.c  **** 				}
 4243              		.loc 1 1298 6 is_stmt 1 view .LVU1672
1298:./src/main.c  **** 				}
 4244              		.loc 1 1298 19 is_stmt 0 view .LVU1673
 4245 12b8 05308CE2 		add	r3, ip, #5
 4246 12bc 8330A0E1 		lsl	r3, r3, #1
 4247 12c0 FF3003E2 		and	r3, r3, #255
1305:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 4248              		.loc 1 1305 15 view .LVU1674
 4249 12c4 0310A0E1 		mov	r1, r3
 4250 12c8 AFFFFFEA 		b	.L309
 4251              	.LVL344:
 4252              	.L353:
 4253              	.LBB701:
 4254              	.LBB616:
  78:./src/main.c  **** 	}
 4255              		.loc 1 78 3 is_stmt 1 view .LVU1675
  84:./src/main.c  **** }
 4256              		.loc 1 84 2 view .LVU1676
  78:./src/main.c  **** 	}
 4257              		.loc 1 78 7 is_stmt 0 view .LVU1677
 4258 12cc 372082E2 		add	r2, r2, #55
 4259              	.LBE616:
 4260              	.LBE701:
1243:./src/main.c  **** 					// convert data bytes to ASCII
 4261              		.loc 1 1243 8 view .LVU1678
 4262 12d0 000053E3 		cmp	r3, #0
1241:./src/main.c  **** 
 4263              		.loc 1 1241 18 view .LVU1679
 4264 12d4 2C20C4E5 		strb	r2, [r4, #44]
1243:./src/main.c  **** 					// convert data bytes to ASCII
 4265              		.loc 1 1243 5 is_stmt 1 view .LVU1680
1243:./src/main.c  **** 					// convert data bytes to ASCII
 4266              		.loc 1 1243 8 is_stmt 0 view .LVU1681
 4267 12d8 4DFFFF0A 		beq	.L267
 4268              	.L268:
1252:./src/main.c  **** 				}
 4269              		.loc 1 1252 6 is_stmt 1 view .LVU1682
1252:./src/main.c  **** 				}
 4270              		.loc 1 1252 19 is_stmt 0 view .LVU1683
 4271 12dc 0510A0E3 		mov	r1, #5
 4272 12e0 0130A0E1 		mov	r3, r1
1256:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 4273              		.loc 1 1256 5 is_stmt 1 view .LVU1684
 4274 12e4 A8FFFFEA 		b	.L309
 4275              	.L355:
 4276              		.align	2
 4277              	.L354:
 4278 12e8 00000000 		.word	.LANCHOR1
 4279 12ec 00000000 		.word	.LANCHOR0
 4280 12f0 6B000000 		.word	.LANCHOR0+107
 4281 12f4 28000000 		.word	.LANCHOR0+40
 4282              	.LBE703:
 4283              	.LBE705:
 4284              		.cfi_endproc
 4285              	.LFE18:
 4287              		.section	.text.startup,"ax",%progbits
 4288              		.align	2
 4289              		.global	main
 4290              		.syntax unified
 4291              		.arm
 4292              		.fpu softvfp
 4294              	main:
 4295              	.LFB5:
 114:./src/main.c  **** 	// init hardware
 4296              		.loc 1 114 1 view -0
 4297              		.cfi_startproc
 4298              		@ Function supports interworking.
 4299              		@ Volatile: function does not return.
 4300              		@ args = 0, pretend = 0, frame = 0
 4301              		@ frame_needed = 0, uses_anonymous_args = 0
 116:./src/main.c  **** 	IODIR1 |= 0x00100000;                     /* P1.16..23 defined as Outputs  */
 4302              		.loc 1 116 2 view .LVU1686
 120:./src/main.c  **** 	// init serial
 4303              		.loc 1 120 9 is_stmt 0 view .LVU1687
 4304 0000 0186A0E3 		mov	r8, #1048576
 114:./src/main.c  **** 	// init hardware
 4305              		.loc 1 114 1 view .LVU1688
 4306 0004 80402DE9 		push	{r7, lr}
 4307              	.LCFI10:
 4308              		.cfi_def_cfa_offset 8
 4309              		.cfi_offset 7, -8
 4310              		.cfi_offset 14, -4
 117:./src/main.c  **** 	// init timer
 4311              		.loc 1 117 9 view .LVU1689
 4312 0008 2C719FE5 		ldr	r7, .L377
 116:./src/main.c  **** 	IODIR1 |= 0x00100000;                     /* P1.16..23 defined as Outputs  */
 4313              		.loc 1 116 2 view .LVU1690
 4314 000c FEFFFFEB 		bl	HW_Init
 4315              	.LVL345:
 117:./src/main.c  **** 	// init timer
 4316              		.loc 1 117 2 is_stmt 1 view .LVU1691
 117:./src/main.c  **** 	// init timer
 4317              		.loc 1 117 9 is_stmt 0 view .LVU1692
 4318 0010 183097E5 		ldr	r3, [r7, #24]
 4319 0014 083083E1 		orr	r3, r3, r8
 4320 0018 183087E5 		str	r3, [r7, #24]
 119:./src/main.c  **** 	IOSET1 = 0x00100000;	//led on
 4321              		.loc 1 119 2 is_stmt 1 view .LVU1693
 4322 001c FEFFFFEB 		bl	SYSTIME_Init
 4323              	.LVL346:
 120:./src/main.c  **** 	// init serial
 4324              		.loc 1 120 2 view .LVU1694
 120:./src/main.c  **** 	// init serial
 4325              		.loc 1 120 9 is_stmt 0 view .LVU1695
 4326 0020 148087E5 		str	r8, [r7, #20]
 122:./src/main.c  **** 	// wait 180 millis for CAN DC/DC converters
 4327              		.loc 1 122 2 is_stmt 1 view .LVU1696
 4328 0024 FEFFFFEB 		bl	SER_UserInit
 4329              	.LVL347:
 124:./src/main.c  **** 	// init CAN
 4330              		.loc 1 124 2 view .LVU1697
 4331 0028 10019FE5 		ldr	r0, .L377+4
 4332 002c FEFFFFEB 		bl	SYSTIME_wait_us
 4333              	.LVL348:
 126:./src/main.c  **** 	CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 4334              		.loc 1 126 2 view .LVU1698
 4335 0030 FEFFFFEB 		bl	CAN_UserInit
 4336              	.LVL349:
 127:./src/main.c  **** 	CanChnOpen = 1;
 4337              		.loc 1 127 2 view .LVU1699
 4338 0034 0010A0E3 		mov	r1, #0
 4339 0038 0100A0E1 		mov	r0, r1
 4340 003c FEFFFFEB 		bl	CAN_SetBusMode
 4341              	.LVL350:
 128:./src/main.c  **** 	CanBusMode = BUS_ON;
 4342              		.loc 1 128 2 view .LVU1700
 128:./src/main.c  **** 	CanBusMode = BUS_ON;
 4343              		.loc 1 128 13 is_stmt 0 view .LVU1701
 4344 0040 0130A0E3 		mov	r3, #1
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4345              		.loc 1 129 13 view .LVU1702
 4346 0044 0020A0E3 		mov	r2, #0
 128:./src/main.c  **** 	CanBusMode = BUS_ON;
 4347              		.loc 1 128 13 view .LVU1703
 4348 0048 F4509FE5 		ldr	r5, .L377+8
 4349 004c 2630C5E5 		strb	r3, [r5, #38]
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4350              		.loc 1 129 2 is_stmt 1 view .LVU1704
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4351              		.loc 1 129 13 is_stmt 0 view .LVU1705
 4352 0050 F0309FE5 		ldr	r3, .L377+12
 130:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 4353              		.loc 1 130 2 view .LVU1706
 4354 0054 E4009FE5 		ldr	r0, .L377+4
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4355              		.loc 1 129 13 view .LVU1707
 4356 0058 0420C3E5 		strb	r2, [r3, #4]
 130:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 4357              		.loc 1 130 2 is_stmt 1 view .LVU1708
 142:./src/main.c  **** //			#if testtimer
 4358              		.loc 1 142 7 is_stmt 0 view .LVU1709
 4359 005c E8609FE5 		ldr	r6, .L377+16
 130:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 4360              		.loc 1 130 2 view .LVU1710
 4361 0060 FEFFFFEB 		bl	SYSTIME_wait_us
 4362              	.LVL351:
 131:./src/main.c  **** 	// Set green LEDs for CAN1 and CAN2
 4363              		.loc 1 131 2 is_stmt 1 view .LVU1711
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4364              		.loc 1 151 6 is_stmt 0 view .LVU1712
 4365 0064 E4409FE5 		ldr	r4, .L377+20
 131:./src/main.c  **** 	// Set green LEDs for CAN1 and CAN2
 4366              		.loc 1 131 9 view .LVU1713
 4367 0068 1C8087E5 		str	r8, [r7, #28]
 4368 006c 0C0000EA 		b	.L366
 4369              	.L376:
 161:./src/main.c  **** 			if ( LED_toggleCAN1)
 4370              		.loc 1 161 5 is_stmt 1 view .LVU1714
 161:./src/main.c  **** 			if ( LED_toggleCAN1)
 4371              		.loc 1 161 20 is_stmt 0 view .LVU1715
 4372 0070 8030D5E5 		ldrb	r3, [r5, #128]	@ zero_extendqisi2
 4373 0074 012023E2 		eor	r2, r3, #1
 4374 0078 8020C5E5 		strb	r2, [r5, #128]
 162:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 4375              		.loc 1 162 4 is_stmt 1 view .LVU1716
 163:./src/main.c  **** 			else
 4376              		.loc 1 163 13 is_stmt 0 view .LVU1717
 4377 007c 0126A0E3 		mov	r2, #1048576
 162:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 4378              		.loc 1 162 7 view .LVU1718
 4379 0080 010053E3 		cmp	r3, #1
 163:./src/main.c  **** 			else
 4380              		.loc 1 163 13 view .LVU1719
 4381 0084 B0309FE5 		ldr	r3, .L377
 165:./src/main.c  **** 			}//IF: CAN chan. open
 4382              		.loc 1 165 13 view .LVU1720
 4383 0088 1C208305 		streq	r2, [r3, #28]
 162:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 4384              		.loc 1 162 7 view .LVU1721
 4385 008c 0000000A 		beq	.L365
 4386              	.L373:
 168:./src/main.c  **** 			}
 4387              		.loc 1 168 12 view .LVU1722
 4388 0090 142083E5 		str	r2, [r3, #20]
 4389              	.L365:
 170:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 4390              		.loc 1 170 4 is_stmt 1 view .LVU1723
 170:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 4391              		.loc 1 170 18 is_stmt 0 view .LVU1724
 4392 0094 083096E5 		ldr	r3, [r6, #8]
 170:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 4393              		.loc 1 170 16 view .LVU1725
 4394 0098 7C3085E5 		str	r3, [r5, #124]
 4395              	.L368:
 174:./src/main.c  **** 
 4396              		.loc 1 174 3 is_stmt 1 view .LVU1726
 4397 009c FEFFFFEB 		bl	ProcessMsgFromCan
 4398              	.LVL352:
 176:./src/main.c  **** 		
 4399              		.loc 1 176 3 view .LVU1727
 4400 00a0 FEFFFFEB 		bl	ProcessMsgFromSerial
 4401              	.LVL353:
 137:./src/main.c  **** 	{
 4402              		.loc 1 137 8 view .LVU1728
 4403              	.L366:
 137:./src/main.c  **** 	{
 4404              		.loc 1 137 2 view .LVU1729
 142:./src/main.c  **** //			#if testtimer
 4405              		.loc 1 142 3 view .LVU1730
 142:./src/main.c  **** //			#if testtimer
 4406              		.loc 1 142 7 is_stmt 0 view .LVU1731
 4407 00a4 083096E5 		ldr	r3, [r6, #8]
 4408 00a8 782095E5 		ldr	r2, [r5, #120]
 142:./src/main.c  **** //			#if testtimer
 4409              		.loc 1 142 50 view .LVU1732
 4410 00ac 020053E1 		cmp	r3, r2
 142:./src/main.c  **** //			#if testtimer
 4411              		.loc 1 142 7 view .LVU1733
 4412 00b0 083096E5 		ldr	r3, [r6, #8]
 4413 00b4 01304332 		subcc	r3, r3, #1
 4414 00b8 023043E0 		sub	r3, r3, r2
 142:./src/main.c  **** //			#if testtimer
 4415              		.loc 1 142 50 view .LVU1734
 4416 00bc FA0F53E3 		cmp	r3, #1000
 4417 00c0 0030A093 		movls	r3, #0
 4418 00c4 0130A083 		movhi	r3, #1
 142:./src/main.c  **** //			#if testtimer
 4419              		.loc 1 142 6 view .LVU1735
 4420 00c8 000053E3 		cmp	r3, #0
 4421 00cc 0800000A 		beq	.L370
 149:./src/main.c  **** //			Millitimer+=(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW)/1000);
 4422              		.loc 1 149 4 is_stmt 1 view .LVU1736
 149:./src/main.c  **** //			Millitimer+=(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW)/1000);
 4423              		.loc 1 149 14 is_stmt 0 view .LVU1737
 4424 00d0 B437D5E1 		ldrh	r3, [r5, #116]
 4425 00d4 013083E2 		add	r3, r3, #1
 4426 00d8 0338A0E1 		lsl	r3, r3, #16
 4427 00dc 2338A0E1 		lsr	r3, r3, #16
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4428              		.loc 1 151 4 is_stmt 1 view .LVU1738
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4429              		.loc 1 151 6 is_stmt 0 view .LVU1739
 4430 00e0 040053E1 		cmp	r3, r4
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4431              		.loc 1 151 25 is_stmt 1 view .LVU1740
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4432              		.loc 1 151 35 is_stmt 0 view .LVU1741
 4433 00e4 0030A083 		movhi	r3, #0
 4434 00e8 B437C5E1 		strh	r3, [r5, #116]	@ movhi
 153:./src/main.c  **** 		}
 4435              		.loc 1 153 4 is_stmt 1 view .LVU1742
 153:./src/main.c  **** 		}
 4436              		.loc 1 153 19 is_stmt 0 view .LVU1743
 4437 00ec 083096E5 		ldr	r3, [r6, #8]
 153:./src/main.c  **** 		}
 4438              		.loc 1 153 18 view .LVU1744
 4439 00f0 783085E5 		str	r3, [r5, #120]
 4440              	.L370:
 158:./src/main.c  **** 			if (CanChnOpen) {
 4441              		.loc 1 158 3 is_stmt 1 view .LVU1745
 158:./src/main.c  **** 			if (CanChnOpen) {
 4442              		.loc 1 158 7 is_stmt 0 view .LVU1746
 4443 00f4 083096E5 		ldr	r3, [r6, #8]
 4444 00f8 7C2095E5 		ldr	r2, [r5, #124]
 158:./src/main.c  **** 			if (CanChnOpen) {
 4445              		.loc 1 158 47 view .LVU1747
 4446 00fc 020053E1 		cmp	r3, r2
 158:./src/main.c  **** 			if (CanChnOpen) {
 4447              		.loc 1 158 7 view .LVU1748
 4448 0100 083096E5 		ldr	r3, [r6, #8]
 158:./src/main.c  **** 			if (CanChnOpen) {
 4449              		.loc 1 158 47 view .LVU1749
 4450 0104 48109FE5 		ldr	r1, .L377+24
 158:./src/main.c  **** 			if (CanChnOpen) {
 4451              		.loc 1 158 7 view .LVU1750
 4452 0108 01304332 		subcc	r3, r3, #1
 4453 010c 023043E0 		sub	r3, r3, r2
 158:./src/main.c  **** 			if (CanChnOpen) {
 4454              		.loc 1 158 47 view .LVU1751
 4455 0110 010053E1 		cmp	r3, r1
 4456 0114 0030A093 		movls	r3, #0
 4457 0118 0130A083 		movhi	r3, #1
 158:./src/main.c  **** 			if (CanChnOpen) {
 4458              		.loc 1 158 6 view .LVU1752
 4459 011c 000053E3 		cmp	r3, #0
 4460 0120 DDFFFF0A 		beq	.L368
 159:./src/main.c  **** 				// toggle LED
 4461              		.loc 1 159 4 is_stmt 1 view .LVU1753
 159:./src/main.c  **** 				// toggle LED
 4462              		.loc 1 159 7 is_stmt 0 view .LVU1754
 4463 0124 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 4464 0128 000053E3 		cmp	r3, #0
 4465 012c CFFFFF1A 		bne	.L376
 168:./src/main.c  **** 			}
 4466              		.loc 1 168 5 is_stmt 1 view .LVU1755
 168:./src/main.c  **** 			}
 4467              		.loc 1 168 12 is_stmt 0 view .LVU1756
 4468 0130 0126A0E3 		mov	r2, #1048576
 4469 0134 00309FE5 		ldr	r3, .L377
 4470 0138 D4FFFFEA 		b	.L373
 4471              	.L378:
 4472              		.align	2
 4473              	.L377:
 4474 013c 008002E0 		.word	-536707072
 4475 0140 20BF0200 		.word	180000
 4476 0144 00000000 		.word	.LANCHOR0
 4477 0148 00000000 		.word	.LANCHOR1
 4478 014c 008000E0 		.word	-536838144
 4479 0150 60EA0000 		.word	60000
 4480 0154 20A10700 		.word	500000
 4481              		.cfi_endproc
 4482              	.LFE5:
 4484              		.global	UARTWriteResult
 4485              		.global	SerTxCongestionOccurred
 4486              		.global	SerRxOverrunOccurred
 4487              		.global	CanRcvTimestampOn
 4488              		.global	FilterMode
 4489              		.global	AutoPollAutoSend
 4490              		.global	AutostartMode
 4491              		.global	CanBusMode
 4492              		.global	CanInitialized
 4493              		.global	CanChnOpen
 4494              		.global	LedTimeDiff
 4495              		.global	TimeDiff1000Hz
 4496              		.global	Millitimer
 4497              		.global	CanSpeed
 4498              		.global	CanTxMsg
 4499              		.global	CanRxMsg
 4500              		.global	SerRcvBufPtr
 4501              		.global	SerRcvBuf
 4502              		.global	SerXmtBufPtr
 4503              		.global	SerXmtBuf
 4504              		.data
 4505              		.align	2
 4506              		.set	.LANCHOR1,. + 0
 4509              	CanSpeed:
 4510 0000 06000000 		.word	6
 4513              	CanBusMode:
 4514 0004 01       		.byte	1
 4517              	AutoPollAutoSend:
 4518 0005 01       		.byte	1
 4519              		.bss
 4520              		.align	2
 4521              		.set	.LANCHOR0,. + 0
 4524              	SerRcvBufPtr:
 4525 0000 00       		.space	1
 4526 0001 000000   		.space	3
 4529              	SerRcvBuf:
 4530 0004 00000000 		.space	33
 4530      00000000 
 4530      00000000 
 4530      00000000 
 4530      00000000 
 4533              	SerRxOverrunOccurred:
 4534 0025 00       		.space	1
 4537              	CanChnOpen:
 4538 0026 00       		.space	1
 4541              	CanInitialized:
 4542 0027 00       		.space	1
 4545              	SerXmtBuf:
 4546 0028 00000000 		.space	33
 4546      00000000 
 4546      00000000 
 4546      00000000 
 4546      00000000 
 4549              	SerXmtBufPtr:
 4550 0049 00       		.space	1
 4553              	AutostartMode:
 4554 004a 00       		.space	1
 4555 004b 00       		.space	1
 4558              	CanTxMsg:
 4559 004c 00000000 		.space	16
 4559      00000000 
 4559      00000000 
 4559      00000000 
 4562              	SerTxCongestionOccurred:
 4563 005c 00       		.space	1
 4566              	FilterMode:
 4567 005d 00       		.space	1
 4570              	CanRcvTimestampOn:
 4571 005e 00       		.space	1
 4572 005f 00       		.space	1
 4575              	UARTWriteResult:
 4576 0060 00000000 		.space	4
 4579              	CanRxMsg:
 4580 0064 00000000 		.space	16
 4580      00000000 
 4580      00000000 
 4580      00000000 
 4583              	Millitimer:
 4584 0074 0000     		.space	2
 4587              	i.0:
 4588 0076 00       		.space	1
 4589 0077 00       		.space	1
 4592              	TimeDiff1000Hz:
 4593 0078 00000000 		.space	4
 4596              	LedTimeDiff:
 4597 007c 00000000 		.space	4
 4600              	LED_toggleCAN1:
 4601 0080 00       		.space	1
 4602              		.text
 4603              	.Letext0:
 4604              		.file 2 "./inc/datatypes.h"
 4605              		.file 3 "./inc/can.h"
 4606              		.file 4 "./inc/serial.h"
 4607              		.file 5 "./inc/can_user.h"
 4608              		.file 6 "./inc/hardware.h"
 4609              		.file 7 "./inc/systime.h"
 4610              		.file 8 "./inc/ser_user.h"
 4611              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:15     .text:00000000 $a
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:22     .text:00000000 hex2ascii
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:59     .text:00000014 ascii2hex
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:113    .rodata.str1.4:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:123    .text:00000044 ProcessMsgFromSerial
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:228    .text:000000dc $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:283    .text:000001ac $a
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:3347   .text:00000f28 $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:3363   .text:00000f54 $a
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:3369   .text:00000f54 ProcessMsgFromCan
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4278   .text:000012e8 $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4288   .text.startup:00000000 $a
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4294   .text.startup:00000000 main
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4474   .text.startup:0000013c $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4575   .bss:00000060 UARTWriteResult
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4562   .bss:0000005c SerTxCongestionOccurred
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4533   .bss:00000025 SerRxOverrunOccurred
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4570   .bss:0000005e CanRcvTimestampOn
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4566   .bss:0000005d FilterMode
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4517   .data:00000005 AutoPollAutoSend
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4553   .bss:0000004a AutostartMode
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4513   .data:00000004 CanBusMode
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4541   .bss:00000027 CanInitialized
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4537   .bss:00000026 CanChnOpen
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4596   .bss:0000007c LedTimeDiff
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4592   .bss:00000078 TimeDiff1000Hz
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4583   .bss:00000074 Millitimer
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4509   .data:00000000 CanSpeed
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4558   .bss:0000004c CanTxMsg
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4579   .bss:00000064 CanRxMsg
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4524   .bss:00000000 SerRcvBufPtr
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4529   .bss:00000004 SerRcvBuf
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4549   .bss:00000049 SerXmtBufPtr
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4545   .bss:00000028 SerXmtBuf
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4505   .data:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4520   .bss:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4587   .bss:00000076 i.0
C:\Users\Carmine\AppData\Local\Temp\ccfKmxLX.s:4600   .bss:00000080 LED_toggleCAN1

UNDEFINED SYMBOLS
SER_Read
SER_Write
CAN_UserWrite
CAN_ReInitChannel
CAN_SetBusMode
memcpy
CAN_InitChannelMio
CAN_UserRead
HW_Init
SYSTIME_Init
SER_UserInit
SYSTIME_wait_us
CAN_UserInit
