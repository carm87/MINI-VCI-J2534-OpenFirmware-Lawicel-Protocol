   1              		.cpu arm7tdmi
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	2
  16              		.global	hex2ascii
  17              		.arch armv4t
  18              		.syntax unified
  19              		.arm
  20              		.fpu softvfp
  22              	hex2ascii:
  23              	.LVL0:
  24              	.LFB3:
  25              		.file 1 "./src/main.c"
   1:./src/main.c  **** 
   2:./src/main.c  **** #include "datatypes.h"
   3:./src/main.c  **** #include "can.h"
   4:./src/main.c  **** #include "can_user.h"
   5:./src/main.c  **** #include "hardware.h"
   6:./src/main.c  **** #include "crc_data.h"
   7:./src/main.c  **** #include "systime.h"
   8:./src/main.c  **** #include "serial.h"
   9:./src/main.c  **** #include "ser_user.h"
  10:./src/main.c  **** #include <stdio.h>
  11:./src/main.c  **** #include <stdlib.h>
  12:./src/main.c  **** #include <string.h>
  13:./src/main.c  **** #include "lpc21xx.h"
  14:./src/main.c  **** 
  15:./src/main.c  **** // size for user text buffer received from partner like terminal program or other device
  16:./src/main.c  **** #define	USER_TEXT_SIZE		30
  17:./src/main.c  **** 
  18:./src/main.c  **** 
  19:./src/main.c  **** #define ret_OK    0xD // [CR]   "\r"
  20:./src/main.c  **** #define ret_ERROR 0x7 // [Bell] "\a"
  21:./src/main.c  **** 
  22:./src/main.c  **** // max. serial buffer length: 29bit-frame plus timestamp plus \r plus trailing zero
  23:./src/main.c  **** #define buflen (sizeof("T1FFFFFFF81122334455667788EA5F\r")+1)
  24:./src/main.c  **** u8_t	SerXmtBuf[buflen]; // will assemble and send data to the Host-PC / RS232
  25:./src/main.c  **** u8_t	SerXmtBufPtr = 0;
  26:./src/main.c  **** u8_t	SerRcvBuf[buflen]; // holds commands from the Host-PC / RS232
  27:./src/main.c  **** u8_t	SerRcvBufPtr = 0;
  28:./src/main.c  **** CANMsg_t  CanRxMsg, CanTxMsg;
  29:./src/main.c  **** u32_t CanSpeed=6;
  30:./src/main.c  **** void ProcessMsgFromSerial(void);
  31:./src/main.c  **** static void TransmitStandardFrame(void) ;
  32:./src/main.c  **** static void TransmitExtendedFrame(void) ;
  33:./src/main.c  **** u8_t ascii2hex(u8_t chr);
  34:./src/main.c  **** static void SetCanBTR0BTR1(void) ;
  35:./src/main.c  **** static void TransmitStandardRtr(void) ;
  36:./src/main.c  **** static void TransmitExtendedRtr(void) ;
  37:./src/main.c  **** static void GetStatusFlags(void) ;
  38:./src/main.c  **** static void SetAutoPollAutoSend(void) ;
  39:./src/main.c  **** static void SetFilterMode(void) ;
  40:./src/main.c  **** static void GetVersionInfo(void) ;
  41:./src/main.c  **** static void GetSerialNumber(void) ;
  42:./src/main.c  **** static void SetRcvTimestampMode(void) ;
  43:./src/main.c  **** void ProcessMsgFromCan(void) ;
  44:./src/main.c  **** u8_t hex2ascii(u8_t chr);
  45:./src/main.c  **** extern CANStatus_t  CAN_InitChannelMio (	CANHandle_t  hBus, u32_t Timing);
  46:./src/main.c  **** 
  47:./src/main.c  **** 
  48:./src/main.c  **** u16_t Millitimer = 0;
  49:./src/main.c  **** u32_t TimeDiff1000Hz = 0;
  50:./src/main.c  **** u32_t LedTimeDiff = 0;
  51:./src/main.c  **** 
  52:./src/main.c  **** 
  53:./src/main.c  **** 
  54:./src/main.c  **** // variables for LED toggle
  55:./src/main.c  **** static u8_t LED_toggleCAN1;
  56:./src/main.c  **** 
  57:./src/main.c  **** // variabili di  stato
  58:./src/main.c  **** u8_t CanChnOpen=0;
  59:./src/main.c  **** u8_t CanInitialized=0;
  60:./src/main.c  **** u8_t CanBusMode = BUS_OFF;
  61:./src/main.c  **** u8_t AutostartMode=0;
  62:./src/main.c  **** u8_t AutoPollAutoSend=1;
  63:./src/main.c  **** u8_t FilterMode=0;
  64:./src/main.c  **** u8_t CanRcvTimestampOn=0;
  65:./src/main.c  **** 
  66:./src/main.c  **** 
  67:./src/main.c  **** 
  68:./src/main.c  **** u8_t SerRxOverrunOccurred=0;
  69:./src/main.c  **** u8_t SerTxCongestionOccurred=0;
  70:./src/main.c  **** // Write to UART was either ok or TX queue was full (repeat in latter case)
  71:./src/main.c  **** SERStatus_t UARTWriteResult;
  72:./src/main.c  **** 
  73:./src/main.c  **** u8_t hex2ascii(u8_t chr)
  74:./src/main.c  **** {
  26              		.loc 1 74 1 view -0
  27              		.cfi_startproc
  28              		@ Function supports interworking.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  75:./src/main.c  **** 	chr = chr & 0xF;
  32              		.loc 1 75 2 view .LVU1
  33              		.loc 1 75 6 is_stmt 0 view .LVU2
  34 0000 0F0000E2 		and	r0, r0, #15
  35              	.LVL1:
  76:./src/main.c  **** 	if(chr > 9)
  36              		.loc 1 76 2 is_stmt 1 view .LVU3
  77:./src/main.c  **** 	{
  78:./src/main.c  **** 		chr += 0x37;
  37              		.loc 1 78 3 view .LVU4
  76:./src/main.c  **** 	if(chr > 9)
  38              		.loc 1 76 4 is_stmt 0 view .LVU5
  39 0004 090050E3 		cmp	r0, #9
  40              		.loc 1 78 7 view .LVU6
  41 0008 37008082 		addhi	r0, r0, #55
  42              	.LVL2:
  79:./src/main.c  **** 	}
  80:./src/main.c  **** 	else
  81:./src/main.c  **** 	{
  82:./src/main.c  **** 		chr += 0x30;
  43              		.loc 1 82 3 is_stmt 1 view .LVU7
  44              		.loc 1 82 7 is_stmt 0 view .LVU8
  45 000c 30008092 		addls	r0, r0, #48
  46              	.LVL3:
  83:./src/main.c  **** 	}
  84:./src/main.c  **** 	return chr;
  47              		.loc 1 84 2 is_stmt 1 view .LVU9
  85:./src/main.c  **** }
  48              		.loc 1 85 1 is_stmt 0 view .LVU10
  49 0010 1EFF2FE1 		bx	lr
  50              		.cfi_endproc
  51              	.LFE3:
  53              		.align	2
  54              		.global	ascii2hex
  55              		.syntax unified
  56              		.arm
  57              		.fpu softvfp
  59              	ascii2hex:
  60              	.LVL4:
  61              	.LFB4:
  86:./src/main.c  **** 
  87:./src/main.c  **** u8_t ascii2hex(u8_t chr)
  88:./src/main.c  **** {
  62              		.loc 1 88 1 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ Function supports interworking.
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  89:./src/main.c  **** 	if((chr <= 0x5A) && (chr >= 0x41)) // Gro√übuchstaben
  68              		.loc 1 89 2 view .LVU12
  69              		.loc 1 89 4 is_stmt 0 view .LVU13
  70 0014 413040E2 		sub	r3, r0, #65
  71 0018 190053E3 		cmp	r3, #25
  72 001c 0500009A 		bls	.L10
  90:./src/main.c  **** 	{
  91:./src/main.c  **** 		chr -= 0x37;
  92:./src/main.c  **** 		return chr &0xF;
  93:./src/main.c  **** 	}
  94:./src/main.c  **** 	if((chr <= 0x7A) && (chr >= 0x61)) // Kleinbuchstaben
  73              		.loc 1 94 2 is_stmt 1 view .LVU14
  74              		.loc 1 94 19 is_stmt 0 view .LVU15
  75 0020 613040E2 		sub	r3, r0, #97
  76              		.loc 1 94 4 view .LVU16
  77 0024 FF3003E2 		and	r3, r3, #255
  78 0028 190053E3 		cmp	r3, #25
  95:./src/main.c  **** 	{
  96:./src/main.c  **** 		chr -=0x57;
  79              		.loc 1 96 3 is_stmt 1 view .LVU17
  80              	.LVL5:
  97:./src/main.c  **** 		return chr &0xF;
  81              		.loc 1 97 3 view .LVU18
  96:./src/main.c  **** 		return chr &0xF;
  82              		.loc 1 96 7 is_stmt 0 view .LVU19
  83 002c 57004092 		subls	r0, r0, #87
  84              	.LVL6:
  85              	.LBB108:
  86              	.LBI108:
  87:./src/main.c  **** {
  87              		.loc 1 87 6 is_stmt 1 view .LVU20
  88              	.LBB109:
  98:./src/main.c  **** 	}
  99:./src/main.c  **** 	
 100:./src/main.c  **** 	if((chr <= 0x39) && (chr >= 0x30)) // Zahlen
  89              		.loc 1 100 2 view .LVU21
 101:./src/main.c  **** 	{
 102:./src/main.c  **** 		chr -= 0x30;
 103:./src/main.c  **** 	}
 104:./src/main.c  **** 	return chr & 0xF;
  90              		.loc 1 104 2 view .LVU22
  91              		.loc 1 104 13 is_stmt 0 view .LVU23
  92 0030 0F0000E2 		and	r0, r0, #15
  93              	.LVL7:
  94              		.loc 1 104 13 view .LVU24
  95              	.LBE109:
  96              	.LBE108:
 105:./src/main.c  **** }
  97              		.loc 1 105 1 view .LVU25
  98 0034 1EFF2FE1 		bx	lr
  99              	.LVL8:
 100              	.L10:
  91:./src/main.c  **** 		return chr &0xF;
 101              		.loc 1 91 3 is_stmt 1 view .LVU26
  92:./src/main.c  **** 	}
 102              		.loc 1 92 3 view .LVU27
  91:./src/main.c  **** 		return chr &0xF;
 103              		.loc 1 91 7 is_stmt 0 view .LVU28
 104 0038 370040E2 		sub	r0, r0, #55
 105              	.LVL9:
  92:./src/main.c  **** 	}
 106              		.loc 1 92 14 view .LVU29
 107 003c 0F0000E2 		and	r0, r0, #15
 108 0040 1EFF2FE1 		bx	lr
 109              		.cfi_endproc
 110              	.LFE4:
 112              		.section	.rodata.str1.4,"aMS",%progbits,1
 113              		.align	2
 114              	.LC0:
 115 0000 30303031 		.ascii	"0001\000"
 115      00
 116              		.text
 117              		.align	2
 118              		.global	ProcessMsgFromSerial
 119              		.syntax unified
 120              		.arm
 121              		.fpu softvfp
 123              	ProcessMsgFromSerial:
 124              	.LFB6:
 106:./src/main.c  **** 
 107:./src/main.c  **** 
 108:./src/main.c  **** 
 109:./src/main.c  **** 
 110:./src/main.c  **** 
 111:./src/main.c  **** // main()
 112:./src/main.c  **** // entry point from crt0.S
 113:./src/main.c  **** int  main ( void)
 114:./src/main.c  **** {
 115:./src/main.c  **** 	// init hardware
 116:./src/main.c  **** 	HW_Init();
 117:./src/main.c  **** 	IODIR1 |= 0x00100000;                     /* P1.16..23 defined as Outputs  */
 118:./src/main.c  **** 	// init timer
 119:./src/main.c  **** 	SYSTIME_Init();
 120:./src/main.c  **** 	IOSET1 = 0x00100000;	//led on
 121:./src/main.c  **** 	// init serial
 122:./src/main.c  **** 	SER_UserInit();
 123:./src/main.c  **** 	// wait 180 millis for CAN DC/DC converters
 124:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 125:./src/main.c  **** 	// init CAN
 126:./src/main.c  **** 	CAN_UserInit();
 127:./src/main.c  **** 	CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 128:./src/main.c  **** 	CanChnOpen = 1;
 129:./src/main.c  **** 	CanBusMode = BUS_ON;
 130:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 131:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 132:./src/main.c  **** 	// Set green LEDs for CAN1 and CAN2
 133:./src/main.c  **** //	HW_SetLED ( HW_LED_CAN1, HW_LED_GREEN);
 134:./src/main.c  **** //	HW_SetLED ( HW_LED_CAN2, HW_LED_GREEN);
 135:./src/main.c  **** 
 136:./src/main.c  **** 	// main loop
 137:./src/main.c  **** 	while ( 1)
 138:./src/main.c  **** 	{
 139:./src/main.c  **** 
 140:./src/main.c  **** 		
 141:./src/main.c  **** 		// millisec timer for CAN receive timestamp
 142:./src/main.c  **** 		if (SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW) > 1000){
 143:./src/main.c  **** //			#if testtimer
 144:./src/main.c  **** //			if(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW) > 2000)
 145:./src/main.c  **** //			{
 146:./src/main.c  **** //				system_too_slow++;
 147:./src/main.c  **** //			}
 148:./src/main.c  **** //			#endif
 149:./src/main.c  **** 			Millitimer++;
 150:./src/main.c  **** //			Millitimer+=(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW)/1000);
 151:./src/main.c  **** 			if(Millitimer>60000) Millitimer=0;
 152:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 153:./src/main.c  **** 			TimeDiff1000Hz=SYSTIME_NOW;
 154:./src/main.c  **** 		}
 155:./src/main.c  **** 		//-------------------------------------------------
 156:./src/main.c  **** 
 157:./src/main.c  **** 		// 1Hz LED Blinker
 158:./src/main.c  **** 		if (SYSTIME_DIFF (LedTimeDiff, SYSTIME_NOW) > 500000){
 159:./src/main.c  **** 			if (CanChnOpen) {
 160:./src/main.c  **** 				// toggle LED
 161:./src/main.c  **** 				LED_toggleCAN1 ^= 1;
 162:./src/main.c  **** 			if ( LED_toggleCAN1)
 163:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 164:./src/main.c  **** 			else
 165:./src/main.c  **** 			{	IOCLR1 = 0x00100000;}
 166:./src/main.c  **** 			}//IF: CAN chan. open
 167:./src/main.c  **** 			else { // CAN chn. closed, set green static
 168:./src/main.c  **** 				IOSET1 = 0x00100000;
 169:./src/main.c  **** 			}
 170:./src/main.c  **** 			LedTimeDiff = SYSTIME_NOW;
 171:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 172:./src/main.c  **** 		
 173:./src/main.c  **** 		
 174:./src/main.c  **** 		ProcessMsgFromCan();
 175:./src/main.c  **** 
 176:./src/main.c  **** 		ProcessMsgFromSerial();
 177:./src/main.c  **** 		
 178:./src/main.c  **** 		
 179:./src/main.c  **** 		
 180:./src/main.c  **** 	}
 181:./src/main.c  **** }
 182:./src/main.c  **** 
 183:./src/main.c  **** 
 184:./src/main.c  **** 
 185:./src/main.c  **** 
 186:./src/main.c  **** void ProcessMsgFromSerial(void)
 187:./src/main.c  **** //-------------------------------------------------
 188:./src/main.c  **** {
 125              		.loc 1 188 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ Function supports interworking.
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0044 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}
 131              	.LCFI0:
 132              		.cfi_def_cfa_offset 28
 133              		.cfi_offset 4, -28
 134              		.cfi_offset 5, -24
 135              		.cfi_offset 6, -20
 136              		.cfi_offset 7, -16
 137              		.cfi_offset 8, -12
 138              		.cfi_offset 9, -8
 139              		.cfi_offset 14, -4
 189:./src/main.c  **** 	SERStatus_t ReadResult;
 190:./src/main.c  **** 	u8_t CurRcvChar; 	// currently received character from UART
 191:./src/main.c  **** 	u8_t BytesRead;		// dummy parameter, not used here
 192:./src/main.c  **** 	u8_t CmdLength;		// length of currently received Command
 193:./src/main.c  **** 	u8_t RetValue;		// 
 194:./src/main.c  **** 
 195:./src/main.c  **** 	do {
 196:./src/main.c  **** 		// Read one byte from serial
 197:./src/main.c  **** 		ReadResult = SER_Read (SER_PORT1, &CurRcvChar, 1, &BytesRead);
 140              		.loc 1 197 16 is_stmt 0 view .LVU31
 141 0048 0160A0E3 		mov	r6, #1
 198:./src/main.c  **** 		
 199:./src/main.c  **** 		// No bytes received,
 200:./src/main.c  **** 		if (ReadResult == SER_ERR_RX_EMPTY){
 201:./src/main.c  **** 			return;	 // ... quit, don't waste time
 202:./src/main.c  **** 		}	
 203:./src/main.c  **** 
 204:./src/main.c  **** 		//-------------------------------------------------
 205:./src/main.c  **** 	    else if (ReadResult == SER_ERR_OK){
 206:./src/main.c  **** 			SerRcvBuf[SerRcvBufPtr] = CurRcvChar;
 207:./src/main.c  **** 		
 208:./src/main.c  **** 			// increase pointer up to max.
 209:./src/main.c  **** 			if (SerRcvBufPtr <= buflen){
 210:./src/main.c  **** 				SerRcvBufPtr++;
 211:./src/main.c  **** 			}
 212:./src/main.c  **** 		} // else if
 213:./src/main.c  **** 		//-------------------------------------------------
 214:./src/main.c  **** 		else if (ReadResult == SER_ERR_RX_OVERRUN){
 215:./src/main.c  **** 			SerRxOverrunOccurred = 1; // to be inserted in status register (command F)
 142              		.loc 1 215 25 view .LVU32
 143 004c 805E9FE5 		ldr	r5, .L248
 188:./src/main.c  **** 	SERStatus_t ReadResult;
 144              		.loc 1 188 1 view .LVU33
 145 0050 0CD04DE2 		sub	sp, sp, #12
 146              	.LCFI1:
 147              		.cfi_def_cfa_offset 40
 148 0054 080000EA 		b	.L17
 149              	.LVL10:
 150              	.L246:
 210:./src/main.c  **** 			}
 151              		.loc 1 210 5 is_stmt 1 view .LVU34
 206:./src/main.c  **** 		
 152              		.loc 1 206 13 is_stmt 0 view .LVU35
 153 0058 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 206:./src/main.c  **** 		
 154              		.loc 1 206 28 view .LVU36
 155 005c 0540DDE5 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 209:./src/main.c  **** 				SerRcvBufPtr++;
 156              		.loc 1 209 7 view .LVU37
 157 0060 210053E3 		cmp	r3, #33
 206:./src/main.c  **** 		
 158              		.loc 1 206 28 view .LVU38
 159 0064 032085E0 		add	r2, r5, r3
 210:./src/main.c  **** 			}
 160              		.loc 1 210 17 view .LVU39
 161 0068 013083E2 		add	r3, r3, #1
 162 006c 0030C595 		strbls	r3, [r5]
 216:./src/main.c  **** 		} // else if
 217:./src/main.c  **** 		//-------------------------------------------------
 218:./src/main.c  **** 	} // do
 219:./src/main.c  **** 	while (CurRcvChar != '\r');	
 163              		.loc 1 219 2 view .LVU40
 164 0070 0D0054E3 		cmp	r4, #13
 206:./src/main.c  **** 		
 165              		.loc 1 206 28 view .LVU41
 166 0074 0440C2E5 		strb	r4, [r2, #4]
 209:./src/main.c  **** 				SerRcvBufPtr++;
 167              		.loc 1 209 4 is_stmt 1 view .LVU42
 168              		.loc 1 219 8 view .LVU43
 169              		.loc 1 219 2 is_stmt 0 view .LVU44
 170 0078 0D00000A 		beq	.L245
 171              	.LVL11:
 172              	.L17:
 189:./src/main.c  **** 	u8_t CurRcvChar; 	// currently received character from UART
 173              		.loc 1 189 2 is_stmt 1 view .LVU45
 190:./src/main.c  **** 	u8_t BytesRead;		// dummy parameter, not used here
 174              		.loc 1 190 2 view .LVU46
 191:./src/main.c  **** 	u8_t CmdLength;		// length of currently received Command
 175              		.loc 1 191 2 view .LVU47
 192:./src/main.c  **** 	u8_t RetValue;		// 
 176              		.loc 1 192 2 view .LVU48
 193:./src/main.c  **** 
 177              		.loc 1 193 2 view .LVU49
 195:./src/main.c  **** 		// Read one byte from serial
 178              		.loc 1 195 2 view .LVU50
 197:./src/main.c  **** 		
 179              		.loc 1 197 3 view .LVU51
 197:./src/main.c  **** 		
 180              		.loc 1 197 16 is_stmt 0 view .LVU52
 181 007c 0120A0E3 		mov	r2, #1
 182 0080 0000A0E3 		mov	r0, #0
 183 0084 06308DE2 		add	r3, sp, #6
 184 0088 05108DE2 		add	r1, sp, #5
 185 008c FEFFFFEB 		bl	SER_Read
 186              	.LVL12:
 205:./src/main.c  **** 			SerRcvBuf[SerRcvBufPtr] = CurRcvChar;
 187              		.loc 1 205 11 is_stmt 1 view .LVU53
 206:./src/main.c  **** 		
 188              		.loc 1 206 4 view .LVU54
 214:./src/main.c  **** 			SerRxOverrunOccurred = 1; // to be inserted in status register (command F)
 189              		.loc 1 214 8 view .LVU55
 200:./src/main.c  **** 			return;	 // ... quit, don't waste time
 190              		.loc 1 200 3 view .LVU56
 200:./src/main.c  **** 			return;	 // ... quit, don't waste time
 191              		.loc 1 200 6 is_stmt 0 view .LVU57
 192 0090 020050E3 		cmp	r0, #2
 193 0094 4F00000A 		beq	.L11
 205:./src/main.c  **** 			SerRcvBuf[SerRcvBufPtr] = CurRcvChar;
 194              		.loc 1 205 14 view .LVU58
 195 0098 000050E3 		cmp	r0, #0
 196 009c EDFFFF0A 		beq	.L246
 206:./src/main.c  **** 		
 197              		.loc 1 206 28 view .LVU59
 198 00a0 0540DDE5 		ldrb	r4, [sp, #5]	@ zero_extendqisi2
 214:./src/main.c  **** 			SerRxOverrunOccurred = 1; // to be inserted in status register (command F)
 199              		.loc 1 214 11 view .LVU60
 200 00a4 030050E3 		cmp	r0, #3
 215:./src/main.c  **** 		} // else if
 201              		.loc 1 215 4 is_stmt 1 view .LVU61
 202              		.loc 1 219 8 view .LVU62
 215:./src/main.c  **** 		} // else if
 203              		.loc 1 215 25 is_stmt 0 view .LVU63
 204 00a8 2560C505 		strbeq	r6, [r5, #37]
 205              		.loc 1 219 2 view .LVU64
 206 00ac 0D0054E3 		cmp	r4, #13
 207 00b0 F1FFFF1A 		bne	.L17
 208              	.L245:
 220:./src/main.c  **** 	CmdLength = SerRcvBufPtr - 1; // without carriage return
 209              		.loc 1 220 2 is_stmt 1 view .LVU65
 210              		.loc 1 220 27 is_stmt 0 view .LVU66
 211 00b4 185E9FE5 		ldr	r5, .L248
 212              		.loc 1 220 12 view .LVU67
 213 00b8 0020D5E5 		ldrb	r2, [r5]	@ zero_extendqisi2
 214 00bc 0430D5E5 		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 215 00c0 012042E2 		sub	r2, r2, #1
 216 00c4 433043E2 		sub	r3, r3, #67
 221:./src/main.c  **** 		//-------------------------------------------------
 222:./src/main.c  **** 	
 223:./src/main.c  **** 	RetValue = ret_OK;
 217              		.loc 1 223 11 view .LVU68
 218 00c8 0740CDE5 		strb	r4, [sp, #7]
 220:./src/main.c  **** 	CmdLength = SerRcvBufPtr - 1; // without carriage return
 219              		.loc 1 220 12 view .LVU69
 220 00cc FF6002E2 		and	r6, r2, #255
 221              	.LVL13:
 222              		.loc 1 223 2 is_stmt 1 view .LVU70
 224:./src/main.c  **** 	switch (SerRcvBuf[0]) { // Char 0 always contains cmd
 223              		.loc 1 224 2 view .LVU71
 224 00d0 330053E3 		cmp	r3, #51
 225 00d4 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 226 00d8 330000EA 		b	.L18
 227              	.L20:
 228 00dc 10050000 		.word	.L36
 229 00e0 AC010000 		.word	.L18
 230 00e4 AC010000 		.word	.L18
 231 00e8 50050000 		.word	.L35
 232 00ec AC010000 		.word	.L18
 233 00f0 AC010000 		.word	.L18
 234 00f4 AC010000 		.word	.L18
 235 00f8 AC010000 		.word	.L18
 236 00fc AC010000 		.word	.L18
 237 0100 940B0000 		.word	.L34
 238 0104 20020000 		.word	.L24
 239 0108 080E0000 		.word	.L33
 240 010c EC0B0000 		.word	.L32
 241 0110 AC010000 		.word	.L18
 242 0114 AC010000 		.word	.L18
 243 0118 C0090000 		.word	.L31
 244 011c 50060000 		.word	.L30
 245 0120 C0060000 		.word	.L29
 246 0124 AC010000 		.word	.L18
 247 0128 E4010000 		.word	.L19
 248 012c FC050000 		.word	.L28
 249 0130 3C020000 		.word	.L27
 250 0134 AC010000 		.word	.L18
 251 0138 AC020000 		.word	.L26
 252 013c AC010000 		.word	.L18
 253 0140 AC010000 		.word	.L18
 254 0144 AC010000 		.word	.L18
 255 0148 AC010000 		.word	.L18
 256 014c AC010000 		.word	.L18
 257 0150 AC010000 		.word	.L18
 258 0154 AC010000 		.word	.L18
 259 0158 AC010000 		.word	.L18
 260 015c AC010000 		.word	.L18
 261 0160 AC010000 		.word	.L18
 262 0164 AC010000 		.word	.L18
 263 0168 AC010000 		.word	.L18
 264 016c AC010000 		.word	.L18
 265 0170 AC010000 		.word	.L18
 266 0174 AC010000 		.word	.L18
 267 0178 AC010000 		.word	.L18
 268 017c AC010000 		.word	.L18
 269 0180 AC010000 		.word	.L18
 270 0184 20020000 		.word	.L24
 271 0188 AC010000 		.word	.L18
 272 018c AC010000 		.word	.L18
 273 0190 AC010000 		.word	.L18
 274 0194 AC010000 		.word	.L18
 275 0198 00030000 		.word	.L23
 276 019c 44040000 		.word	.L22
 277 01a0 400C0000 		.word	.L21
 278 01a4 AC010000 		.word	.L18
 279 01a8 E4010000 		.word	.L19
 280              	.LVL14:
 281              	.L18:
 225:./src/main.c  **** 		//-------------------------------------------------
 226:./src/main.c  **** 	case ('S'): // Set CAN speed 0..8
 227:./src/main.c  **** 		if ((CmdLength == 2) 
 228:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 8)&&(CanChnOpen==0)) {
 229:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 230:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 231:./src/main.c  **** 			CanInitialized = 1;
 232:./src/main.c  **** 			// Send ASCII OK
 233:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 234:./src/main.c  **** 		}
 235:./src/main.c  **** 		else {
 236:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 237:./src/main.c  **** 		}
 238:./src/main.c  **** 		break;
 239:./src/main.c  **** 		//-------------------------------------------------
 240:./src/main.c  **** 	case ('s'): // Setup CAN by BTR0/BTR1
 241:./src/main.c  **** 		if (CmdLength == 5) {
 242:./src/main.c  **** 			SetCanBTR0BTR1();
 243:./src/main.c  **** 		//	EepromData.CanSpeed = 0xFF; 	// not a standard speed
 244:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 245:./src/main.c  **** 		}
 246:./src/main.c  **** 		else {
 247:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 248:./src/main.c  **** 		}
 249:./src/main.c  **** 		break;
 250:./src/main.c  **** 		//-------------------------------------------------
 251:./src/main.c  **** 	case ('O'): // Open CAN channel in normal mode
 252:./src/main.c  **** 		if ((CmdLength == 1)&& (CanChnOpen == 0) && (CanInitialized == 1)) {
 253:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 254:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 255:./src/main.c  **** 			CanChnOpen = 1;
 256:./src/main.c  **** 			CanBusMode = BUS_ON;
 257:./src/main.c  **** 			// Send ASCII OK
 258:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 259:./src/main.c  **** 		}
 260:./src/main.c  **** 		else {
 261:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 262:./src/main.c  **** 		}
 263:./src/main.c  **** 		break;
 264:./src/main.c  **** 		//-------------------------------------------------
 265:./src/main.c  **** 	case ('L'): // Open CAN channel in listen-only mode
 266:./src/main.c  **** 		if ((CmdLength == 1)&& (CanChnOpen == 0) && (CanInitialized == 1)) {
 267:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 268:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_LOM);
 269:./src/main.c  **** 			CanChnOpen = 1;
 270:./src/main.c  **** 			CanBusMode =BUS_LOM;
 271:./src/main.c  **** 						// Send ASCII OK
 272:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 273:./src/main.c  **** 		}
 274:./src/main.c  **** 		else {
 275:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 276:./src/main.c  **** 		}
 277:./src/main.c  **** 		break;
 278:./src/main.c  **** 		//-------------------------------------------------
 279:./src/main.c  **** 	case ('C'): // Close CAN channel
 280:./src/main.c  **** 		if ((CmdLength == 1)&& ((CanChnOpen == 1))) {
 281:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 282:./src/main.c  **** 			CanChnOpen = 0;
 283:./src/main.c  **** 			CanBusMode = BUS_OFF;
 284:./src/main.c  **** 			// Send ASCII OK
 285:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 286:./src/main.c  **** 		}
 287:./src/main.c  **** 		else {
 288:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 289:./src/main.c  **** 		}
 290:./src/main.c  **** 		break;
 291:./src/main.c  **** 		//-------------------------------------------------
 292:./src/main.c  **** 	case ('t'): // Send 11bit CAN message
 293:./src/main.c  **** 		if ((CmdLength == 5 + (ascii2hex(SerRcvBuf[4])* 2)&&  (CanChnOpen == 1) 
 294:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 295:./src/main.c  **** 			TransmitStandardFrame();
 296:./src/main.c  **** 		}
 297:./src/main.c  **** 		else {
 298:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 299:./src/main.c  **** 		}
 300:./src/main.c  **** 		break;
 301:./src/main.c  **** 		//-------------------------------------------------
 302:./src/main.c  **** 	case ('T'): // Send 29bit CAN message
 303:./src/main.c  **** 				if ((CmdLength == 10 + (ascii2hex(SerRcvBuf[9])* 2)) 
 304:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 305:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 306:./src/main.c  **** 			TransmitExtendedFrame();
 307:./src/main.c  **** 		}
 308:./src/main.c  **** 		else {
 309:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 310:./src/main.c  **** 		}
 311:./src/main.c  **** 		break;
 312:./src/main.c  **** 		//-------------------------------------------------
 313:./src/main.c  **** 	case ('r'):// Send 11bit RTR
 314:./src/main.c  **** 		if ((CmdLength == 5) 
 315:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 316:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 317:./src/main.c  **** 			TransmitStandardRtr();
 318:./src/main.c  **** 		}
 319:./src/main.c  **** 		else {
 320:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 321:./src/main.c  **** 		}
 322:./src/main.c  **** 		break;
 323:./src/main.c  **** 		//-------------------------------------------------
 324:./src/main.c  **** 	case ('R'): // Send 29bit RTR
 325:./src/main.c  **** 		if ((CmdLength == 10) 
 326:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 327:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 328:./src/main.c  **** 			TransmitExtendedRtr();
 329:./src/main.c  **** 		}
 330:./src/main.c  **** 		else {
 331:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 332:./src/main.c  **** 		}
 333:./src/main.c  **** 		break;
 334:./src/main.c  **** 		//-------------------------------------------------
 335:./src/main.c  **** 	case ('P'):
 336:./src/main.c  **** 		//	PollIncomingFifoSingle(); // not supported, use AutoPollAutoSend instead !
 337:./src/main.c  **** 		RetValue = ret_ERROR;
 282              		.loc 1 337 3 view .LVU72
 283              		.loc 1 337 12 is_stmt 0 view .LVU73
 284 01ac 0730A0E3 		mov	r3, #7
 285 01b0 0730CDE5 		strb	r3, [sp, #7]
 338:./src/main.c  **** 		
 339:./src/main.c  **** 		//-------------------------------------------------
 340:./src/main.c  **** 		break;
 286              		.loc 1 340 3 is_stmt 1 view .LVU74
 287              	.LVL15:
 288              	.L42:
 341:./src/main.c  **** 		//-------------------------------------------------
 342:./src/main.c  **** 	case ('A'):
 343:./src/main.c  **** 		//	PollIncomingFifoAll(); // not supported, use AutoPollAutoSend instead !
 344:./src/main.c  **** 		RetValue = ret_ERROR;
 345:./src/main.c  **** 		//-------------------------------------------------
 346:./src/main.c  **** 		break;
 347:./src/main.c  **** 		//-------------------------------------------------
 348:./src/main.c  **** 	case ('F'):
 349:./src/main.c  **** 		if (CmdLength == 1) {
 350:./src/main.c  **** 			GetStatusFlags(); // returns 1 byte with 7 flags
 351:./src/main.c  **** 		}
 352:./src/main.c  **** 		else {
 353:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 354:./src/main.c  **** 		}
 355:./src/main.c  **** 		break;
 356:./src/main.c  **** 		//-------------------------------------------------
 357:./src/main.c  **** 	case ('X'): // activate AutoPollAutoSend feature
 358:./src/main.c  **** 		if ((CmdLength == 2) 
 359:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 360:./src/main.c  **** 			SetAutoPollAutoSend();
 361:./src/main.c  **** 		}
 362:./src/main.c  **** 		else {
 363:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 364:./src/main.c  **** 		}
 365:./src/main.c  **** 		break;
 366:./src/main.c  **** 		//-------------------------------------------------
 367:./src/main.c  **** 	case ('W'): // Dual or Single Filter
 368:./src/main.c  **** 		if ((CmdLength == 2) 
 369:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 370:./src/main.c  **** 			SetFilterMode();
 371:./src/main.c  **** 		}
 372:./src/main.c  **** 		else {
 373:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 374:./src/main.c  **** 		}
 375:./src/main.c  **** 		break;
 376:./src/main.c  **** 		//-------------------------------------------------
 377:./src/main.c  **** 	case ('m'): // Register AM0, AM1, AM2 & AM3
 378:./src/main.c  **** 		if (CmdLength == 9) {
 379:./src/main.c  **** 		//	SetAcceptanceMask();
 380:./src/main.c  **** 			RetValue=ret_OK;
 381:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 382:./src/main.c  **** 		}
 383:./src/main.c  **** 		else {
 384:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 385:./src/main.c  **** 		}
 386:./src/main.c  **** 		break;
 387:./src/main.c  **** 		//-------------------------------------------------
 388:./src/main.c  **** 	case ('M'): // Register AC0, AC1, AC2 & AC3
 389:./src/main.c  **** 		if (CmdLength == 9) {
 390:./src/main.c  **** 		//	SetAcceptanceCode();
 391:./src/main.c  **** 		RetValue=ret_OK;
 392:./src/main.c  **** 		SER_Write (SER_PORT1, &RetValue, 1);
 393:./src/main.c  **** 		}
 394:./src/main.c  **** 		else {
 395:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 396:./src/main.c  **** 		}
 397:./src/main.c  **** 		break;
 398:./src/main.c  **** 		//-------------------------------------------------
 399:./src/main.c  **** 	case ('U'): // Set UART speed
 400:./src/main.c  **** 		if ((CmdLength == 2) 
 401:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1])) <= 6) {
 402:./src/main.c  **** 		//	EepromData.SerialSpeed = ascii2hex(SerRcvBuf[1]);
 403:./src/main.c  **** 		//	SetUartSpeed(EepromData.SerialSpeed); // u8_t SerSpeed
 404:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 405:./src/main.c  **** 			RetValue=ret_ERROR;
 406:./src/main.c  **** 		}
 407:./src/main.c  **** 		else {
 408:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 409:./src/main.c  **** 		}
 410:./src/main.c  **** 		break;
 411:./src/main.c  **** 		//-------------------------------------------------
 412:./src/main.c  **** 	case ('V'): // request version HW+SW
 413:./src/main.c  **** 		if (CmdLength == 1) {
 414:./src/main.c  **** 			GetVersionInfo();
 415:./src/main.c  **** 		}
 416:./src/main.c  **** 		else {
 417:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 418:./src/main.c  **** 		}
 419:./src/main.c  **** 		break;
 420:./src/main.c  **** 		//-------------------------------------------------
 421:./src/main.c  **** 			case ('v'): // request version HW+SW
 422:./src/main.c  **** 		if (CmdLength == 1) {
 423:./src/main.c  **** 			GetVersionInfo();
 424:./src/main.c  **** 		}
 425:./src/main.c  **** 		else {
 426:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 427:./src/main.c  **** 		}
 428:./src/main.c  **** 		break;
 429:./src/main.c  **** 		//-------------------------------------------------
 430:./src/main.c  **** 	case ('N'): // request serial number
 431:./src/main.c  **** 		if (CmdLength == 1) {
 432:./src/main.c  **** 			GetSerialNumber();
 433:./src/main.c  **** 		}
 434:./src/main.c  **** 		else {
 435:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 436:./src/main.c  **** 		}
 437:./src/main.c  **** 		break;
 438:./src/main.c  **** 		//-------------------------------------------------
 439:./src/main.c  **** 	case ('Z'): // activate timestamp feature
 440:./src/main.c  **** 		if ((CmdLength == 2) 
 441:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 442:./src/main.c  **** 			SetRcvTimestampMode(); // u8_t TimestampMode
 443:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 444:./src/main.c  **** 		}
 445:./src/main.c  **** 		else {
 446:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 447:./src/main.c  **** 		}
 448:./src/main.c  **** 		break;
 449:./src/main.c  **** 		//-------------------------------------------------
 450:./src/main.c  **** 	case ('Q'): // Set Auto Startup feature
 451:./src/main.c  **** 		if ((CmdLength == 2) 
 452:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 2)) {
 453:./src/main.c  **** 		//	SetAutostartMode();
 454:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 455:./src/main.c  **** 		
 456:./src/main.c  **** 		RetValue=ret_ERROR;
 457:./src/main.c  **** 			}
 458:./src/main.c  **** 		else {
 459:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 460:./src/main.c  **** 		}
 461:./src/main.c  **** 		break;
 462:./src/main.c  **** 		//-------------------------------------------------
 463:./src/main.c  **** 	case ('e'): // Write operating parameter set to EEPROM
 464:./src/main.c  **** 		if ((CmdLength == 2) 
 465:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 2)) {
 466:./src/main.c  **** 		//	WriteToEeprom(ascii2hex(SerRcvBuf[1])); // for debug only
 467:./src/main.c  **** 		RetValue=ret_ERROR;
 468:./src/main.c  **** 			}
 469:./src/main.c  **** 		else {
 470:./src/main.c  **** 			RetValue=ret_ERROR; // command wrong length or parameter out of range 
 471:./src/main.c  **** 		}
 472:./src/main.c  **** 		break;
 473:./src/main.c  **** 		//-------------------------------------------------
 474:./src/main.c  **** 	default:
 475:./src/main.c  **** 			// received command not specified, do nothing, return BELL 
 476:./src/main.c  **** 			RetValue = ret_ERROR;
 477:./src/main.c  **** 		break;
 478:./src/main.c  **** 	}
 479:./src/main.c  **** 	//-------------------------------------------------
 480:./src/main.c  **** 
 481:./src/main.c  **** 	if (RetValue == ret_ERROR) {
 289              		.loc 1 481 2 view .LVU75
 482:./src/main.c  **** 		// then blink red once
 483:./src/main.c  **** 	//	HW_SetLED ( HW_LED_CAN1, HW_LED_RED);
 484:./src/main.c  **** 	//	LedTimeDiff = SYSTIME_NOW;
 485:./src/main.c  **** 
 486:./src/main.c  **** 		// Send ASCII string to RS232 UART (Host-PC)
 487:./src/main.c  **** 		SerXmtBuf[0] = RetValue; // BEL
 290              		.loc 1 487 3 view .LVU76
 488:./src/main.c  **** 		SerXmtBufPtr = 1;
 291              		.loc 1 488 16 is_stmt 0 view .LVU77
 292 01b4 0120A0E3 		mov	r2, #1
 487:./src/main.c  **** 		SerXmtBufPtr = 1;
 293              		.loc 1 487 16 view .LVU78
 294 01b8 0730A0E3 		mov	r3, #7
 489:./src/main.c  **** 		SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 295              		.loc 1 489 3 view .LVU79
 296 01bc 0000A0E3 		mov	r0, #0
 297 01c0 101D9FE5 		ldr	r1, .L248+4
 487:./src/main.c  **** 		SerXmtBufPtr = 1;
 298              		.loc 1 487 16 view .LVU80
 299 01c4 2830C5E5 		strb	r3, [r5, #40]
 488:./src/main.c  **** 		SerXmtBufPtr = 1;
 300              		.loc 1 488 3 is_stmt 1 view .LVU81
 488:./src/main.c  **** 		SerXmtBufPtr = 1;
 301              		.loc 1 488 16 is_stmt 0 view .LVU82
 302 01c8 4920C5E5 		strb	r2, [r5, #73]
 303              		.loc 1 489 3 is_stmt 1 view .LVU83
 304 01cc FEFFFFEB 		bl	SER_Write
 305              	.LVL16:
 306              	.L221:
 490:./src/main.c  **** 	}
 491:./src/main.c  **** 	
 492:./src/main.c  **** 	SerRcvBufPtr = 0;
 307              		.loc 1 492 2 view .LVU84
 308              		.loc 1 492 15 is_stmt 0 view .LVU85
 309 01d0 0030A0E3 		mov	r3, #0
 310 01d4 0030C5E5 		strb	r3, [r5]
 311              	.L11:
 493:./src/main.c  **** }
 312              		.loc 1 493 1 view .LVU86
 313 01d8 0CD08DE2 		add	sp, sp, #12
 314              	.LCFI2:
 315              		.cfi_remember_state
 316              		.cfi_def_cfa_offset 28
 317              		@ sp needed
 318 01dc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}
 319              	.LCFI3:
 320              		.cfi_restore 14
 321              		.cfi_restore 9
 322              		.cfi_restore 8
 323              		.cfi_restore 7
 324              		.cfi_restore 6
 325              		.cfi_restore 5
 326              		.cfi_restore 4
 327              		.cfi_def_cfa_offset 0
 328 01e0 1EFF2FE1 		bx	lr
 329              	.LVL17:
 330              	.L19:
 331              	.LCFI4:
 332              		.cfi_restore_state
 422:./src/main.c  **** 			GetVersionInfo();
 333              		.loc 1 422 3 is_stmt 1 view .LVU87
 422:./src/main.c  **** 			GetVersionInfo();
 334              		.loc 1 422 6 is_stmt 0 view .LVU88
 335 01e4 010056E3 		cmp	r6, #1
 336 01e8 EFFFFF1A 		bne	.L18
 414:./src/main.c  **** 		}
 337              		.loc 1 414 4 is_stmt 1 view .LVU89
 338              	.LBB310:
 339              	.LBI310:
 494:./src/main.c  **** //-------------------------------------------------
 495:./src/main.c  **** 
 496:./src/main.c  **** 
 497:./src/main.c  **** 
 498:./src/main.c  **** 
 499:./src/main.c  **** static void TransmitStandardFrame(void) 
 500:./src/main.c  **** //-------------------------------------------------
 501:./src/main.c  **** {
 502:./src/main.c  **** 	u8_t Result;
 503:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 504:./src/main.c  **** 
 505:./src/main.c  **** 	Result = ret_OK;
 506:./src/main.c  **** 
 507:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 508:./src/main.c  **** 		if ((CanChnOpen == 1) 
 509:./src/main.c  **** 	&&  (CanBusMode == BUS_ON)
 510:./src/main.c  **** 	&&  (AutostartMode == 0)) {
 511:./src/main.c  **** 
 512:./src/main.c  **** 		// Erase former CAN data bytes
 513:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 514:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 515:./src/main.c  **** 	
 516:./src/main.c  **** 		// prepare 11 bit ID
 517:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<8 )& 0xF00;
 518:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 519:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 520:./src/main.c  **** 		
 521:./src/main.c  **** 		// Set message type 11 bit
 522:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_STANDARD;
 523:./src/main.c  **** 	
 524:./src/main.c  **** 		// set DLC
 525:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[4]))& 0x00F;
 526:./src/main.c  **** 		
 527:./src/main.c  **** 		// copy message data
 528:./src/main.c  **** 		for (i=0;i<(CanTxMsg.Len);i++) {
 529:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 530:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[i*2+6]))& 0x00F));
 531:./src/main.c  **** 		}
 532:./src/main.c  **** 		
 533:./src/main.c  **** 		// send the message
 534:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 535:./src/main.c  **** 	}
 536:./src/main.c  **** 	else {
 537:./src/main.c  **** 		Result = ret_ERROR;
 538:./src/main.c  **** 	}
 539:./src/main.c  **** 	SerXmtBufPtr = 0;
 540:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 541:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 542:./src/main.c  **** 		if (Result == ret_OK) {
 543:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'Z';
 544:./src/main.c  **** 			SerXmtBufPtr++;
 545:./src/main.c  **** 		}
 546:./src/main.c  **** 	}
 547:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 548:./src/main.c  **** 	SerXmtBufPtr++;
 549:./src/main.c  **** 	
 550:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 551:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 552:./src/main.c  **** 
 553:./src/main.c  **** }
 554:./src/main.c  **** /**************************************************/
 555:./src/main.c  **** 
 556:./src/main.c  **** 
 557:./src/main.c  **** 
 558:./src/main.c  **** 
 559:./src/main.c  **** 
 560:./src/main.c  **** 
 561:./src/main.c  **** 
 562:./src/main.c  **** //*************************************************
 563:./src/main.c  **** //! @brief	Tiiiiiiiildd...[CR]
 564:./src/main.c  **** //! Transmit an extended (29bit) CAN frame.
 565:./src/main.c  **** //!
 566:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open in normal mode. 
 567:./src/main.c  **** //!
 568:./src/main.c  **** //! @param	iiiiiiii Identifier in hex (00000000-1FFFFFFF)
 569:./src/main.c  **** //! @param	l Data length (0-8)
 570:./src/main.c  **** //! @param	dd Byte value in hex (00-FF). 
 571:./src/main.c  **** //! Numbers of dd pairs must match data length, otherwise an error occurs.
 572:./src/main.c  **** //!
 573:./src/main.c  **** //! @note example: T0000010021133[CR]
 574:./src/main.c  **** //! @note Sends a 29bit CAN frame with ID=0x100, 2 bytes
 575:./src/main.c  **** //! with the value 0x11 and 0x33.
 576:./src/main.c  **** //!
 577:./src/main.c  **** //! @return If Auto Poll is disabled:
 578:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 579:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 580:./src/main.c  **** //!
 581:./src/main.c  **** //! @return If Auto Poll is enabled:
 582:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 583:./src/main.c  **** //! @return	z[CR] for OK
 584:./src/main.c  **** //!
 585:./src/main.c  **** static void TransmitExtendedFrame(void) 
 586:./src/main.c  **** //-------------------------------------------------
 587:./src/main.c  **** {
 588:./src/main.c  **** 	u8_t Result;
 589:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 590:./src/main.c  **** 
 591:./src/main.c  **** 	Result = ret_OK;
 592:./src/main.c  **** 
 593:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 594:./src/main.c  **** 		if ((CanChnOpen == 1) 
 595:./src/main.c  **** 	&&  (CanBusMode == BUS_ON) 
 596:./src/main.c  **** 	&&  (AutostartMode == 0)) {
 597:./src/main.c  **** 
 598:./src/main.c  **** 		// Erase former CAN data bytes
 599:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 600:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 601:./src/main.c  **** 	
 602:./src/main.c  **** 		// prepare 29 bit ID
 603:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<28 )& 0xF0000000;
 604:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 605:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 606:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 607:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 608:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 609:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 610:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 611:./src/main.c  **** 		
 612:./src/main.c  **** 		// Set message type 29 bit
 613:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_EXTENDED;
 614:./src/main.c  **** 	
 615:./src/main.c  **** 		// set DLC
 616:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[9]))& 0xF;
 617:./src/main.c  **** 		
 618:./src/main.c  **** 		// copy message data
 619:./src/main.c  **** 		for (i=0;i<(CanTxMsg.Len);i++) {
 620:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 621:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[11+2*i]))& 0x00F));
 622:./src/main.c  **** 		}
 623:./src/main.c  **** 		
 624:./src/main.c  **** 		// send the message
 625:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 626:./src/main.c  **** 	}
 627:./src/main.c  **** 	else {
 628:./src/main.c  **** 		Result = ret_ERROR;
 629:./src/main.c  **** 	}
 630:./src/main.c  **** 	
 631:./src/main.c  **** 	//-------------------------------------------------
 632:./src/main.c  **** 
 633:./src/main.c  **** 	SerXmtBufPtr = 0;
 634:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 635:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 636:./src/main.c  **** 		if (Result == ret_OK) {
 637:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'Z';
 638:./src/main.c  **** 			SerXmtBufPtr++;
 639:./src/main.c  **** 		}
 640:./src/main.c  **** 	}
 641:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 642:./src/main.c  **** 	SerXmtBufPtr++;
 643:./src/main.c  **** 	
 644:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 645:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 646:./src/main.c  **** }
 647:./src/main.c  **** /**************************************************/
 648:./src/main.c  **** 
 649:./src/main.c  **** 
 650:./src/main.c  **** 
 651:./src/main.c  **** 
 652:./src/main.c  **** //*************************************************
 653:./src/main.c  **** //! @brief	sxxyy[CR]
 654:./src/main.c  **** //! Setup with BTR0/BTR1 CAN bit-rates where xx and yy is a hex value.
 655:./src/main.c  **** //!
 656:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is closed. 
 657:./src/main.c  **** //!
 658:./src/main.c  **** //! @param	xx BTR0 value in hex
 659:./src/main.c  **** //! @param	yy BTR1 value in hex
 660:./src/main.c  **** //!
 661:./src/main.c  **** //! @note example: s031C[CR]
 662:./src/main.c  **** //! @note Setup CAN with BTR0=0x03 & BTR1=0x1C which equals to 125 kbit/s.
 663:./src/main.c  **** //!
 664:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is open
 665:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 666:./src/main.c  **** //!
 667:./src/main.c  **** static void SetCanBTR0BTR1(void) 
 668:./src/main.c  **** //-------------------------------------------------
 669:./src/main.c  **** {
 670:./src/main.c  **** 	u8_t  Result;
 671:./src/main.c  **** 	u32_t LpcBtr; // This is the LPC2194's "CANBTR" register
 672:./src/main.c  **** 	u8_t BYTE0;
 673:./src/main.c  **** 	u8_t BYTE1;
 674:./src/main.c  **** 
 675:./src/main.c  **** 	Result = ret_OK;
 676:./src/main.c  **** 	
 677:./src/main.c  **** 	// get BTR0 from the received UART command line
 678:./src/main.c  **** 	BYTE0  = ((ascii2hex(SerRcvBuf[1])<<4)& 0xF0);
 679:./src/main.c  **** 	BYTE0 |= ((ascii2hex(SerRcvBuf[2])   )& 0x0F);
 680:./src/main.c  **** 	// get BTR1 from the received UART command line
 681:./src/main.c  **** 	BYTE1  = ((ascii2hex(SerRcvBuf[3])<<4)& 0xF0);
 682:./src/main.c  **** 	BYTE1 |= ((ascii2hex(SerRcvBuf[4])   )& 0x0F);
 683:./src/main.c  **** 
 684:./src/main.c  **** 	// only if can channel = closed
 685:./src/main.c  **** 	if (CanChnOpen == 0) { // precondition
 686:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 687:./src/main.c  **** 		LpcBtr  = ((((u32_t)BYTE0 &0x3F) +1) *6) -1; 	// BRP, bit 0..9
 688:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 689:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 690:./src/main.c  **** 		// Write values to CAN controller
 691:./src/main.c  **** 		PINSEL1 |= (1<<22) | (1<<24) |(1<<26) |(1<<28) |(1<<18) |(1<<16) |(1<<14) ;
 692:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 693:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 694:./src/main.c  **** 		C1IER=0x00; // Disabling all interrupts
 695:./src/main.c  **** 		C1BTR = LpcBtr;
 696:./src/main.c  **** 		//CAN_InitChannel (CAN_BUS1, LpcBtr);
 697:./src/main.c  **** 		C1MOD=0;
 698:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);					// CAN Bus On
 699:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 700:./src/main.c  **** 
 701:./src/main.c  **** 		CanInitialized = 1; 	// Now CAN channel can be opened
 702:./src/main.c  **** 	}
 703:./src/main.c  **** 	else {
 704:./src/main.c  **** 		Result = ret_ERROR;				// CAN channel not closed, command ignored
 705:./src/main.c  **** 	}	
 706:./src/main.c  **** 
 707:./src/main.c  **** 	//-------------------------------------------------
 708:./src/main.c  **** 
 709:./src/main.c  **** 	SerXmtBufPtr = 0;
 710:./src/main.c  **** 
 711:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 712:./src/main.c  **** 	SerXmtBufPtr++;
 713:./src/main.c  **** 	
 714:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 715:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 716:./src/main.c  **** }
 717:./src/main.c  **** /**************************************************/
 718:./src/main.c  **** 
 719:./src/main.c  **** 
 720:./src/main.c  **** //*************************************************
 721:./src/main.c  **** //! @brief	riiil[CR]
 722:./src/main.c  **** //! Transmit a standard RTR (11bit) CAN frame.
 723:./src/main.c  **** //!
 724:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open in normal mode. 
 725:./src/main.c  **** //!
 726:./src/main.c  **** //! @param iii Identifier in hex (000-7FF)
 727:./src/main.c  **** //! @param l Data length (0-8)
 728:./src/main.c  **** //!
 729:./src/main.c  **** //! @note example: r1002[CR]
 730:./src/main.c  **** //! @note Sends an 11bit RTR CAN frame with ID=0x100
 731:./src/main.c  **** //! and DLC set to two (2 bytes).
 732:./src/main.c  **** //!
 733:./src/main.c  **** //! @return If Auto Poll is disabled:
 734:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 735:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 736:./src/main.c  **** //!
 737:./src/main.c  **** //! @return If Auto Poll is enabled:
 738:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 739:./src/main.c  **** //! @return	z[CR] for OK
 740:./src/main.c  **** //!
 741:./src/main.c  **** static void TransmitStandardRtr(void) 
 742:./src/main.c  **** //-------------------------------------------------
 743:./src/main.c  **** {
 744:./src/main.c  **** 	u8_t Result;
 745:./src/main.c  **** 
 746:./src/main.c  **** 	Result = ret_OK;
 747:./src/main.c  **** 
 748:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 749:./src/main.c  **** 	if ((CanChnOpen == 1) && (CanBusMode == BUS_ON)) {
 750:./src/main.c  **** 
 751:./src/main.c  **** 		// Erase all former CAN data bytes
 752:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 753:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 754:./src/main.c  **** 	
 755:./src/main.c  **** 		// prepare 11 bit ID
 756:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<8 )& 0xF00;
 757:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 758:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 759:./src/main.c  **** 		
 760:./src/main.c  **** 		// Set message type 11 bit
 761:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_STANDARD | CAN_MSG_RTR;
 762:./src/main.c  **** 	
 763:./src/main.c  **** 		// set DLC
 764:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[4]))& 0x00F;
 765:./src/main.c  **** 				
 766:./src/main.c  **** 		// send the message
 767:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 768:./src/main.c  **** 	}
 769:./src/main.c  **** 	else {
 770:./src/main.c  **** 		Result = ret_ERROR;
 771:./src/main.c  **** 	}
 772:./src/main.c  **** 
 773:./src/main.c  **** 	//-------------------------------------------------
 774:./src/main.c  **** 
 775:./src/main.c  **** 	SerXmtBufPtr = 0;
 776:./src/main.c  **** 
 777:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 778:./src/main.c  **** 		if (Result == ret_OK) {
 779:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'z';
 780:./src/main.c  **** 			SerXmtBufPtr++;
 781:./src/main.c  **** 		}
 782:./src/main.c  **** 	}
 783:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 784:./src/main.c  **** 	SerXmtBufPtr++;
 785:./src/main.c  **** 	
 786:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 787:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 788:./src/main.c  **** }
 789:./src/main.c  **** /**************************************************/
 790:./src/main.c  **** 
 791:./src/main.c  **** 
 792:./src/main.c  **** //*************************************************
 793:./src/main.c  **** //! @brief	Riiiiiiiil[CR]
 794:./src/main.c  **** //! Transmit an extended RTR (29bit) CAN frame.
 795:./src/main.c  **** //!
 796:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open in normal mode. 
 797:./src/main.c  **** //!
 798:./src/main.c  **** //! @param iiiiiiii Identifier in hex (00000000-1FFFFFFF)
 799:./src/main.c  **** //! @param l Data length (0-8)
 800:./src/main.c  **** //!
 801:./src/main.c  **** //! @note example: R000001002[CR]
 802:./src/main.c  **** //! @note Sends a 29bit RTR CAN frame with ID=0x00000100 
 803:./src/main.c  **** //! and DLC set to two (2 bytes).
 804:./src/main.c  **** //!
 805:./src/main.c  **** //! @return If Auto Poll is disabled:
 806:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only.
 807:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 808:./src/main.c  **** //!
 809:./src/main.c  **** //! @return If Auto Poll is enabled:
 810:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open or Listen-Only
 811:./src/main.c  **** //! @return	z[CR] for OK
 812:./src/main.c  **** //!
 813:./src/main.c  **** static void TransmitExtendedRtr(void) 
 814:./src/main.c  **** //-------------------------------------------------
 815:./src/main.c  **** {
 816:./src/main.c  **** 	u8_t Result;
 817:./src/main.c  **** 
 818:./src/main.c  **** 	Result = ret_OK;
 819:./src/main.c  **** 
 820:./src/main.c  **** 	// if CAN channel is open and -not- listen only
 821:./src/main.c  **** 	if ((CanChnOpen == 1) && (CanBusMode == BUS_ON)) {
 822:./src/main.c  **** 
 823:./src/main.c  **** 		// Erase former CAN data bytes
 824:./src/main.c  **** 		CanTxMsg.Data32[0] = 0;
 825:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 826:./src/main.c  **** 	
 827:./src/main.c  **** 		// prepare 29 bit ID
 828:./src/main.c  **** 		CanTxMsg.Id =                 (ascii2hex(SerRcvBuf[1])<<28 )& 0xF0000000;
 829:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 830:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 831:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 832:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 833:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 834:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 835:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 836:./src/main.c  **** 		
 837:./src/main.c  **** 		// Set message type 29 bit RTR
 838:./src/main.c  **** 		CanTxMsg.Type = CAN_MSG_EXTENDED | CAN_MSG_RTR;
 839:./src/main.c  **** 	
 840:./src/main.c  **** 		// set DLC
 841:./src/main.c  **** 		CanTxMsg.Len = (ascii2hex(SerRcvBuf[9]))& 0xF;
 842:./src/main.c  **** 				
 843:./src/main.c  **** 		// send the message
 844:./src/main.c  **** 		CAN_UserWrite (CAN_BUS1, &CanTxMsg);
 845:./src/main.c  **** 	}
 846:./src/main.c  **** 	else {
 847:./src/main.c  **** 		Result = ret_ERROR;
 848:./src/main.c  **** 	}
 849:./src/main.c  **** 	//-------------------------------------------------
 850:./src/main.c  **** 
 851:./src/main.c  **** 	SerXmtBufPtr = 0;
 852:./src/main.c  **** 
 853:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 854:./src/main.c  **** 		if (Result == ret_OK) {
 855:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'z';
 856:./src/main.c  **** 			SerXmtBufPtr++;
 857:./src/main.c  **** 		}
 858:./src/main.c  **** 	}
 859:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 860:./src/main.c  **** 	SerXmtBufPtr++;
 861:./src/main.c  **** 	
 862:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 863:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 864:./src/main.c  **** }
 865:./src/main.c  **** /**************************************************/
 866:./src/main.c  **** 
 867:./src/main.c  **** //*************************************************
 868:./src/main.c  **** //! @brief	F[CR]
 869:./src/main.c  **** //! Read Status Flags.
 870:./src/main.c  **** //!
 871:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is open. 
 872:./src/main.c  **** //!
 873:./src/main.c  **** //! @param none
 874:./src/main.c  **** //!
 875:./src/main.c  **** //! @note example: F[CR]
 876:./src/main.c  **** //! @note Read Status Flags.
 877:./src/main.c  **** //!
 878:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is not open
 879:./src/main.c  **** //! @return	An F with 2 bytes BCD hex value plus CR (Ascii 13) for OK, e.g. F01[CR]
 880:./src/main.c  **** //! @li Bit 0 : CAN receive FIFO queue full
 881:./src/main.c  **** //! @li Bit 1 : CAN transmit FIFO queue full
 882:./src/main.c  **** //! @li Bit 2 : Error warning (EI), see SJA1000 datasheet
 883:./src/main.c  **** //! @li Bit 3 : Data Overrun (DOI), see SJA1000 datasheet
 884:./src/main.c  **** //! @li Bit 4 : Not used.
 885:./src/main.c  **** //! @li Bit 5 : Error Passive (EPI), see SJA1000 datasheet
 886:./src/main.c  **** //! @li Bit 6 : Arbitration Lost (ALI), see SJA1000 datasheet
 887:./src/main.c  **** //! @li Bit 7 : Bus Error (BEI), see SJA1000 datasheet
 888:./src/main.c  **** //!
 889:./src/main.c  **** static void GetStatusFlags(void) 
 890:./src/main.c  **** //-------------------------------------------------
 891:./src/main.c  **** {
 892:./src/main.c  **** //	u8_t 	Result;
 893:./src/main.c  **** 	
 894:./src/main.c  **** //	u8_t	shCANICR; // controller's interrupt flag register
 895:./src/main.c  **** 	u8_t 	statusbyte=0;
 896:./src/main.c  **** 
 897:./src/main.c  **** //	Result = ret_OK;
 898:./src/main.c  **** 	SerXmtBufPtr = 0;
 899:./src/main.c  **** 
 900:./src/main.c  **** 	if (CanChnOpen == 1){ // precondition	
 901:./src/main.c  **** 
 902:./src/main.c  **** 		// read status register from controller
 903:./src/main.c  **** 		//CAN_GetLastIR (CAN_BUS1, &shCANICR);
 904:./src/main.c  **** 		// mask out unspecified bits
 905:./src/main.c  **** 		statusbyte |= (C1ICR & 0xEC);
 906:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 907:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 908:./src/main.c  **** 		
 909:./src/main.c  **** 		SerRxOverrunOccurred = 0; 		// reset flag after reading
 910:./src/main.c  **** 		//statusbits.bit1 = (SerTxCongestionOccurred & 0x01); // transmit FIFO full
 911:./src/main.c  **** 		SerTxCongestionOccurred = 0; 	// reset flag after reading
 912:./src/main.c  **** 
 913:./src/main.c  **** 		// return result string
 914:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = 'F';
 915:./src/main.c  **** 		SerXmtBufPtr++;
 916:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii((statusbyte & 0xF0) >> 4);
 917:./src/main.c  **** 		SerXmtBufPtr++;
 918:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii (statusbyte & 0x0F);
 919:./src/main.c  **** 		SerXmtBufPtr++;
 920:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = ret_OK; // [<CR>]
 921:./src/main.c  **** 		SerXmtBufPtr++;
 922:./src/main.c  **** 
 923:./src/main.c  **** 	} // if CAN chn open
 924:./src/main.c  **** 	//-------------------------------------------------
 925:./src/main.c  **** 	else { // CAN channel was not open
 926:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = ret_ERROR;
 927:./src/main.c  **** 		SerXmtBufPtr++;
 928:./src/main.c  **** 	}
 929:./src/main.c  **** 	//-------------------------------------------------
 930:./src/main.c  **** 	
 931:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 932:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 933:./src/main.c  **** }
 934:./src/main.c  **** /**************************************************/
 935:./src/main.c  **** 
 936:./src/main.c  **** 
 937:./src/main.c  **** //*************************************************
 938:./src/main.c  **** //! @brief	Xn[CR]
 939:./src/main.c  **** //! Sets Auto Poll/Send ON/OFF for received frames. 
 940:./src/main.c  **** //!
 941:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is closed. 
 942:./src/main.c  **** //!
 943:./src/main.c  **** //! The value will be saved in EEPROM and remembered next time the PCAN-RS-232 is powered up.
 944:./src/main.c  **** //! It is set to OFF by default, to be compatible with old programs written for PCAN-RS-232. 
 945:./src/main.c  **** //! Setting it to ON will disable the P and A commands and
 946:./src/main.c  **** //! change the reply back from using the t and T command 
 947:./src/main.c  **** //! (see these commands for more information on the reply). 
 948:./src/main.c  **** //! It is strongly recommended to set this feature and upgrade from the old polling mechanism. 
 949:./src/main.c  **** //! Doing so will save bandwith and increases number of CAN frames that can be sent to the PCAN-RS-
 950:./src/main.c  **** //! With this feature set, CAN frames will be sent out on the RS232 as soon as the CAN channel is o
 951:./src/main.c  **** //!
 952:./src/main.c  **** //! @param n=0 turn off Auto Poll/Send feature
 953:./src/main.c  **** //! @param n=1 turn on Auto Poll/Send feature
 954:./src/main.c  **** //!
 955:./src/main.c  **** //! @note example 1: X0[CR]
 956:./src/main.c  **** //! @note Turn OFF the Auto Poll/Send feature
 957:./src/main.c  **** //! @note example 2: X1[CR]
 958:./src/main.c  **** //! @note Turn ON the Auto Poll/Send feature.
 959:./src/main.c  **** //!
 960:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is open
 961:./src/main.c  **** //! @return	CR (Ascii 13) for OK
 962:./src/main.c  **** //!
 963:./src/main.c  **** static void SetAutoPollAutoSend(void) 
 964:./src/main.c  **** //-------------------------------------------------
 965:./src/main.c  **** {
 966:./src/main.c  **** 	u8_t Result;
 967:./src/main.c  **** 	
 968:./src/main.c  **** 	Result = ret_OK;
 969:./src/main.c  **** 	
 970:./src/main.c  **** 	if (CanChnOpen == 0){ // precondition	
 971:./src/main.c  **** 		AutoPollAutoSend = ascii2hex(SerRcvBuf[1]);
 972:./src/main.c  **** 	}
 973:./src/main.c  **** 	else {
 974:./src/main.c  **** 		Result = ret_ERROR;
 975:./src/main.c  **** 	}
 976:./src/main.c  **** 	//-------------------------------------------------
 977:./src/main.c  **** 
 978:./src/main.c  **** 	SerXmtBufPtr = 0;
 979:./src/main.c  **** 
 980:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 981:./src/main.c  **** 	SerXmtBufPtr++;
 982:./src/main.c  **** 	
 983:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
 984:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 985:./src/main.c  **** }
 986:./src/main.c  **** /**************************************************/
 987:./src/main.c  **** 
 988:./src/main.c  **** 
 989:./src/main.c  **** 
 990:./src/main.c  **** //*************************************************
 991:./src/main.c  **** //! @brief	Wn[CR]
 992:./src/main.c  **** //! Filter mode setting. 
 993:./src/main.c  **** //!
 994:./src/main.c  **** //! @pre This command is accepted only if CAN channel is initialized but closed. 
 995:./src/main.c  **** //!
 996:./src/main.c  **** //! The setting is is saved in EEPROM and since remembered on next startup.
 997:./src/main.c  **** //!
 998:./src/main.c  **** //! @param n=0 set dual filter mode
 999:./src/main.c  **** //! @param n=1 set single filter mode
1000:./src/main.c  **** //!
1001:./src/main.c  **** //! @note example 1: W0[CR]
1002:./src/main.c  **** //! @note Set dual filter mode
1003:./src/main.c  **** //! @note example 2: W1[CR]
1004:./src/main.c  **** //! @note Set single filter mode
1005:./src/main.c  **** //!
1006:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR when CAN channel is open
1007:./src/main.c  **** //! @return	CR (Ascii 13) for OK
1008:./src/main.c  **** //!
1009:./src/main.c  **** static void SetFilterMode(void) 
1010:./src/main.c  **** //-------------------------------------------------
1011:./src/main.c  **** {
1012:./src/main.c  **** 	u8_t Result;
1013:./src/main.c  **** 	
1014:./src/main.c  **** 	Result = ret_OK;
1015:./src/main.c  **** 	
1016:./src/main.c  **** 	if (CanChnOpen == 0){ // precondition	
1017:./src/main.c  **** 		FilterMode = ascii2hex(SerRcvBuf[1]);
1018:./src/main.c  **** 	}
1019:./src/main.c  **** 	else {
1020:./src/main.c  **** 		Result = ret_ERROR;
1021:./src/main.c  **** 	}
1022:./src/main.c  **** 	//-------------------------------------------------
1023:./src/main.c  **** 
1024:./src/main.c  **** 	SerXmtBufPtr = 0;
1025:./src/main.c  **** 
1026:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
1027:./src/main.c  **** 	SerXmtBufPtr++;
1028:./src/main.c  **** 	
1029:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1030:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
1031:./src/main.c  **** }
1032:./src/main.c  **** /**************************************************/
1033:./src/main.c  **** 
1034:./src/main.c  **** 
1035:./src/main.c  **** //*************************************************
1036:./src/main.c  **** //! @brief	V[CR]
1037:./src/main.c  **** //! Get version number of both PCAN-RS-232 hardware and software
1038:./src/main.c  **** //!
1039:./src/main.c  **** //! @pre This command is always accepted.
1040:./src/main.c  **** //!
1041:./src/main.c  **** //! @param	none
1042:./src/main.c  **** //!
1043:./src/main.c  **** //! @note example: V[CR]
1044:./src/main.c  **** //! @note Get version numbers.
1045:./src/main.c  **** //!
1046:./src/main.c  **** //! @return	V and a 2 bytes BCD value for hardware version and a 2 byte BCD value for software vers
1047:./src/main.c  **** //!
1048:./src/main.c  **** static void GetVersionInfo(void) 
 340              		.loc 1 1048 13 view .LVU90
 341              	.LBB311:
1049:./src/main.c  **** //-------------------------------------------------
1050:./src/main.c  **** {
1051:./src/main.c  **** 	SerXmtBufPtr = 0;
 342              		.loc 1 1051 2 view .LVU91
1052:./src/main.c  **** 
1053:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = 'V';
 343              		.loc 1 1053 2 view .LVU92
1054:./src/main.c  **** 	SerXmtBufPtr++;
 344              		.loc 1 1054 2 view .LVU93
1055:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '0';
 345              		.loc 1 1055 2 view .LVU94
1056:./src/main.c  **** 	SerXmtBufPtr++;
 346              		.loc 1 1056 2 view .LVU95
1057:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '0';
 347              		.loc 1 1057 2 view .LVU96
1058:./src/main.c  **** 	SerXmtBufPtr++;
 348              		.loc 1 1058 2 view .LVU97
1059:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '0';
 349              		.loc 1 1059 2 view .LVU98
1060:./src/main.c  **** 	SerXmtBufPtr++;
 350              		.loc 1 1060 2 view .LVU99
1061:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '1';
 351              		.loc 1 1061 2 view .LVU100
1062:./src/main.c  **** 	SerXmtBufPtr++;
 352              		.loc 1 1062 2 view .LVU101
1063:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
 353              		.loc 1 1063 2 view .LVU102
1064:./src/main.c  **** 	SerXmtBufPtr++;
 354              		.loc 1 1064 14 is_stmt 0 view .LVU103
 355 01ec 0620A0E3 		mov	r2, #6
1053:./src/main.c  **** 	SerXmtBufPtr++;
 356              		.loc 1 1053 26 view .LVU104
 357 01f0 E40C9FE5 		ldr	r0, .L248+8
 358              	.LVL18:
1061:./src/main.c  **** 	SerXmtBufPtr++;
 359              		.loc 1 1061 26 view .LVU105
 360 01f4 E43C9FE5 		ldr	r3, .L248+12
1053:./src/main.c  **** 	SerXmtBufPtr++;
 361              		.loc 1 1053 26 view .LVU106
 362 01f8 280085E5 		str	r0, [r5, #40]
1065:./src/main.c  **** 
1066:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1067:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 363              		.loc 1 1067 2 view .LVU107
 364 01fc D41C9FE5 		ldr	r1, .L248+4
 365 0200 0000A0E3 		mov	r0, #0
1061:./src/main.c  **** 	SerXmtBufPtr++;
 366              		.loc 1 1061 26 view .LVU108
 367 0204 BC32C5E1 		strh	r3, [r5, #44]	@ movhi
1064:./src/main.c  **** 
 368              		.loc 1 1064 2 is_stmt 1 view .LVU109
1064:./src/main.c  **** 
 369              		.loc 1 1064 14 is_stmt 0 view .LVU110
 370 0208 4920C5E5 		strb	r2, [r5, #73]
 371              		.loc 1 1067 2 is_stmt 1 view .LVU111
 372 020c FEFFFFEB 		bl	SER_Write
 373              	.LVL19:
 374              	.L41:
 375              		.loc 1 1067 2 is_stmt 0 view .LVU112
 376              	.LBE311:
 377              	.LBE310:
 481:./src/main.c  **** 		// then blink red once
 378              		.loc 1 481 2 is_stmt 1 view .LVU113
 481:./src/main.c  **** 		// then blink red once
 379              		.loc 1 481 5 is_stmt 0 view .LVU114
 380 0210 0730DDE5 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 381 0214 070053E3 		cmp	r3, #7
 382 0218 ECFFFF1A 		bne	.L221
 383 021c E4FFFFEA 		b	.L42
 384              	.LVL20:
 385              	.L24:
 389:./src/main.c  **** 		//	SetAcceptanceCode();
 386              		.loc 1 389 3 is_stmt 1 view .LVU115
 389:./src/main.c  **** 		//	SetAcceptanceCode();
 387              		.loc 1 389 6 is_stmt 0 view .LVU116
 388 0220 090056E3 		cmp	r6, #9
 389 0224 E0FFFF1A 		bne	.L18
 380:./src/main.c  **** 			SER_Write (SER_PORT1, &RetValue, 1);
 390              		.loc 1 380 4 is_stmt 1 view .LVU117
 381:./src/main.c  **** 		}
 391              		.loc 1 381 4 view .LVU118
 392 0228 0120A0E3 		mov	r2, #1
 393 022c 07108DE2 		add	r1, sp, #7
 394 0230 0000A0E3 		mov	r0, #0
 395              	.LVL21:
 381:./src/main.c  **** 		}
 396              		.loc 1 381 4 is_stmt 0 view .LVU119
 397 0234 FEFFFFEB 		bl	SER_Write
 398              	.LVL22:
 399 0238 F4FFFFEA 		b	.L41
 400              	.LVL23:
 401              	.L27:
 358:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 402              		.loc 1 358 3 is_stmt 1 view .LVU120
 358:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 403              		.loc 1 358 6 is_stmt 0 view .LVU121
 404 023c 020056E3 		cmp	r6, #2
 405 0240 D9FFFF1A 		bne	.L18
 359:./src/main.c  **** 			SetAutoPollAutoSend();
 406              		.loc 1 359 8 view .LVU122
 407 0244 0500D5E5 		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 408              	.LVL24:
 409              	.LBB312:
 410              	.LBI312:
  87:./src/main.c  **** {
 411              		.loc 1 87 6 is_stmt 1 view .LVU123
 412              	.LBB313:
  89:./src/main.c  **** 	{
 413              		.loc 1 89 2 view .LVU124
  89:./src/main.c  **** 	{
 414              		.loc 1 89 4 is_stmt 0 view .LVU125
 415 0248 413040E2 		sub	r3, r0, #65
 416 024c 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 417              		.loc 1 91 7 view .LVU126
 418 0250 37304092 		subls	r3, r0, #55
  92:./src/main.c  **** 	}
 419              		.loc 1 92 14 view .LVU127
 420 0254 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 421              		.loc 1 89 4 view .LVU128
 422 0258 0400009A 		bls	.L205
  94:./src/main.c  **** 	{
 423              		.loc 1 94 2 is_stmt 1 view .LVU129
  94:./src/main.c  **** 	{
 424              		.loc 1 94 4 is_stmt 0 view .LVU130
 425 025c 613040E2 		sub	r3, r0, #97
 426 0260 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 427              		.loc 1 96 3 is_stmt 1 view .LVU131
 428              	.LVL25:
  97:./src/main.c  **** 	}
 429              		.loc 1 97 3 view .LVU132
 430              	.LBB314:
 431              	.LBI314:
  87:./src/main.c  **** {
 432              		.loc 1 87 6 view .LVU133
 433              	.LBB315:
 100:./src/main.c  **** 	{
 434              		.loc 1 100 2 view .LVU134
 104:./src/main.c  **** }
 435              		.loc 1 104 2 view .LVU135
 436              	.LBE315:
 437              	.LBE314:
  96:./src/main.c  **** 		return chr &0xF;
 438              		.loc 1 96 7 is_stmt 0 view .LVU136
 439 0264 57304092 		subls	r3, r0, #87
  97:./src/main.c  **** 	}
 440              		.loc 1 97 14 view .LVU137
 441 0268 0F300392 		andls	r3, r3, #15
 442              	.LBB317:
 443              	.LBB316:
 104:./src/main.c  **** }
 444              		.loc 1 104 13 view .LVU138
 445 026c 0F300082 		andhi	r3, r0, #15
 446              	.LVL26:
 447              	.L205:
 104:./src/main.c  **** }
 448              		.loc 1 104 13 view .LVU139
 449              	.LBE316:
 450              	.LBE317:
 451              	.LBE313:
 452              	.LBE312:
 359:./src/main.c  **** 			SetAutoPollAutoSend();
 453              		.loc 1 359 3 view .LVU140
 454 0270 010053E3 		cmp	r3, #1
 455 0274 CCFFFF8A 		bhi	.L18
 360:./src/main.c  **** 		}
 456              		.loc 1 360 4 is_stmt 1 view .LVU141
 457              	.LBB318:
 458              	.LBI318:
 963:./src/main.c  **** //-------------------------------------------------
 459              		.loc 1 963 13 view .LVU142
 460              	.LBB319:
 966:./src/main.c  **** 	
 461              		.loc 1 966 2 view .LVU143
 968:./src/main.c  **** 	
 462              		.loc 1 968 2 view .LVU144
 463              	.LVL27:
 970:./src/main.c  **** 		AutoPollAutoSend = ascii2hex(SerRcvBuf[1]);
 464              		.loc 1 970 2 view .LVU145
 970:./src/main.c  **** 		AutoPollAutoSend = ascii2hex(SerRcvBuf[1]);
 465              		.loc 1 970 5 is_stmt 0 view .LVU146
 466 0278 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 467 027c 000053E3 		cmp	r3, #0
 468 0280 A000001A 		bne	.L230
 971:./src/main.c  **** 	}
 469              		.loc 1 971 3 is_stmt 1 view .LVU147
 971:./src/main.c  **** 	}
 470              		.loc 1 971 22 is_stmt 0 view .LVU148
 471 0284 FEFFFFEB 		bl	ascii2hex
 472              	.LVL28:
 971:./src/main.c  **** 	}
 473              		.loc 1 971 20 view .LVU149
 474 0288 543C9FE5 		ldr	r3, .L248+16
 475 028c 0500C3E5 		strb	r0, [r3, #5]
 476              	.LVL29:
 477              	.L220:
 971:./src/main.c  **** 	}
 478              		.loc 1 971 20 view .LVU150
 479              	.LBE319:
 480              	.LBE318:
 481              	.LBB320:
 482              	.LBB321:
1068:./src/main.c  **** }
1069:./src/main.c  **** /**************************************************/
1070:./src/main.c  **** 
1071:./src/main.c  **** 
1072:./src/main.c  **** 
1073:./src/main.c  **** //! Get serial number of the PCAN-RS-232.
1074:./src/main.c  **** //!
1075:./src/main.c  **** //! @pre This command is always accepted.
1076:./src/main.c  **** //!
1077:./src/main.c  **** //! @param	none
1078:./src/main.c  **** //!
1079:./src/main.c  **** //! @note example: N[CR]
1080:./src/main.c  **** //! @note Get serial number.
1081:./src/main.c  **** //!
1082:./src/main.c  **** //! @note The serial number may be composed of both numerical and alphanumerical values. 
1083:./src/main.c  **** //! The serial number is also printed on the PCAN-RS-232 enclosure.
1084:./src/main.c  **** //!
1085:./src/main.c  **** //! @return	N and a 4 bytes value for serial number plus CR (Ascii 13) for OK, e.g. NA123[CR]
1086:./src/main.c  **** //!
1087:./src/main.c  **** static void GetSerialNumber(void) 
1088:./src/main.c  **** //-------------------------------------------------
1089:./src/main.c  **** {
1090:./src/main.c  **** 	SerXmtBufPtr = 0;
1091:./src/main.c  **** 
1092:./src/main.c  ****  	SerXmtBuf[SerXmtBufPtr] = 'N';
1093:./src/main.c  **** 	SerXmtBufPtr++;
1094:./src/main.c  **** 
1095:./src/main.c  **** 	memcpy (&SerXmtBuf[SerXmtBufPtr],"0001",4);
1096:./src/main.c  **** //	memcpy (&SerXmtBuf[SerXmtBufPtr],EepromData.DeviceSN,4);
1097:./src/main.c  **** 	SerXmtBufPtr = SerXmtBufPtr + 4;
1098:./src/main.c  **** 
1099:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
1100:./src/main.c  **** 	SerXmtBufPtr++;
1101:./src/main.c  **** 	
1102:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1103:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
1104:./src/main.c  **** }
1105:./src/main.c  **** /**************************************************/
1106:./src/main.c  **** 
1107:./src/main.c  **** 
1108:./src/main.c  **** //*************************************************
1109:./src/main.c  **** //! @brief	Zn[CR]
1110:./src/main.c  **** //! Sets Time Stamp ON/OFF for received frames only.
1111:./src/main.c  **** //!
1112:./src/main.c  **** //! @pre This command is accepted only if the CAN channel is closed. 
1113:./src/main.c  **** //!
1114:./src/main.c  **** //! This command is set to OFF by default (to be compatible with older programs written for PCAN-RS
1115:./src/main.c  **** //! Setting it to ON will add 4 bytes sent out from PCAN-RS-232 when the Auto Poll/Send feature is 
1116:./src/main.c  **** //! With Timestamp ON, each message gets a time in milliseconds when it was received at the PCAN-RS
1117:./src/main.c  **** //! this can be used for realtime applications for e.g. knowing time inbetween messages etc.
1118:./src/main.c  **** //! Using this feature will decrease bandwith on the PCAN-RS-232, since it adds 4 bytes to each mes
1119:./src/main.c  **** //! If the timestamp is OFF, the incoming frames looks like this:
1120:./src/main.c  **** //! t10021133[CR] (a standard frame with ID=0x100 & 2 bytes)
1121:./src/main.c  **** //! If the timestamp is ON, the incoming frames looks like this:
1122:./src/main.c  **** //! t100211334D67[CR] (a standard frame with ID=0x100 & 2 bytes)
1123:./src/main.c  **** //! Note the last 4 bytes 0x4D67, which is a timestamp for this specific message in milliseconds (a
1124:./src/main.c  **** //! The timer in the PCAN-RS-232 starts at zero 0x0000 and goes up to 0xEA5F before it loops around
1125:./src/main.c  **** //! This corresponds to 60,000mS (i.e. 1 minute, which will be more than enough in most systems).
1126:./src/main.c  **** //!
1127:./src/main.c  **** //! @param	n=0 Turn OFF the timestamp feature 
1128:./src/main.c  **** //! @param	n=1 Turn ON the timestamp feature
1129:./src/main.c  **** //!
1130:./src/main.c  **** //! @note The value is saved in EEPROM and is set each time the PCAN-RS-232 is powered up.
1131:./src/main.c  **** //! @note example 1: Z0[CR]
1132:./src/main.c  **** //! @note Turn OFF the Time Stamp feature.
1133:./src/main.c  **** //! @note example 2: Z1[CR]
1134:./src/main.c  **** //! @note Turn ON the Time Stamp feature.
1135:./src/main.c  **** //!
1136:./src/main.c  **** //! @return	BELL (Ascii 7) for ERROR  when CAN channel is open
1137:./src/main.c  **** //! @return	CR (Ascii 13) for OK
1138:./src/main.c  **** //!
1139:./src/main.c  **** static void SetRcvTimestampMode(void) 
1140:./src/main.c  **** //-------------------------------------------------
1141:./src/main.c  **** {
1142:./src/main.c  **** 	u8_t Result;
1143:./src/main.c  **** 	
1144:./src/main.c  **** 	Result = ret_OK;
1145:./src/main.c  **** 		
1146:./src/main.c  **** 	if (CanChnOpen == 0){ // precondition
1147:./src/main.c  **** 		CanRcvTimestampOn = ascii2hex(SerRcvBuf[1]);
1148:./src/main.c  **** 	}
1149:./src/main.c  **** 	else  {
1150:./src/main.c  **** 		Result = ret_ERROR;
1151:./src/main.c  **** 	}
1152:./src/main.c  **** 	//-------------------------------------------------
1153:./src/main.c  **** 
1154:./src/main.c  **** 	SerXmtBufPtr = 0;
 483              		.loc 1 1154 2 is_stmt 1 view .LVU151
1155:./src/main.c  **** 
1156:./src/main.c  **** 	SerXmtBuf[SerXmtBufPtr] = Result;
 484              		.loc 1 1156 2 view .LVU152
1157:./src/main.c  **** 	SerXmtBufPtr++;
 485              		.loc 1 1157 14 is_stmt 0 view .LVU153
 486 0290 0120A0E3 		mov	r2, #1
1158:./src/main.c  **** 	
1159:./src/main.c  **** 	// Send ASCII string to RS232 UART (Host-PC)
1160:./src/main.c  **** 	SER_Write (SER_PORT1, &SerXmtBuf, SerXmtBufPtr);
 487              		.loc 1 1160 2 view .LVU154
 488 0294 3C1C9FE5 		ldr	r1, .L248+4
 489 0298 0000A0E3 		mov	r0, #0
1156:./src/main.c  **** 	SerXmtBufPtr++;
 490              		.loc 1 1156 26 view .LVU155
 491 029c 2840C5E5 		strb	r4, [r5, #40]
1157:./src/main.c  **** 	SerXmtBufPtr++;
 492              		.loc 1 1157 2 is_stmt 1 view .LVU156
1157:./src/main.c  **** 	SerXmtBufPtr++;
 493              		.loc 1 1157 14 is_stmt 0 view .LVU157
 494 02a0 4920C5E5 		strb	r2, [r5, #73]
 495              		.loc 1 1160 2 is_stmt 1 view .LVU158
 496 02a4 FEFFFFEB 		bl	SER_Write
 497              	.LVL30:
1161:./src/main.c  **** }
 498              		.loc 1 1161 1 is_stmt 0 view .LVU159
 499 02a8 D8FFFFEA 		b	.L41
 500              	.LVL31:
 501              	.L26:
 502              		.loc 1 1161 1 view .LVU160
 503              	.LBE321:
 504              	.LBE320:
 440:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 505              		.loc 1 440 3 is_stmt 1 view .LVU161
 440:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 506              		.loc 1 440 6 is_stmt 0 view .LVU162
 507 02ac 020056E3 		cmp	r6, #2
 508 02b0 BDFFFF1A 		bne	.L18
 441:./src/main.c  **** 			SetRcvTimestampMode(); // u8_t TimestampMode
 509              		.loc 1 441 8 view .LVU163
 510 02b4 0500D5E5 		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 511              	.LVL32:
 512              	.LBB324:
 513              	.LBI324:
  87:./src/main.c  **** {
 514              		.loc 1 87 6 is_stmt 1 view .LVU164
 515              	.LBB325:
  89:./src/main.c  **** 	{
 516              		.loc 1 89 2 view .LVU165
  89:./src/main.c  **** 	{
 517              		.loc 1 89 4 is_stmt 0 view .LVU166
 518 02b8 413040E2 		sub	r3, r0, #65
 519 02bc 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 520              		.loc 1 91 7 view .LVU167
 521 02c0 37304092 		subls	r3, r0, #55
  92:./src/main.c  **** 	}
 522              		.loc 1 92 14 view .LVU168
 523 02c4 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 524              		.loc 1 89 4 view .LVU169
 525 02c8 0400009A 		bls	.L217
  94:./src/main.c  **** 	{
 526              		.loc 1 94 2 is_stmt 1 view .LVU170
  94:./src/main.c  **** 	{
 527              		.loc 1 94 4 is_stmt 0 view .LVU171
 528 02cc 613040E2 		sub	r3, r0, #97
 529 02d0 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 530              		.loc 1 96 3 is_stmt 1 view .LVU172
 531              	.LVL33:
  97:./src/main.c  **** 	}
 532              		.loc 1 97 3 view .LVU173
 533              	.LBB326:
 534              	.LBI326:
  87:./src/main.c  **** {
 535              		.loc 1 87 6 view .LVU174
 536              	.LBB327:
 100:./src/main.c  **** 	{
 537              		.loc 1 100 2 view .LVU175
 104:./src/main.c  **** }
 538              		.loc 1 104 2 view .LVU176
 539              	.LBE327:
 540              	.LBE326:
  96:./src/main.c  **** 		return chr &0xF;
 541              		.loc 1 96 7 is_stmt 0 view .LVU177
 542 02d4 57304092 		subls	r3, r0, #87
  97:./src/main.c  **** 	}
 543              		.loc 1 97 14 view .LVU178
 544 02d8 0F300392 		andls	r3, r3, #15
 545              	.LBB329:
 546              	.LBB328:
 104:./src/main.c  **** }
 547              		.loc 1 104 13 view .LVU179
 548 02dc 0F300082 		andhi	r3, r0, #15
 549              	.LVL34:
 550              	.L217:
 104:./src/main.c  **** }
 551              		.loc 1 104 13 view .LVU180
 552              	.LBE328:
 553              	.LBE329:
 554              	.LBE325:
 555              	.LBE324:
 441:./src/main.c  **** 			SetRcvTimestampMode(); // u8_t TimestampMode
 556              		.loc 1 441 3 view .LVU181
 557 02e0 010053E3 		cmp	r3, #1
 558 02e4 B0FFFF8A 		bhi	.L18
 442:./src/main.c  **** 		//	WriteToEeprom(0); 				// 0 = write current settings to EEPROM
 559              		.loc 1 442 4 is_stmt 1 view .LVU182
 560              	.LBB330:
 561              	.LBI320:
1139:./src/main.c  **** //-------------------------------------------------
 562              		.loc 1 1139 13 view .LVU183
 563              	.LBB322:
1142:./src/main.c  **** 	
 564              		.loc 1 1142 2 view .LVU184
1144:./src/main.c  **** 		
 565              		.loc 1 1144 2 view .LVU185
 566              	.LVL35:
1146:./src/main.c  **** 		CanRcvTimestampOn = ascii2hex(SerRcvBuf[1]);
 567              		.loc 1 1146 2 view .LVU186
1146:./src/main.c  **** 		CanRcvTimestampOn = ascii2hex(SerRcvBuf[1]);
 568              		.loc 1 1146 5 is_stmt 0 view .LVU187
 569 02e8 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 570 02ec 000053E3 		cmp	r3, #0
 571 02f0 8400001A 		bne	.L230
1147:./src/main.c  **** 	}
 572              		.loc 1 1147 3 is_stmt 1 view .LVU188
1147:./src/main.c  **** 	}
 573              		.loc 1 1147 23 is_stmt 0 view .LVU189
 574 02f4 FEFFFFEB 		bl	ascii2hex
 575              	.LVL36:
1147:./src/main.c  **** 	}
 576              		.loc 1 1147 21 view .LVU190
 577 02f8 5E00C5E5 		strb	r0, [r5, #94]
 578 02fc E3FFFFEA 		b	.L220
 579              	.LVL37:
 580              	.L23:
1147:./src/main.c  **** 	}
 581              		.loc 1 1147 21 view .LVU191
 582              	.LBE322:
 583              	.LBE330:
 314:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 584              		.loc 1 314 3 is_stmt 1 view .LVU192
 314:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 585              		.loc 1 314 6 is_stmt 0 view .LVU193
 586 0300 050056E3 		cmp	r6, #5
 587 0304 A8FFFF1A 		bne	.L18
 315:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 588              		.loc 1 315 3 view .LVU194
 589 0308 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 590 030c 010053E3 		cmp	r3, #1
 591 0310 A5FFFF1A 		bne	.L18
 316:./src/main.c  **** 			TransmitStandardRtr();
 592              		.loc 1 316 19 view .LVU195
 593 0314 C86B9FE5 		ldr	r6, .L248+16
 594              	.LVL38:
 316:./src/main.c  **** 			TransmitStandardRtr();
 595              		.loc 1 316 3 view .LVU196
 596 0318 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 597              	.LVL39:
 316:./src/main.c  **** 			TransmitStandardRtr();
 598              		.loc 1 316 3 view .LVU197
 599 031c 000052E3 		cmp	r2, #0
 600 0320 A1FFFF1A 		bne	.L18
 317:./src/main.c  **** 		}
 601              		.loc 1 317 4 is_stmt 1 view .LVU198
 602              	.LBB331:
 603              	.LBI331:
 741:./src/main.c  **** //-------------------------------------------------
 604              		.loc 1 741 13 view .LVU199
 605              	.LBB332:
 744:./src/main.c  **** 
 606              		.loc 1 744 2 view .LVU200
 746:./src/main.c  **** 
 607              		.loc 1 746 2 view .LVU201
 608              	.LVL40:
 749:./src/main.c  **** 
 609              		.loc 1 749 2 view .LVU202
 752:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 610              		.loc 1 752 3 view .LVU203
 756:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 611              		.loc 1 756 34 is_stmt 0 view .LVU204
 612 0324 0530D5E5 		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 613              	.LBB333:
 614              	.LBB334:
  89:./src/main.c  **** 	{
 615              		.loc 1 89 4 view .LVU205
 616 0328 411043E2 		sub	r1, r3, #65
 617 032c 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 618              		.loc 1 91 7 view .LVU206
 619 0330 37304392 		subls	r3, r3, #55
 620              	.LBE334:
 621              	.LBE333:
 752:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 622              		.loc 1 752 22 view .LVU207
 623 0334 542085E5 		str	r2, [r5, #84]
 753:./src/main.c  **** 	
 624              		.loc 1 753 3 is_stmt 1 view .LVU208
 753:./src/main.c  **** 	
 625              		.loc 1 753 22 is_stmt 0 view .LVU209
 626 0338 582085E5 		str	r2, [r5, #88]
 756:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 627              		.loc 1 756 3 is_stmt 1 view .LVU210
 628              	.LBB338:
 629              	.LBI333:
  87:./src/main.c  **** {
 630              		.loc 1 87 6 view .LVU211
 631              	.LBB337:
  89:./src/main.c  **** 	{
 632              		.loc 1 89 2 view .LVU212
  92:./src/main.c  **** 	}
 633              		.loc 1 92 14 is_stmt 0 view .LVU213
 634 033c 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 635              		.loc 1 89 4 view .LVU214
 636 0340 0400009A 		bls	.L145
  94:./src/main.c  **** 	{
 637              		.loc 1 94 2 is_stmt 1 view .LVU215
  94:./src/main.c  **** 	{
 638              		.loc 1 94 19 is_stmt 0 view .LVU216
 639 0344 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 640              		.loc 1 94 4 view .LVU217
 641 0348 FF2002E2 		and	r2, r2, #255
 642 034c 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 643              		.loc 1 96 3 is_stmt 1 view .LVU218
 644              	.LVL41:
  97:./src/main.c  **** 	}
 645              		.loc 1 97 3 view .LVU219
  96:./src/main.c  **** 		return chr &0xF;
 646              		.loc 1 96 7 is_stmt 0 view .LVU220
 647 0350 57304392 		subls	r3, r3, #87
 648              	.LVL42:
 649              	.LBB335:
 650              	.LBI335:
  87:./src/main.c  **** {
 651              		.loc 1 87 6 is_stmt 1 view .LVU221
 652              	.LBB336:
 100:./src/main.c  **** 	{
 653              		.loc 1 100 2 view .LVU222
 104:./src/main.c  **** }
 654              		.loc 1 104 2 view .LVU223
 104:./src/main.c  **** }
 655              		.loc 1 104 13 is_stmt 0 view .LVU224
 656 0354 0F3003E2 		and	r3, r3, #15
 657              	.LVL43:
 658              	.L145:
 104:./src/main.c  **** }
 659              		.loc 1 104 13 view .LVU225
 660              	.LBE336:
 661              	.LBE335:
 662              	.LBE337:
 663              	.LBE338:
 757:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 664              		.loc 1 757 34 view .LVU226
 665 0358 0620D5E5 		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 666              	.LBB339:
 667              	.LBB340:
  89:./src/main.c  **** 	{
 668              		.loc 1 89 4 view .LVU227
 669 035c 411042E2 		sub	r1, r2, #65
 670 0360 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 671              		.loc 1 91 7 view .LVU228
 672 0364 37204292 		subls	r2, r2, #55
 673              	.LBE340:
 674              	.LBE339:
 756:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 675              		.loc 1 756 57 view .LVU229
 676 0368 0334A0E1 		lsl	r3, r3, #8
 757:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 677              		.loc 1 757 3 is_stmt 1 view .LVU230
 678              	.LBB344:
 679              	.LBI339:
  87:./src/main.c  **** {
 680              		.loc 1 87 6 view .LVU231
 681              	.LBB343:
  89:./src/main.c  **** 	{
 682              		.loc 1 89 2 view .LVU232
  92:./src/main.c  **** 	}
 683              		.loc 1 92 14 is_stmt 0 view .LVU233
 684 036c 0F100292 		andls	r1, r2, #15
  89:./src/main.c  **** 	{
 685              		.loc 1 89 4 view .LVU234
 686 0370 0400009A 		bls	.L149
  94:./src/main.c  **** 	{
 687              		.loc 1 94 2 is_stmt 1 view .LVU235
  94:./src/main.c  **** 	{
 688              		.loc 1 94 19 is_stmt 0 view .LVU236
 689 0374 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 690              		.loc 1 94 4 view .LVU237
 691 0378 FF1001E2 		and	r1, r1, #255
 692 037c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 693              		.loc 1 96 3 is_stmt 1 view .LVU238
 694              	.LVL44:
  97:./src/main.c  **** 	}
 695              		.loc 1 97 3 view .LVU239
  96:./src/main.c  **** 		return chr &0xF;
 696              		.loc 1 96 7 is_stmt 0 view .LVU240
 697 0380 57204292 		subls	r2, r2, #87
 698              	.LVL45:
 699              	.LBB341:
 700              	.LBI341:
  87:./src/main.c  **** {
 701              		.loc 1 87 6 is_stmt 1 view .LVU241
 702              	.LBB342:
 100:./src/main.c  **** 	{
 703              		.loc 1 100 2 view .LVU242
 104:./src/main.c  **** }
 704              		.loc 1 104 2 view .LVU243
 104:./src/main.c  **** }
 705              		.loc 1 104 13 is_stmt 0 view .LVU244
 706 0384 0F1002E2 		and	r1, r2, #15
 707              	.LVL46:
 708              	.L149:
 104:./src/main.c  **** }
 709              		.loc 1 104 13 view .LVU245
 710              	.LBE342:
 711              	.LBE341:
 712              	.LBE343:
 713              	.LBE344:
 758:./src/main.c  **** 		
 714              		.loc 1 758 34 view .LVU246
 715 0388 0720D5E5 		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 757:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 716              		.loc 1 757 30 view .LVU247
 717 038c 013283E1 		orr	r3, r3, r1, lsl #4
 758:./src/main.c  **** 		
 718              		.loc 1 758 3 is_stmt 1 view .LVU248
 719              	.LVL47:
 720              	.LBB345:
 721              	.LBI345:
  87:./src/main.c  **** {
 722              		.loc 1 87 6 view .LVU249
 723              	.LBB346:
  89:./src/main.c  **** 	{
 724              		.loc 1 89 2 view .LVU250
  89:./src/main.c  **** 	{
 725              		.loc 1 89 4 is_stmt 0 view .LVU251
 726 0390 411042E2 		sub	r1, r2, #65
 727 0394 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 728              		.loc 1 91 7 view .LVU252
 729 0398 37204292 		subls	r2, r2, #55
 730              	.LVL48:
  92:./src/main.c  **** 	}
 731              		.loc 1 92 14 view .LVU253
 732 039c 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 733              		.loc 1 89 4 view .LVU254
 734 03a0 0400009A 		bls	.L153
  94:./src/main.c  **** 	{
 735              		.loc 1 94 2 is_stmt 1 view .LVU255
  94:./src/main.c  **** 	{
 736              		.loc 1 94 19 is_stmt 0 view .LVU256
 737 03a4 611042E2 		sub	r1, r2, #97
 738              	.LVL49:
  94:./src/main.c  **** 	{
 739              		.loc 1 94 4 view .LVU257
 740 03a8 FF1001E2 		and	r1, r1, #255
 741 03ac 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 742              		.loc 1 96 3 is_stmt 1 view .LVU258
 743              	.LVL50:
  97:./src/main.c  **** 	}
 744              		.loc 1 97 3 view .LVU259
  96:./src/main.c  **** 		return chr &0xF;
 745              		.loc 1 96 7 is_stmt 0 view .LVU260
 746 03b0 57204292 		subls	r2, r2, #87
 747              	.LVL51:
 748              	.LBB347:
 749              	.LBI347:
  87:./src/main.c  **** {
 750              		.loc 1 87 6 is_stmt 1 view .LVU261
 751              	.LBB348:
 100:./src/main.c  **** 	{
 752              		.loc 1 100 2 view .LVU262
 104:./src/main.c  **** }
 753              		.loc 1 104 2 view .LVU263
 104:./src/main.c  **** }
 754              		.loc 1 104 13 is_stmt 0 view .LVU264
 755 03b4 0F2002E2 		and	r2, r2, #15
 756              	.LVL52:
 757              	.L153:
 104:./src/main.c  **** }
 758              		.loc 1 104 13 view .LVU265
 759              	.LBE348:
 760              	.LBE347:
 761              	.LBE346:
 762              	.LBE345:
 761:./src/main.c  **** 	
 763              		.loc 1 761 17 view .LVU266
 764 03b8 0110A0E3 		mov	r1, #1
 758:./src/main.c  **** 		
 765              		.loc 1 758 30 view .LVU267
 766 03bc 032082E1 		orr	r2, r2, r3
 764:./src/main.c  **** 				
 767              		.loc 1 764 19 view .LVU268
 768 03c0 0830D5E5 		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 758:./src/main.c  **** 		
 769              		.loc 1 758 15 view .LVU269
 770 03c4 502085E5 		str	r2, [r5, #80]
 761:./src/main.c  **** 	
 771              		.loc 1 761 3 is_stmt 1 view .LVU270
 772              	.LBB349:
 773              	.LBB350:
  89:./src/main.c  **** 	{
 774              		.loc 1 89 4 is_stmt 0 view .LVU271
 775 03c8 412043E2 		sub	r2, r3, #65
 776 03cc 190052E3 		cmp	r2, #25
 777              	.LBE350:
 778              	.LBE349:
 761:./src/main.c  **** 	
 779              		.loc 1 761 17 view .LVU272
 780 03d0 4E10C5E5 		strb	r1, [r5, #78]
 764:./src/main.c  **** 				
 781              		.loc 1 764 3 is_stmt 1 view .LVU273
 782              	.LVL53:
 783              	.LBB352:
 784              	.LBI349:
  87:./src/main.c  **** {
 785              		.loc 1 87 6 view .LVU274
 786              	.LBB351:
  89:./src/main.c  **** 	{
 787              		.loc 1 89 2 view .LVU275
  89:./src/main.c  **** 	{
 788              		.loc 1 89 4 is_stmt 0 view .LVU276
 789 03d4 EB01009A 		bls	.L243
 790              	.LVL54:
 791              	.L193:
  89:./src/main.c  **** 	{
 792              		.loc 1 89 4 view .LVU277
 793              	.LBE351:
 794              	.LBE352:
 795              	.LBE332:
 796              	.LBE331:
 797              	.LBB353:
 798              	.LBB354:
 799              	.LBB355:
 800              	.LBB356:
  94:./src/main.c  **** 	{
 801              		.loc 1 94 2 is_stmt 1 view .LVU278
  94:./src/main.c  **** 	{
 802              		.loc 1 94 19 is_stmt 0 view .LVU279
 803 03d8 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 804              		.loc 1 94 4 view .LVU280
 805 03dc FF2002E2 		and	r2, r2, #255
 806 03e0 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 807              		.loc 1 96 3 is_stmt 1 view .LVU281
 808              	.LVL55:
  97:./src/main.c  **** 	}
 809              		.loc 1 97 3 view .LVU282
  96:./src/main.c  **** 		return chr &0xF;
 810              		.loc 1 96 7 is_stmt 0 view .LVU283
 811 03e4 57304392 		subls	r3, r3, #87
 812              	.LVL56:
 813              	.LBB357:
 814              	.LBI357:
  87:./src/main.c  **** {
 815              		.loc 1 87 6 is_stmt 1 view .LVU284
 816              	.LBB358:
 100:./src/main.c  **** 	{
 817              		.loc 1 100 2 view .LVU285
 104:./src/main.c  **** }
 818              		.loc 1 104 2 view .LVU286
 104:./src/main.c  **** }
 819              		.loc 1 104 13 is_stmt 0 view .LVU287
 820 03e8 0F3003E2 		and	r3, r3, #15
 821              	.LVL57:
 822              	.L194:
 104:./src/main.c  **** }
 823              		.loc 1 104 13 view .LVU288
 824              	.LBE358:
 825              	.LBE357:
 826              	.LBE356:
 827              	.LBE355:
 844:./src/main.c  **** 	}
 828              		.loc 1 844 3 view .LVU289
 829 03ec F41A9FE5 		ldr	r1, .L248+20
 830 03f0 0000A0E3 		mov	r0, #0
 831              	.LVL58:
 841:./src/main.c  **** 				
 832              		.loc 1 841 16 view .LVU290
 833 03f4 4F30C5E5 		strb	r3, [r5, #79]
 844:./src/main.c  **** 	}
 834              		.loc 1 844 3 is_stmt 1 view .LVU291
 835 03f8 FEFFFFEB 		bl	CAN_UserWrite
 836              	.LVL59:
 851:./src/main.c  **** 
 837              		.loc 1 851 2 view .LVU292
 851:./src/main.c  **** 
 838              		.loc 1 851 15 is_stmt 0 view .LVU293
 839 03fc 0020A0E3 		mov	r2, #0
 853:./src/main.c  **** 		if (Result == ret_OK) {
 840              		.loc 1 853 5 view .LVU294
 841 0400 0530D6E5 		ldrb	r3, [r6, #5]	@ zero_extendqisi2
 842 0404 010053E3 		cmp	r3, #1
 851:./src/main.c  **** 
 843              		.loc 1 851 15 view .LVU295
 844 0408 4920C5E5 		strb	r2, [r5, #73]
 853:./src/main.c  **** 		if (Result == ret_OK) {
 845              		.loc 1 853 2 is_stmt 1 view .LVU296
 854:./src/main.c  **** 			SerXmtBuf[SerXmtBufPtr] = 'z';
 846              		.loc 1 854 3 view .LVU297
 855:./src/main.c  **** 			SerXmtBufPtr++;
 847              		.loc 1 855 4 view .LVU298
 855:./src/main.c  **** 			SerXmtBufPtr++;
 848              		.loc 1 855 28 is_stmt 0 view .LVU299
 849 040c 7A20A003 		moveq	r2, #122
 859:./src/main.c  **** 	SerXmtBufPtr++;
 850              		.loc 1 859 26 view .LVU300
 851 0410 0DC0A0E3 		mov	ip, #13
 856:./src/main.c  **** 		}
 852              		.loc 1 856 16 view .LVU301
 853 0414 4930C505 		strbeq	r3, [r5, #73]
 859:./src/main.c  **** 	SerXmtBufPtr++;
 854              		.loc 1 859 11 view .LVU302
 855 0418 4930D5E5 		ldrb	r3, [r5, #73]	@ zero_extendqisi2
 855:./src/main.c  **** 			SerXmtBufPtr++;
 856              		.loc 1 855 28 view .LVU303
 857 041c 2820C505 		strbeq	r2, [r5, #40]
 856:./src/main.c  **** 		}
 858              		.loc 1 856 4 is_stmt 1 view .LVU304
 859:./src/main.c  **** 	SerXmtBufPtr++;
 859              		.loc 1 859 2 view .LVU305
 860:./src/main.c  **** 	
 860              		.loc 1 860 14 is_stmt 0 view .LVU306
 861 0420 012083E2 		add	r2, r3, #1
 862 0424 FF2002E2 		and	r2, r2, #255
 859:./src/main.c  **** 	SerXmtBufPtr++;
 863              		.loc 1 859 26 view .LVU307
 864 0428 033085E0 		add	r3, r5, r3
 860:./src/main.c  **** 	
 865              		.loc 1 860 14 view .LVU308
 866 042c 4920C5E5 		strb	r2, [r5, #73]
 863:./src/main.c  **** }
 867              		.loc 1 863 2 view .LVU309
 868 0430 A01A9FE5 		ldr	r1, .L248+4
 859:./src/main.c  **** 	SerXmtBufPtr++;
 869              		.loc 1 859 26 view .LVU310
 870 0434 28C0C3E5 		strb	ip, [r3, #40]
 860:./src/main.c  **** 	
 871              		.loc 1 860 2 is_stmt 1 view .LVU311
 863:./src/main.c  **** }
 872              		.loc 1 863 2 view .LVU312
 873 0438 0000A0E3 		mov	r0, #0
 874 043c FEFFFFEB 		bl	SER_Write
 875              	.LVL60:
 864:./src/main.c  **** /**************************************************/
 876              		.loc 1 864 1 is_stmt 0 view .LVU313
 877 0440 72FFFFEA 		b	.L41
 878              	.LVL61:
 879              	.L22:
 864:./src/main.c  **** /**************************************************/
 880              		.loc 1 864 1 view .LVU314
 881              	.LBE354:
 882              	.LBE353:
 241:./src/main.c  **** 			SetCanBTR0BTR1();
 883              		.loc 1 241 3 is_stmt 1 view .LVU315
 241:./src/main.c  **** 			SetCanBTR0BTR1();
 884              		.loc 1 241 6 is_stmt 0 view .LVU316
 885 0444 050056E3 		cmp	r6, #5
 886 0448 57FFFF1A 		bne	.L18
 242:./src/main.c  **** 		//	EepromData.CanSpeed = 0xFF; 	// not a standard speed
 887              		.loc 1 242 4 is_stmt 1 view .LVU317
 888              	.LBB400:
 889              	.LBI400:
 667:./src/main.c  **** //-------------------------------------------------
 890              		.loc 1 667 13 view .LVU318
 891              	.LBB401:
 670:./src/main.c  **** 	u32_t LpcBtr; // This is the LPC2194's "CANBTR" register
 892              		.loc 1 670 2 view .LVU319
 671:./src/main.c  **** 	u8_t BYTE0;
 893              		.loc 1 671 2 view .LVU320
 672:./src/main.c  **** 	u8_t BYTE1;
 894              		.loc 1 672 2 view .LVU321
 673:./src/main.c  **** 
 895              		.loc 1 673 2 view .LVU322
 675:./src/main.c  **** 	
 896              		.loc 1 675 2 view .LVU323
 897              	.LVL62:
 678:./src/main.c  **** 	BYTE0 |= ((ascii2hex(SerRcvBuf[2])   )& 0x0F);
 898              		.loc 1 678 2 view .LVU324
 678:./src/main.c  **** 	BYTE0 |= ((ascii2hex(SerRcvBuf[2])   )& 0x0F);
 899              		.loc 1 678 13 is_stmt 0 view .LVU325
 900 044c 0560D5E5 		ldrb	r6, [r5, #5]	@ zero_extendqisi2
 901              	.LVL63:
 902              	.LBB402:
 903              	.LBI402:
  87:./src/main.c  **** {
 904              		.loc 1 87 6 is_stmt 1 view .LVU326
 905              	.LBB403:
  89:./src/main.c  **** 	{
 906              		.loc 1 89 2 view .LVU327
  89:./src/main.c  **** 	{
 907              		.loc 1 89 4 is_stmt 0 view .LVU328
 908 0450 413046E2 		sub	r3, r6, #65
 909 0454 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 910              		.loc 1 91 7 view .LVU329
 911 0458 37604692 		subls	r6, r6, #55
 912              	.LVL64:
  92:./src/main.c  **** 	}
 913              		.loc 1 92 14 view .LVU330
 914 045c 0F600692 		andls	r6, r6, #15
  89:./src/main.c  **** 	{
 915              		.loc 1 89 4 view .LVU331
 916 0460 0400009A 		bls	.L44
  94:./src/main.c  **** 	{
 917              		.loc 1 94 2 is_stmt 1 view .LVU332
  94:./src/main.c  **** 	{
 918              		.loc 1 94 19 is_stmt 0 view .LVU333
 919 0464 613046E2 		sub	r3, r6, #97
 920              	.LVL65:
  94:./src/main.c  **** 	{
 921              		.loc 1 94 4 view .LVU334
 922 0468 FF3003E2 		and	r3, r3, #255
 923 046c 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 924              		.loc 1 96 3 is_stmt 1 view .LVU335
 925              	.LVL66:
  97:./src/main.c  **** 	}
 926              		.loc 1 97 3 view .LVU336
  96:./src/main.c  **** 		return chr &0xF;
 927              		.loc 1 96 7 is_stmt 0 view .LVU337
 928 0470 57604692 		subls	r6, r6, #87
 929              	.LVL67:
 930              	.LBB404:
 931              	.LBI404:
  87:./src/main.c  **** {
 932              		.loc 1 87 6 is_stmt 1 view .LVU338
 933              	.LBB405:
 100:./src/main.c  **** 	{
 934              		.loc 1 100 2 view .LVU339
 104:./src/main.c  **** }
 935              		.loc 1 104 2 view .LVU340
 104:./src/main.c  **** }
 936              		.loc 1 104 13 is_stmt 0 view .LVU341
 937 0474 0F6006E2 		and	r6, r6, #15
 938              	.LVL68:
 939              	.L44:
 104:./src/main.c  **** }
 940              		.loc 1 104 13 view .LVU342
 941              	.LBE405:
 942              	.LBE404:
 943              	.LBE403:
 944              	.LBE402:
 679:./src/main.c  **** 	// get BTR1 from the received UART command line
 945              		.loc 1 679 2 is_stmt 1 view .LVU343
 679:./src/main.c  **** 	// get BTR1 from the received UART command line
 946              		.loc 1 679 13 is_stmt 0 view .LVU344
 947 0478 0630D5E5 		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 948              	.LVL69:
 949              	.LBB406:
 950              	.LBI406:
  87:./src/main.c  **** {
 951              		.loc 1 87 6 is_stmt 1 view .LVU345
 952              	.LBB407:
  89:./src/main.c  **** 	{
 953              		.loc 1 89 2 view .LVU346
  89:./src/main.c  **** 	{
 954              		.loc 1 89 4 is_stmt 0 view .LVU347
 955 047c 412043E2 		sub	r2, r3, #65
 956              	.LVL70:
  89:./src/main.c  **** 	{
 957              		.loc 1 89 4 view .LVU348
 958 0480 190052E3 		cmp	r2, #25
  91:./src/main.c  **** 		return chr &0xF;
 959              		.loc 1 91 7 view .LVU349
 960 0484 37304392 		subls	r3, r3, #55
 961              	.LVL71:
  92:./src/main.c  **** 	}
 962              		.loc 1 92 14 view .LVU350
 963 0488 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 964              		.loc 1 89 4 view .LVU351
 965 048c 0400009A 		bls	.L48
  94:./src/main.c  **** 	{
 966              		.loc 1 94 2 is_stmt 1 view .LVU352
  94:./src/main.c  **** 	{
 967              		.loc 1 94 19 is_stmt 0 view .LVU353
 968 0490 612043E2 		sub	r2, r3, #97
 969              	.LVL72:
  94:./src/main.c  **** 	{
 970              		.loc 1 94 4 view .LVU354
 971 0494 FF2002E2 		and	r2, r2, #255
 972 0498 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 973              		.loc 1 96 3 is_stmt 1 view .LVU355
 974              	.LVL73:
  97:./src/main.c  **** 	}
 975              		.loc 1 97 3 view .LVU356
  96:./src/main.c  **** 		return chr &0xF;
 976              		.loc 1 96 7 is_stmt 0 view .LVU357
 977 049c 57304392 		subls	r3, r3, #87
 978              	.LVL74:
 979              	.LBB408:
 980              	.LBI408:
  87:./src/main.c  **** {
 981              		.loc 1 87 6 is_stmt 1 view .LVU358
 982              	.LBB409:
 100:./src/main.c  **** 	{
 983              		.loc 1 100 2 view .LVU359
 104:./src/main.c  **** }
 984              		.loc 1 104 2 view .LVU360
 104:./src/main.c  **** }
 985              		.loc 1 104 13 is_stmt 0 view .LVU361
 986 04a0 0F3003E2 		and	r3, r3, #15
 987              	.LVL75:
 988              	.L48:
 104:./src/main.c  **** }
 989              		.loc 1 104 13 view .LVU362
 990              	.LBE409:
 991              	.LBE408:
 992              	.LBE407:
 993              	.LBE406:
 681:./src/main.c  **** 	BYTE1 |= ((ascii2hex(SerRcvBuf[4])   )& 0x0F);
 994              		.loc 1 681 2 is_stmt 1 view .LVU363
 681:./src/main.c  **** 	BYTE1 |= ((ascii2hex(SerRcvBuf[4])   )& 0x0F);
 995              		.loc 1 681 13 is_stmt 0 view .LVU364
 996 04a4 0720D5E5 		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 997              	.LVL76:
 998              	.LBB410:
 999              	.LBI410:
  87:./src/main.c  **** {
 1000              		.loc 1 87 6 is_stmt 1 view .LVU365
 1001              	.LBB411:
  89:./src/main.c  **** 	{
 1002              		.loc 1 89 2 view .LVU366
  89:./src/main.c  **** 	{
 1003              		.loc 1 89 4 is_stmt 0 view .LVU367
 1004 04a8 411042E2 		sub	r1, r2, #65
 1005 04ac 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1006              		.loc 1 91 7 view .LVU368
 1007 04b0 37204292 		subls	r2, r2, #55
 1008              	.LVL77:
  92:./src/main.c  **** 	}
 1009              		.loc 1 92 14 view .LVU369
 1010 04b4 0F100292 		andls	r1, r2, #15
 1011              	.LVL78:
  89:./src/main.c  **** 	{
 1012              		.loc 1 89 4 view .LVU370
 1013 04b8 0400009A 		bls	.L52
  94:./src/main.c  **** 	{
 1014              		.loc 1 94 2 is_stmt 1 view .LVU371
  94:./src/main.c  **** 	{
 1015              		.loc 1 94 19 is_stmt 0 view .LVU372
 1016 04bc 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 1017              		.loc 1 94 4 view .LVU373
 1018 04c0 FF1001E2 		and	r1, r1, #255
 1019 04c4 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 1020              		.loc 1 96 3 is_stmt 1 view .LVU374
 1021              	.LVL79:
  97:./src/main.c  **** 	}
 1022              		.loc 1 97 3 view .LVU375
  96:./src/main.c  **** 		return chr &0xF;
 1023              		.loc 1 96 7 is_stmt 0 view .LVU376
 1024 04c8 57204292 		subls	r2, r2, #87
 1025              	.LVL80:
 1026              	.LBB412:
 1027              	.LBI412:
  87:./src/main.c  **** {
 1028              		.loc 1 87 6 is_stmt 1 view .LVU377
 1029              	.LBB413:
 100:./src/main.c  **** 	{
 1030              		.loc 1 100 2 view .LVU378
 104:./src/main.c  **** }
 1031              		.loc 1 104 2 view .LVU379
 104:./src/main.c  **** }
 1032              		.loc 1 104 13 is_stmt 0 view .LVU380
 1033 04cc 0F1002E2 		and	r1, r2, #15
 1034              	.LVL81:
 1035              	.L52:
 104:./src/main.c  **** }
 1036              		.loc 1 104 13 view .LVU381
 1037              	.LBE413:
 1038              	.LBE412:
 1039              	.LBE411:
 1040              	.LBE410:
 682:./src/main.c  **** 
 1041              		.loc 1 682 2 is_stmt 1 view .LVU382
 682:./src/main.c  **** 
 1042              		.loc 1 682 13 is_stmt 0 view .LVU383
 1043 04d0 0820D5E5 		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 1044              	.LVL82:
 1045              	.LBB414:
 1046              	.LBI414:
  87:./src/main.c  **** {
 1047              		.loc 1 87 6 is_stmt 1 view .LVU384
 1048              	.LBB415:
  89:./src/main.c  **** 	{
 1049              		.loc 1 89 2 view .LVU385
  89:./src/main.c  **** 	{
 1050              		.loc 1 89 4 is_stmt 0 view .LVU386
 1051 04d4 410042E2 		sub	r0, r2, #65
 1052              	.LVL83:
  89:./src/main.c  **** 	{
 1053              		.loc 1 89 4 view .LVU387
 1054 04d8 190050E3 		cmp	r0, #25
  91:./src/main.c  **** 		return chr &0xF;
 1055              		.loc 1 91 7 view .LVU388
 1056 04dc 37204292 		subls	r2, r2, #55
 1057              	.LVL84:
  92:./src/main.c  **** 	}
 1058              		.loc 1 92 14 view .LVU389
 1059 04e0 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 1060              		.loc 1 89 4 view .LVU390
 1061 04e4 0400009A 		bls	.L56
  94:./src/main.c  **** 	{
 1062              		.loc 1 94 2 is_stmt 1 view .LVU391
  94:./src/main.c  **** 	{
 1063              		.loc 1 94 19 is_stmt 0 view .LVU392
 1064 04e8 610042E2 		sub	r0, r2, #97
 1065              	.LVL85:
  94:./src/main.c  **** 	{
 1066              		.loc 1 94 4 view .LVU393
 1067 04ec FF0000E2 		and	r0, r0, #255
 1068 04f0 190050E3 		cmp	r0, #25
  96:./src/main.c  **** 		return chr &0xF;
 1069              		.loc 1 96 3 is_stmt 1 view .LVU394
 1070              	.LVL86:
  97:./src/main.c  **** 	}
 1071              		.loc 1 97 3 view .LVU395
  96:./src/main.c  **** 		return chr &0xF;
 1072              		.loc 1 96 7 is_stmt 0 view .LVU396
 1073 04f4 57204292 		subls	r2, r2, #87
 1074              	.LVL87:
 1075              	.LBB416:
 1076              	.LBI416:
  87:./src/main.c  **** {
 1077              		.loc 1 87 6 is_stmt 1 view .LVU397
 1078              	.LBB417:
 100:./src/main.c  **** 	{
 1079              		.loc 1 100 2 view .LVU398
 104:./src/main.c  **** }
 1080              		.loc 1 104 2 view .LVU399
 104:./src/main.c  **** }
 1081              		.loc 1 104 13 is_stmt 0 view .LVU400
 1082 04f8 0F2002E2 		and	r2, r2, #15
 1083              	.LVL88:
 1084              	.L56:
 104:./src/main.c  **** }
 1085              		.loc 1 104 13 view .LVU401
 1086              	.LBE417:
 1087              	.LBE416:
 1088              	.LBE415:
 1089              	.LBE414:
 685:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 1090              		.loc 1 685 2 is_stmt 1 view .LVU402
 685:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 1091              		.loc 1 685 5 is_stmt 0 view .LVU403
 1092 04fc 2670D5E5 		ldrb	r7, [r5, #38]	@ zero_extendqisi2
 1093 0500 000057E3 		cmp	r7, #0
 1094 0504 4F02000A 		beq	.L247
 1095              	.LVL89:
 1096              	.L230:
 685:./src/main.c  **** 		// Shuffle together LPC2194's "CANBTR" register
 1097              		.loc 1 685 5 view .LVU404
 1098              	.LBE401:
 1099              	.LBE400:
 1100              	.LBB419:
 1101              	.LBB323:
1150:./src/main.c  **** 	}
 1102              		.loc 1 1150 10 view .LVU405
 1103 0508 0740A0E3 		mov	r4, #7
 1104 050c 5FFFFFEA 		b	.L220
 1105              	.LVL90:
 1106              	.L36:
1150:./src/main.c  **** 	}
 1107              		.loc 1 1150 10 view .LVU406
 1108              	.LBE323:
 1109              	.LBE419:
 280:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 1110              		.loc 1 280 3 is_stmt 1 view .LVU407
 280:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 1111              		.loc 1 280 6 is_stmt 0 view .LVU408
 1112 0510 010056E3 		cmp	r6, #1
 1113 0514 24FFFF1A 		bne	.L18
 280:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 1114              		.loc 1 280 23 discriminator 1 view .LVU409
 1115 0518 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 1116 051c 010053E3 		cmp	r3, #1
 1117 0520 21FFFF1A 		bne	.L18
 281:./src/main.c  **** 			CanChnOpen = 0;
 1118              		.loc 1 281 4 is_stmt 1 view .LVU410
 1119 0524 0610A0E1 		mov	r1, r6
 1120 0528 0000A0E3 		mov	r0, #0
 1121              	.LVL91:
 281:./src/main.c  **** 			CanChnOpen = 0;
 1122              		.loc 1 281 4 is_stmt 0 view .LVU411
 1123 052c FEFFFFEB 		bl	CAN_SetBusMode
 1124              	.LVL92:
 282:./src/main.c  **** 			CanBusMode = BUS_OFF;
 1125              		.loc 1 282 4 is_stmt 1 view .LVU412
 282:./src/main.c  **** 			CanBusMode = BUS_OFF;
 1126              		.loc 1 282 15 is_stmt 0 view .LVU413
 1127 0530 0000A0E3 		mov	r0, #0
 283:./src/main.c  **** 			// Send ASCII OK
 1128              		.loc 1 283 15 view .LVU414
 1129 0534 A8399FE5 		ldr	r3, .L248+16
 285:./src/main.c  **** 		}
 1130              		.loc 1 285 4 view .LVU415
 1131 0538 0620A0E1 		mov	r2, r6
 1132 053c 07108DE2 		add	r1, sp, #7
 283:./src/main.c  **** 			// Send ASCII OK
 1133              		.loc 1 283 15 view .LVU416
 1134 0540 0460C3E5 		strb	r6, [r3, #4]
 282:./src/main.c  **** 			CanBusMode = BUS_OFF;
 1135              		.loc 1 282 15 view .LVU417
 1136 0544 2600C5E5 		strb	r0, [r5, #38]
 283:./src/main.c  **** 			// Send ASCII OK
 1137              		.loc 1 283 4 is_stmt 1 view .LVU418
 285:./src/main.c  **** 		}
 1138              		.loc 1 285 4 view .LVU419
 1139 0548 FEFFFFEB 		bl	SER_Write
 1140              	.LVL93:
 1141 054c 2FFFFFEA 		b	.L41
 1142              	.LVL94:
 1143              	.L35:
 349:./src/main.c  **** 			GetStatusFlags(); // returns 1 byte with 7 flags
 1144              		.loc 1 349 3 view .LVU420
 349:./src/main.c  **** 			GetStatusFlags(); // returns 1 byte with 7 flags
 1145              		.loc 1 349 6 is_stmt 0 view .LVU421
 1146 0550 010056E3 		cmp	r6, #1
 1147 0554 14FFFF1A 		bne	.L18
 350:./src/main.c  **** 		}
 1148              		.loc 1 350 4 is_stmt 1 view .LVU422
 1149              	.LBB420:
 1150              	.LBI420:
 889:./src/main.c  **** //-------------------------------------------------
 1151              		.loc 1 889 13 view .LVU423
 1152              	.LBB421:
 895:./src/main.c  **** 
 1153              		.loc 1 895 2 view .LVU424
 1154              	.LVL95:
 898:./src/main.c  **** 
 1155              		.loc 1 898 2 view .LVU425
 900:./src/main.c  **** 
 1156              		.loc 1 900 5 is_stmt 0 view .LVU426
 1157 0558 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 1158 055c 010053E3 		cmp	r3, #1
 898:./src/main.c  **** 
 1159              		.loc 1 898 15 view .LVU427
 1160 0560 0010A0E3 		mov	r1, #0
 926:./src/main.c  **** 		SerXmtBufPtr++;
 1161              		.loc 1 926 27 view .LVU428
 1162 0564 0730A013 		movne	r3, #7
 898:./src/main.c  **** 
 1163              		.loc 1 898 15 view .LVU429
 1164 0568 4910C5E5 		strb	r1, [r5, #73]
 900:./src/main.c  **** 
 1165              		.loc 1 900 2 is_stmt 1 view .LVU430
 926:./src/main.c  **** 		SerXmtBufPtr++;
 1166              		.loc 1 926 27 is_stmt 0 view .LVU431
 1167 056c 2830C515 		strbne	r3, [r5, #40]
 927:./src/main.c  **** 	}
 1168              		.loc 1 927 15 view .LVU432
 1169 0570 4960C515 		strbne	r6, [r5, #73]
 900:./src/main.c  **** 
 1170              		.loc 1 900 5 view .LVU433
 1171 0574 1B00001A 		bne	.L203
 905:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 1172              		.loc 1 905 3 is_stmt 1 view .LVU434
 905:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 1173              		.loc 1 905 18 is_stmt 0 view .LVU435
 1174 0578 6C299FE5 		ldr	r2, .L248+24
 906:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 1175              		.loc 1 906 39 view .LVU436
 1176 057c 2530D5E5 		ldrb	r3, [r5, #37]	@ zero_extendqisi2
 905:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 1177              		.loc 1 905 18 view .LVU437
 1178 0580 0C2092E5 		ldr	r2, [r2, #12]
 1179              	.LVL96:
 906:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 1180              		.loc 1 906 3 is_stmt 1 view .LVU438
 907:./src/main.c  **** 		
 1181              		.loc 1 907 3 view .LVU439
 906:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 1182              		.loc 1 906 39 is_stmt 0 view .LVU440
 1183 0584 013003E2 		and	r3, r3, #1
 905:./src/main.c  **** 		statusbyte |= (SerRxOverrunOccurred & 0x01);
 1184              		.loc 1 905 24 view .LVU441
 1185 0588 EC2002E2 		and	r2, r2, #236
 1186              	.LVL97:
 906:./src/main.c  **** 		statusbyte |= (SerTxCongestionOccurred & 0x01)*2;
 1187              		.loc 1 906 14 view .LVU442
 1188 058c 023083E1 		orr	r3, r3, r2
 907:./src/main.c  **** 		
 1189              		.loc 1 907 14 view .LVU443
 1190 0590 5C20D5E5 		ldrb	r2, [r5, #92]	@ zero_extendqisi2
 1191 0594 012002E2 		and	r2, r2, #1
 1192              	.LBB422:
 1193              	.LBB423:
  76:./src/main.c  **** 	{
 1194              		.loc 1 76 4 view .LVU444
 1195 0598 9F0053E3 		cmp	r3, #159
 1196              	.LBE423:
 1197              	.LBE422:
 907:./src/main.c  **** 		
 1198              		.loc 1 907 14 view .LVU445
 1199 059c 822083E1 		orr	r2, r3, r2, lsl #1
 1200              	.LVL98:
 909:./src/main.c  **** 		//statusbits.bit1 = (SerTxCongestionOccurred & 0x01); // transmit FIFO full
 1201              		.loc 1 909 3 is_stmt 1 view .LVU446
 911:./src/main.c  **** 
 1202              		.loc 1 911 3 view .LVU447
 914:./src/main.c  **** 		SerXmtBufPtr++;
 1203              		.loc 1 914 3 view .LVU448
 916:./src/main.c  **** 		SerXmtBufPtr++;
 1204              		.loc 1 916 29 is_stmt 0 view .LVU449
 1205 05a0 2332A0E1 		lsr	r3, r3, #4
 1206              	.LBB426:
 1207              	.LBB424:
  78:./src/main.c  **** 	}
 1208              		.loc 1 78 7 view .LVU450
 1209 05a4 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 1210              		.loc 1 82 7 view .LVU451
 1211 05a8 30308392 		addls	r3, r3, #48
 1212              	.LBE424:
 1213              	.LBE426:
 916:./src/main.c  **** 		SerXmtBufPtr++;
 1214              		.loc 1 916 27 view .LVU452
 1215 05ac 2930C5E5 		strb	r3, [r5, #41]
 921:./src/main.c  **** 
 1216              		.loc 1 921 15 view .LVU453
 1217 05b0 0430A0E3 		mov	r3, #4
 914:./src/main.c  **** 		SerXmtBufPtr++;
 1218              		.loc 1 914 27 view .LVU454
 1219 05b4 4600A0E3 		mov	r0, #70
 1220              	.LVL99:
 909:./src/main.c  **** 		//statusbits.bit1 = (SerTxCongestionOccurred & 0x01); // transmit FIFO full
 1221              		.loc 1 909 24 view .LVU455
 1222 05b8 2510C5E5 		strb	r1, [r5, #37]
 911:./src/main.c  **** 
 1223              		.loc 1 911 27 view .LVU456
 1224 05bc 5C10C5E5 		strb	r1, [r5, #92]
 920:./src/main.c  **** 		SerXmtBufPtr++;
 1225              		.loc 1 920 27 view .LVU457
 1226 05c0 0D10A0E3 		mov	r1, #13
 1227 05c4 0360A0E1 		mov	r6, r3
 1228              	.LVL100:
 918:./src/main.c  **** 		SerXmtBufPtr++;
 1229              		.loc 1 918 29 view .LVU458
 1230 05c8 0F2002E2 		and	r2, r2, #15
 1231              	.LVL101:
 1232              	.LBB427:
 1233              	.LBB428:
  76:./src/main.c  **** 	{
 1234              		.loc 1 76 4 view .LVU459
 1235 05cc 090052E3 		cmp	r2, #9
  78:./src/main.c  **** 	}
 1236              		.loc 1 78 7 view .LVU460
 1237 05d0 37208282 		addhi	r2, r2, #55
  82:./src/main.c  **** 	}
 1238              		.loc 1 82 7 view .LVU461
 1239 05d4 30208292 		addls	r2, r2, #48
 1240              	.LBE428:
 1241              	.LBE427:
 914:./src/main.c  **** 		SerXmtBufPtr++;
 1242              		.loc 1 914 27 view .LVU462
 1243 05d8 2800C5E5 		strb	r0, [r5, #40]
 915:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii((statusbyte & 0xF0) >> 4);
 1244              		.loc 1 915 3 is_stmt 1 view .LVU463
 916:./src/main.c  **** 		SerXmtBufPtr++;
 1245              		.loc 1 916 3 view .LVU464
 1246              	.LBB430:
 1247              	.LBI422:
  73:./src/main.c  **** {
 1248              		.loc 1 73 6 view .LVU465
 1249              	.LBB425:
  75:./src/main.c  **** 	if(chr > 9)
 1250              		.loc 1 75 2 view .LVU466
  76:./src/main.c  **** 	{
 1251              		.loc 1 76 2 view .LVU467
  78:./src/main.c  **** 	}
 1252              		.loc 1 78 3 view .LVU468
  82:./src/main.c  **** 	}
 1253              		.loc 1 82 3 view .LVU469
  84:./src/main.c  **** }
 1254              		.loc 1 84 2 view .LVU470
 1255              	.LBE425:
 1256              	.LBE430:
 917:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = hex2ascii (statusbyte & 0x0F);
 1257              		.loc 1 917 3 view .LVU471
 918:./src/main.c  **** 		SerXmtBufPtr++;
 1258              		.loc 1 918 3 view .LVU472
 1259              	.LBB431:
 1260              	.LBI427:
  73:./src/main.c  **** {
 1261              		.loc 1 73 6 view .LVU473
 1262              	.LBB429:
  75:./src/main.c  **** 	if(chr > 9)
 1263              		.loc 1 75 2 view .LVU474
  76:./src/main.c  **** 	{
 1264              		.loc 1 76 2 view .LVU475
  78:./src/main.c  **** 	}
 1265              		.loc 1 78 3 view .LVU476
  82:./src/main.c  **** 	}
 1266              		.loc 1 82 3 view .LVU477
 1267              	.LVL102:
  84:./src/main.c  **** }
 1268              		.loc 1 84 2 view .LVU478
  84:./src/main.c  **** }
 1269              		.loc 1 84 2 is_stmt 0 view .LVU479
 1270              	.LBE429:
 1271              	.LBE431:
 918:./src/main.c  **** 		SerXmtBufPtr++;
 1272              		.loc 1 918 27 view .LVU480
 1273 05dc 2A20C5E5 		strb	r2, [r5, #42]
 919:./src/main.c  **** 		SerXmtBuf[SerXmtBufPtr] = ret_OK; // [<CR>]
 1274              		.loc 1 919 3 is_stmt 1 view .LVU481
 920:./src/main.c  **** 		SerXmtBufPtr++;
 1275              		.loc 1 920 3 view .LVU482
 920:./src/main.c  **** 		SerXmtBufPtr++;
 1276              		.loc 1 920 27 is_stmt 0 view .LVU483
 1277 05e0 2B10C5E5 		strb	r1, [r5, #43]
 921:./src/main.c  **** 
 1278              		.loc 1 921 3 is_stmt 1 view .LVU484
 921:./src/main.c  **** 
 1279              		.loc 1 921 15 is_stmt 0 view .LVU485
 1280 05e4 4930C5E5 		strb	r3, [r5, #73]
 1281              	.L203:
 932:./src/main.c  **** }
 1282              		.loc 1 932 2 is_stmt 1 view .LVU486
 1283 05e8 0620A0E1 		mov	r2, r6
 1284 05ec E4189FE5 		ldr	r1, .L248+4
 1285 05f0 0000A0E3 		mov	r0, #0
 1286 05f4 FEFFFFEB 		bl	SER_Write
 1287              	.LVL103:
 933:./src/main.c  **** /**************************************************/
 1288              		.loc 1 933 1 is_stmt 0 view .LVU487
 1289 05f8 04FFFFEA 		b	.L41
 1290              	.LVL104:
 1291              	.L28:
 933:./src/main.c  **** /**************************************************/
 1292              		.loc 1 933 1 view .LVU488
 1293              	.LBE421:
 1294              	.LBE420:
 368:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 1295              		.loc 1 368 3 is_stmt 1 view .LVU489
 368:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 1)) {
 1296              		.loc 1 368 6 is_stmt 0 view .LVU490
 1297 05fc 020056E3 		cmp	r6, #2
 1298 0600 E9FEFF1A 		bne	.L18
 369:./src/main.c  **** 			SetFilterMode();
 1299              		.loc 1 369 8 view .LVU491
 1300 0604 0500D5E5 		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 1301              	.LVL105:
 1302              	.LBB432:
 1303              	.LBI432:
  87:./src/main.c  **** {
 1304              		.loc 1 87 6 is_stmt 1 view .LVU492
 1305              	.LBB433:
  89:./src/main.c  **** 	{
 1306              		.loc 1 89 2 view .LVU493
  89:./src/main.c  **** 	{
 1307              		.loc 1 89 4 is_stmt 0 view .LVU494
 1308 0608 413040E2 		sub	r3, r0, #65
 1309 060c 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 1310              		.loc 1 91 7 view .LVU495
 1311 0610 37304092 		subls	r3, r0, #55
  92:./src/main.c  **** 	}
 1312              		.loc 1 92 14 view .LVU496
 1313 0614 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 1314              		.loc 1 89 4 view .LVU497
 1315 0618 0400009A 		bls	.L210
  94:./src/main.c  **** 	{
 1316              		.loc 1 94 2 is_stmt 1 view .LVU498
  94:./src/main.c  **** 	{
 1317              		.loc 1 94 4 is_stmt 0 view .LVU499
 1318 061c 613040E2 		sub	r3, r0, #97
 1319 0620 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 1320              		.loc 1 96 3 is_stmt 1 view .LVU500
 1321              	.LVL106:
  97:./src/main.c  **** 	}
 1322              		.loc 1 97 3 view .LVU501
 1323              	.LBB434:
 1324              	.LBI434:
  87:./src/main.c  **** {
 1325              		.loc 1 87 6 view .LVU502
 1326              	.LBB435:
 100:./src/main.c  **** 	{
 1327              		.loc 1 100 2 view .LVU503
 104:./src/main.c  **** }
 1328              		.loc 1 104 2 view .LVU504
 1329              	.LBE435:
 1330              	.LBE434:
  96:./src/main.c  **** 		return chr &0xF;
 1331              		.loc 1 96 7 is_stmt 0 view .LVU505
 1332 0624 57304092 		subls	r3, r0, #87
  97:./src/main.c  **** 	}
 1333              		.loc 1 97 14 view .LVU506
 1334 0628 0F300392 		andls	r3, r3, #15
 1335              	.LBB437:
 1336              	.LBB436:
 104:./src/main.c  **** }
 1337              		.loc 1 104 13 view .LVU507
 1338 062c 0F300082 		andhi	r3, r0, #15
 1339              	.LVL107:
 1340              	.L210:
 104:./src/main.c  **** }
 1341              		.loc 1 104 13 view .LVU508
 1342              	.LBE436:
 1343              	.LBE437:
 1344              	.LBE433:
 1345              	.LBE432:
 369:./src/main.c  **** 			SetFilterMode();
 1346              		.loc 1 369 3 view .LVU509
 1347 0630 010053E3 		cmp	r3, #1
 1348 0634 DCFEFF8A 		bhi	.L18
 370:./src/main.c  **** 		}
 1349              		.loc 1 370 4 is_stmt 1 view .LVU510
 1350              	.LBB438:
 1351              	.LBI438:
1009:./src/main.c  **** //-------------------------------------------------
 1352              		.loc 1 1009 13 view .LVU511
 1353              	.LBB439:
1012:./src/main.c  **** 	
 1354              		.loc 1 1012 2 view .LVU512
1014:./src/main.c  **** 	
 1355              		.loc 1 1014 2 view .LVU513
 1356              	.LVL108:
1016:./src/main.c  **** 		FilterMode = ascii2hex(SerRcvBuf[1]);
 1357              		.loc 1 1016 2 view .LVU514
1016:./src/main.c  **** 		FilterMode = ascii2hex(SerRcvBuf[1]);
 1358              		.loc 1 1016 5 is_stmt 0 view .LVU515
 1359 0638 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 1360 063c 000053E3 		cmp	r3, #0
 1361 0640 B0FFFF1A 		bne	.L230
1017:./src/main.c  **** 	}
 1362              		.loc 1 1017 3 is_stmt 1 view .LVU516
1017:./src/main.c  **** 	}
 1363              		.loc 1 1017 16 is_stmt 0 view .LVU517
 1364 0644 FEFFFFEB 		bl	ascii2hex
 1365              	.LVL109:
1017:./src/main.c  **** 	}
 1366              		.loc 1 1017 14 view .LVU518
 1367 0648 5D00C5E5 		strb	r0, [r5, #93]
 1368 064c 0FFFFFEA 		b	.L220
 1369              	.LVL110:
 1370              	.L30:
1017:./src/main.c  **** 	}
 1371              		.loc 1 1017 14 view .LVU519
 1372              	.LBE439:
 1373              	.LBE438:
 227:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 8)&&(CanChnOpen==0)) {
 1374              		.loc 1 227 3 is_stmt 1 view .LVU520
 227:./src/main.c  **** 		&&  (ascii2hex(SerRcvBuf[1]) <= 8)&&(CanChnOpen==0)) {
 1375              		.loc 1 227 6 is_stmt 0 view .LVU521
 1376 0650 020056E3 		cmp	r6, #2
 1377 0654 D4FEFF1A 		bne	.L18
 228:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 1378              		.loc 1 228 8 view .LVU522
 1379 0658 0510D5E5 		ldrb	r1, [r5, #5]	@ zero_extendqisi2
 1380              	.LVL111:
 1381              	.LBB440:
 1382              	.LBI440:
  87:./src/main.c  **** {
 1383              		.loc 1 87 6 is_stmt 1 view .LVU523
 1384              	.LBB441:
  89:./src/main.c  **** 	{
 1385              		.loc 1 89 2 view .LVU524
  89:./src/main.c  **** 	{
 1386              		.loc 1 89 4 is_stmt 0 view .LVU525
 1387 065c 413041E2 		sub	r3, r1, #65
 1388 0660 190053E3 		cmp	r3, #25
  91:./src/main.c  **** 		return chr &0xF;
 1389              		.loc 1 91 7 view .LVU526
 1390 0664 37104192 		subls	r1, r1, #55
 1391              	.LVL112:
  92:./src/main.c  **** 	}
 1392              		.loc 1 92 14 view .LVU527
 1393 0668 0F100192 		andls	r1, r1, #15
  89:./src/main.c  **** 	{
 1394              		.loc 1 89 4 view .LVU528
 1395 066c 0400009A 		bls	.L38
  94:./src/main.c  **** 	{
 1396              		.loc 1 94 2 is_stmt 1 view .LVU529
  94:./src/main.c  **** 	{
 1397              		.loc 1 94 19 is_stmt 0 view .LVU530
 1398 0670 613041E2 		sub	r3, r1, #97
 1399              	.LVL113:
  94:./src/main.c  **** 	{
 1400              		.loc 1 94 4 view .LVU531
 1401 0674 FF3003E2 		and	r3, r3, #255
 1402 0678 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 1403              		.loc 1 96 3 is_stmt 1 view .LVU532
 1404              	.LVL114:
  97:./src/main.c  **** 	}
 1405              		.loc 1 97 3 view .LVU533
  96:./src/main.c  **** 		return chr &0xF;
 1406              		.loc 1 96 7 is_stmt 0 view .LVU534
 1407 067c 57104192 		subls	r1, r1, #87
 1408              	.LVL115:
 1409              	.LBB442:
 1410              	.LBI442:
  87:./src/main.c  **** {
 1411              		.loc 1 87 6 is_stmt 1 view .LVU535
 1412              	.LBB443:
 100:./src/main.c  **** 	{
 1413              		.loc 1 100 2 view .LVU536
 104:./src/main.c  **** }
 1414              		.loc 1 104 2 view .LVU537
 104:./src/main.c  **** }
 1415              		.loc 1 104 13 is_stmt 0 view .LVU538
 1416 0680 0F1001E2 		and	r1, r1, #15
 1417              	.LVL116:
 1418              	.L38:
 104:./src/main.c  **** }
 1419              		.loc 1 104 13 view .LVU539
 1420              	.LBE443:
 1421              	.LBE442:
 1422              	.LBE441:
 1423              	.LBE440:
 228:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 1424              		.loc 1 228 3 view .LVU540
 1425 0684 080051E3 		cmp	r1, #8
 1426 0688 C7FEFF8A 		bhi	.L18
 228:./src/main.c  **** 			CanSpeed = ascii2hex(SerRcvBuf[1]);
 1427              		.loc 1 228 37 discriminator 1 view .LVU541
 1428 068c 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 1429 0690 000054E3 		cmp	r4, #0
 1430 0694 C4FEFF1A 		bne	.L18
 229:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 1431              		.loc 1 229 4 is_stmt 1 view .LVU542
 229:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 1432              		.loc 1 229 13 is_stmt 0 view .LVU543
 1433 0698 44389FE5 		ldr	r3, .L248+16
 230:./src/main.c  **** 			CanInitialized = 1;
 1434              		.loc 1 230 4 view .LVU544
 1435 069c 0400A0E1 		mov	r0, r4
 1436              	.LVL117:
 229:./src/main.c  **** 			CAN_InitChannelMio (CAN_BUS1, CanSpeed);
 1437              		.loc 1 229 13 view .LVU545
 1438 06a0 001083E5 		str	r1, [r3]
 230:./src/main.c  **** 			CanInitialized = 1;
 1439              		.loc 1 230 4 is_stmt 1 view .LVU546
 1440 06a4 FEFFFFEB 		bl	CAN_InitChannelMio
 1441              	.LVL118:
 231:./src/main.c  **** 			// Send ASCII OK
 1442              		.loc 1 231 4 view .LVU547
 231:./src/main.c  **** 			// Send ASCII OK
 1443              		.loc 1 231 19 is_stmt 0 view .LVU548
 1444 06a8 0120A0E3 		mov	r2, #1
 233:./src/main.c  **** 		}
 1445              		.loc 1 233 4 view .LVU549
 1446 06ac 0400A0E1 		mov	r0, r4
 1447 06b0 07108DE2 		add	r1, sp, #7
 231:./src/main.c  **** 			// Send ASCII OK
 1448              		.loc 1 231 19 view .LVU550
 1449 06b4 2720C5E5 		strb	r2, [r5, #39]
 233:./src/main.c  **** 		}
 1450              		.loc 1 233 4 is_stmt 1 view .LVU551
 1451 06b8 FEFFFFEB 		bl	SER_Write
 1452              	.LVL119:
 1453 06bc D3FEFFEA 		b	.L41
 1454              	.LVL120:
 1455              	.L29:
 303:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 1456              		.loc 1 303 5 view .LVU552
 303:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 1457              		.loc 1 303 29 is_stmt 0 view .LVU553
 1458 06c0 0D20D5E5 		ldrb	r2, [r5, #13]	@ zero_extendqisi2
 1459              	.LVL121:
 1460              	.LBB444:
 1461              	.LBI444:
  87:./src/main.c  **** {
 1462              		.loc 1 87 6 is_stmt 1 view .LVU554
 1463              	.LBB445:
  89:./src/main.c  **** 	{
 1464              		.loc 1 89 2 view .LVU555
  89:./src/main.c  **** 	{
 1465              		.loc 1 89 19 is_stmt 0 view .LVU556
 1466 06c4 411042E2 		sub	r1, r2, #65
 1467 06c8 FF1001E2 		and	r1, r1, #255
  89:./src/main.c  **** 	{
 1468              		.loc 1 89 4 view .LVU557
 1469 06cc 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1470              		.loc 1 91 7 view .LVU558
 1471 06d0 37304292 		subls	r3, r2, #55
  92:./src/main.c  **** 	}
 1472              		.loc 1 92 14 view .LVU559
 1473 06d4 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 1474              		.loc 1 89 4 view .LVU560
 1475 06d8 0500009A 		bls	.L93
  94:./src/main.c  **** 	{
 1476              		.loc 1 94 2 is_stmt 1 view .LVU561
  94:./src/main.c  **** 	{
 1477              		.loc 1 94 19 is_stmt 0 view .LVU562
 1478 06dc 613042E2 		sub	r3, r2, #97
  94:./src/main.c  **** 	{
 1479              		.loc 1 94 4 view .LVU563
 1480 06e0 FF3003E2 		and	r3, r3, #255
 1481 06e4 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 1482              		.loc 1 96 3 is_stmt 1 view .LVU564
 1483              	.LVL122:
  97:./src/main.c  **** 	}
 1484              		.loc 1 97 3 view .LVU565
 1485              	.LBB446:
 1486              	.LBI446:
  87:./src/main.c  **** {
 1487              		.loc 1 87 6 view .LVU566
 1488              	.LBB447:
 100:./src/main.c  **** 	{
 1489              		.loc 1 100 2 view .LVU567
 104:./src/main.c  **** }
 1490              		.loc 1 104 2 view .LVU568
 1491              	.LBE447:
 1492              	.LBE446:
  96:./src/main.c  **** 		return chr &0xF;
 1493              		.loc 1 96 7 is_stmt 0 view .LVU569
 1494 06e8 57304292 		subls	r3, r2, #87
  97:./src/main.c  **** 	}
 1495              		.loc 1 97 14 view .LVU570
 1496 06ec 0F300392 		andls	r3, r3, #15
 1497              	.LBB449:
 1498              	.LBB448:
 104:./src/main.c  **** }
 1499              		.loc 1 104 13 view .LVU571
 1500 06f0 0F300282 		andhi	r3, r2, #15
 1501              	.LVL123:
 1502              	.L93:
 104:./src/main.c  **** }
 1503              		.loc 1 104 13 view .LVU572
 1504              	.LBE448:
 1505              	.LBE449:
 1506              	.LBE445:
 1507              	.LBE444:
 303:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 1508              		.loc 1 303 26 view .LVU573
 1509 06f4 053083E2 		add	r3, r3, #5
 303:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 1510              		.loc 1 303 8 view .LVU574
 1511 06f8 830056E1 		cmp	r6, r3, lsl #1
 1512 06fc AAFEFF1A 		bne	.L18
 304:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 1513              		.loc 1 304 3 view .LVU575
 1514 0700 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 1515 0704 010053E3 		cmp	r3, #1
 1516 0708 A7FEFF1A 		bne	.L18
 305:./src/main.c  **** 			TransmitExtendedFrame();
 1517              		.loc 1 305 19 view .LVU576
 1518 070c D0679FE5 		ldr	r6, .L248+16
 1519              	.LVL124:
 305:./src/main.c  **** 			TransmitExtendedFrame();
 1520              		.loc 1 305 3 view .LVU577
 1521 0710 0400D6E5 		ldrb	r0, [r6, #4]	@ zero_extendqisi2
 1522              	.LVL125:
 305:./src/main.c  **** 			TransmitExtendedFrame();
 1523              		.loc 1 305 3 view .LVU578
 1524 0714 000050E3 		cmp	r0, #0
 1525 0718 A3FEFF1A 		bne	.L18
 306:./src/main.c  **** 		}
 1526              		.loc 1 306 4 is_stmt 1 view .LVU579
 1527              	.LBB450:
 1528              	.LBI450:
 585:./src/main.c  **** //-------------------------------------------------
 1529              		.loc 1 585 13 view .LVU580
 1530              	.LBB451:
 588:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 1531              		.loc 1 588 2 view .LVU581
 589:./src/main.c  **** 
 1532              		.loc 1 589 2 view .LVU582
 591:./src/main.c  **** 
 1533              		.loc 1 591 2 view .LVU583
 1534              	.LVL126:
 594:./src/main.c  **** 	&&  (CanBusMode == BUS_ON) 
 1535              		.loc 1 594 3 view .LVU584
 596:./src/main.c  **** 
 1536              		.loc 1 596 2 is_stmt 0 view .LVU585
 1537 071c 4A30D5E5 		ldrb	r3, [r5, #74]	@ zero_extendqisi2
 1538 0720 000053E3 		cmp	r3, #0
 1539 0724 E701001A 		bne	.L64
 599:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 1540              		.loc 1 599 3 is_stmt 1 view .LVU586
 599:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 1541              		.loc 1 599 22 is_stmt 0 view .LVU587
 1542 0728 543085E5 		str	r3, [r5, #84]
 600:./src/main.c  **** 	
 1543              		.loc 1 600 3 is_stmt 1 view .LVU588
 600:./src/main.c  **** 	
 1544              		.loc 1 600 22 is_stmt 0 view .LVU589
 1545 072c 583085E5 		str	r3, [r5, #88]
 603:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 1546              		.loc 1 603 3 is_stmt 1 view .LVU590
 603:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 1547              		.loc 1 603 34 is_stmt 0 view .LVU591
 1548 0730 0530D5E5 		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 1549              	.LVL127:
 1550              	.LBB452:
 1551              	.LBI452:
  87:./src/main.c  **** {
 1552              		.loc 1 87 6 is_stmt 1 view .LVU592
 1553              	.LBB453:
  89:./src/main.c  **** 	{
 1554              		.loc 1 89 2 view .LVU593
  89:./src/main.c  **** 	{
 1555              		.loc 1 89 4 is_stmt 0 view .LVU594
 1556 0734 410043E2 		sub	r0, r3, #65
 1557 0738 190050E3 		cmp	r0, #25
  91:./src/main.c  **** 		return chr &0xF;
 1558              		.loc 1 91 7 view .LVU595
 1559 073c 37304392 		subls	r3, r3, #55
 1560              	.LVL128:
  92:./src/main.c  **** 	}
 1561              		.loc 1 92 14 view .LVU596
 1562 0740 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 1563              		.loc 1 89 4 view .LVU597
 1564 0744 0400009A 		bls	.L98
  94:./src/main.c  **** 	{
 1565              		.loc 1 94 2 is_stmt 1 view .LVU598
  94:./src/main.c  **** 	{
 1566              		.loc 1 94 19 is_stmt 0 view .LVU599
 1567 0748 610043E2 		sub	r0, r3, #97
 1568              	.LVL129:
  94:./src/main.c  **** 	{
 1569              		.loc 1 94 4 view .LVU600
 1570 074c FF0000E2 		and	r0, r0, #255
 1571 0750 190050E3 		cmp	r0, #25
  96:./src/main.c  **** 		return chr &0xF;
 1572              		.loc 1 96 3 is_stmt 1 view .LVU601
 1573              	.LVL130:
  97:./src/main.c  **** 	}
 1574              		.loc 1 97 3 view .LVU602
  96:./src/main.c  **** 		return chr &0xF;
 1575              		.loc 1 96 7 is_stmt 0 view .LVU603
 1576 0754 57304392 		subls	r3, r3, #87
 1577              	.LVL131:
 1578              	.LBB454:
 1579              	.LBI454:
  87:./src/main.c  **** {
 1580              		.loc 1 87 6 is_stmt 1 view .LVU604
 1581              	.LBB455:
 100:./src/main.c  **** 	{
 1582              		.loc 1 100 2 view .LVU605
 104:./src/main.c  **** }
 1583              		.loc 1 104 2 view .LVU606
 104:./src/main.c  **** }
 1584              		.loc 1 104 13 is_stmt 0 view .LVU607
 1585 0758 0F3003E2 		and	r3, r3, #15
 1586              	.LVL132:
 1587              	.L98:
 104:./src/main.c  **** }
 1588              		.loc 1 104 13 view .LVU608
 1589              	.LBE455:
 1590              	.LBE454:
 1591              	.LBE453:
 1592              	.LBE452:
 604:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 1593              		.loc 1 604 34 view .LVU609
 1594 075c 0600D5E5 		ldrb	r0, [r5, #6]	@ zero_extendqisi2
 1595              	.LBB456:
 1596              	.LBB457:
  89:./src/main.c  **** 	{
 1597              		.loc 1 89 4 view .LVU610
 1598 0760 41C040E2 		sub	ip, r0, #65
 1599 0764 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1600              		.loc 1 91 7 view .LVU611
 1601 0768 37004092 		subls	r0, r0, #55
 1602              	.LBE457:
 1603              	.LBE456:
 603:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 1604              		.loc 1 603 57 view .LVU612
 1605 076c 033EA0E1 		lsl	r3, r3, #28
 604:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 1606              		.loc 1 604 3 is_stmt 1 view .LVU613
 1607              	.LBB461:
 1608              	.LBI456:
  87:./src/main.c  **** {
 1609              		.loc 1 87 6 view .LVU614
 1610              	.LBB460:
  89:./src/main.c  **** 	{
 1611              		.loc 1 89 2 view .LVU615
  92:./src/main.c  **** 	}
 1612              		.loc 1 92 14 is_stmt 0 view .LVU616
 1613 0770 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1614              		.loc 1 89 4 view .LVU617
 1615 0774 0400009A 		bls	.L102
  94:./src/main.c  **** 	{
 1616              		.loc 1 94 2 is_stmt 1 view .LVU618
  94:./src/main.c  **** 	{
 1617              		.loc 1 94 19 is_stmt 0 view .LVU619
 1618 0778 61C040E2 		sub	ip, r0, #97
  94:./src/main.c  **** 	{
 1619              		.loc 1 94 4 view .LVU620
 1620 077c FFC00CE2 		and	ip, ip, #255
 1621 0780 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1622              		.loc 1 96 3 is_stmt 1 view .LVU621
 1623              	.LVL133:
  97:./src/main.c  **** 	}
 1624              		.loc 1 97 3 view .LVU622
  96:./src/main.c  **** 		return chr &0xF;
 1625              		.loc 1 96 7 is_stmt 0 view .LVU623
 1626 0784 57004092 		subls	r0, r0, #87
 1627              	.LVL134:
 1628              	.LBB458:
 1629              	.LBI458:
  87:./src/main.c  **** {
 1630              		.loc 1 87 6 is_stmt 1 view .LVU624
 1631              	.LBB459:
 100:./src/main.c  **** 	{
 1632              		.loc 1 100 2 view .LVU625
 104:./src/main.c  **** }
 1633              		.loc 1 104 2 view .LVU626
 104:./src/main.c  **** }
 1634              		.loc 1 104 13 is_stmt 0 view .LVU627
 1635 0788 0F0000E2 		and	r0, r0, #15
 1636              	.LVL135:
 1637              	.L102:
 104:./src/main.c  **** }
 1638              		.loc 1 104 13 view .LVU628
 1639              	.LBE459:
 1640              	.LBE458:
 1641              	.LBE460:
 1642              	.LBE461:
 604:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 1643              		.loc 1 604 30 view .LVU629
 1644 078c 003C83E1 		orr	r3, r3, r0, lsl #24
 605:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 1645              		.loc 1 605 3 is_stmt 1 view .LVU630
 605:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 1646              		.loc 1 605 34 is_stmt 0 view .LVU631
 1647 0790 0700D5E5 		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 1648              	.LVL136:
 1649              	.LBB462:
 1650              	.LBI462:
  87:./src/main.c  **** {
 1651              		.loc 1 87 6 is_stmt 1 view .LVU632
 1652              	.LBB463:
  89:./src/main.c  **** 	{
 1653              		.loc 1 89 2 view .LVU633
  89:./src/main.c  **** 	{
 1654              		.loc 1 89 4 is_stmt 0 view .LVU634
 1655 0794 41C040E2 		sub	ip, r0, #65
 1656 0798 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1657              		.loc 1 91 7 view .LVU635
 1658 079c 37004092 		subls	r0, r0, #55
 1659              	.LVL137:
  92:./src/main.c  **** 	}
 1660              		.loc 1 92 14 view .LVU636
 1661 07a0 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1662              		.loc 1 89 4 view .LVU637
 1663 07a4 0400009A 		bls	.L106
  94:./src/main.c  **** 	{
 1664              		.loc 1 94 2 is_stmt 1 view .LVU638
  94:./src/main.c  **** 	{
 1665              		.loc 1 94 19 is_stmt 0 view .LVU639
 1666 07a8 61C040E2 		sub	ip, r0, #97
 1667              	.LVL138:
  94:./src/main.c  **** 	{
 1668              		.loc 1 94 4 view .LVU640
 1669 07ac FFC00CE2 		and	ip, ip, #255
 1670 07b0 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1671              		.loc 1 96 3 is_stmt 1 view .LVU641
 1672              	.LVL139:
  97:./src/main.c  **** 	}
 1673              		.loc 1 97 3 view .LVU642
  96:./src/main.c  **** 		return chr &0xF;
 1674              		.loc 1 96 7 is_stmt 0 view .LVU643
 1675 07b4 57004092 		subls	r0, r0, #87
 1676              	.LVL140:
 1677              	.LBB464:
 1678              	.LBI464:
  87:./src/main.c  **** {
 1679              		.loc 1 87 6 is_stmt 1 view .LVU644
 1680              	.LBB465:
 100:./src/main.c  **** 	{
 1681              		.loc 1 100 2 view .LVU645
 104:./src/main.c  **** }
 1682              		.loc 1 104 2 view .LVU646
 104:./src/main.c  **** }
 1683              		.loc 1 104 13 is_stmt 0 view .LVU647
 1684 07b8 0F0000E2 		and	r0, r0, #15
 1685              	.LVL141:
 1686              	.L106:
 104:./src/main.c  **** }
 1687              		.loc 1 104 13 view .LVU648
 1688              	.LBE465:
 1689              	.LBE464:
 1690              	.LBE463:
 1691              	.LBE462:
 605:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 1692              		.loc 1 605 30 view .LVU649
 1693 07bc 003A83E1 		orr	r3, r3, r0, lsl #20
 606:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 1694              		.loc 1 606 3 is_stmt 1 view .LVU650
 606:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 1695              		.loc 1 606 34 is_stmt 0 view .LVU651
 1696 07c0 0800D5E5 		ldrb	r0, [r5, #8]	@ zero_extendqisi2
 1697              	.LVL142:
 1698              	.LBB466:
 1699              	.LBI466:
  87:./src/main.c  **** {
 1700              		.loc 1 87 6 is_stmt 1 view .LVU652
 1701              	.LBB467:
  89:./src/main.c  **** 	{
 1702              		.loc 1 89 2 view .LVU653
  89:./src/main.c  **** 	{
 1703              		.loc 1 89 4 is_stmt 0 view .LVU654
 1704 07c4 41C040E2 		sub	ip, r0, #65
 1705 07c8 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1706              		.loc 1 91 7 view .LVU655
 1707 07cc 37004092 		subls	r0, r0, #55
 1708              	.LVL143:
  92:./src/main.c  **** 	}
 1709              		.loc 1 92 14 view .LVU656
 1710 07d0 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1711              		.loc 1 89 4 view .LVU657
 1712 07d4 0400009A 		bls	.L110
  94:./src/main.c  **** 	{
 1713              		.loc 1 94 2 is_stmt 1 view .LVU658
  94:./src/main.c  **** 	{
 1714              		.loc 1 94 19 is_stmt 0 view .LVU659
 1715 07d8 61C040E2 		sub	ip, r0, #97
 1716              	.LVL144:
  94:./src/main.c  **** 	{
 1717              		.loc 1 94 4 view .LVU660
 1718 07dc FFC00CE2 		and	ip, ip, #255
 1719 07e0 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1720              		.loc 1 96 3 is_stmt 1 view .LVU661
 1721              	.LVL145:
  97:./src/main.c  **** 	}
 1722              		.loc 1 97 3 view .LVU662
  96:./src/main.c  **** 		return chr &0xF;
 1723              		.loc 1 96 7 is_stmt 0 view .LVU663
 1724 07e4 57004092 		subls	r0, r0, #87
 1725              	.LVL146:
 1726              	.LBB468:
 1727              	.LBI468:
  87:./src/main.c  **** {
 1728              		.loc 1 87 6 is_stmt 1 view .LVU664
 1729              	.LBB469:
 100:./src/main.c  **** 	{
 1730              		.loc 1 100 2 view .LVU665
 104:./src/main.c  **** }
 1731              		.loc 1 104 2 view .LVU666
 104:./src/main.c  **** }
 1732              		.loc 1 104 13 is_stmt 0 view .LVU667
 1733 07e8 0F0000E2 		and	r0, r0, #15
 1734              	.LVL147:
 1735              	.L110:
 104:./src/main.c  **** }
 1736              		.loc 1 104 13 view .LVU668
 1737              	.LBE469:
 1738              	.LBE468:
 1739              	.LBE467:
 1740              	.LBE466:
 606:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 1741              		.loc 1 606 30 view .LVU669
 1742 07ec 003883E1 		orr	r3, r3, r0, lsl #16
 607:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 1743              		.loc 1 607 3 is_stmt 1 view .LVU670
 607:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 1744              		.loc 1 607 34 is_stmt 0 view .LVU671
 1745 07f0 0900D5E5 		ldrb	r0, [r5, #9]	@ zero_extendqisi2
 1746              	.LVL148:
 1747              	.LBB470:
 1748              	.LBI470:
  87:./src/main.c  **** {
 1749              		.loc 1 87 6 is_stmt 1 view .LVU672
 1750              	.LBB471:
  89:./src/main.c  **** 	{
 1751              		.loc 1 89 2 view .LVU673
  89:./src/main.c  **** 	{
 1752              		.loc 1 89 4 is_stmt 0 view .LVU674
 1753 07f4 41C040E2 		sub	ip, r0, #65
 1754 07f8 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1755              		.loc 1 91 7 view .LVU675
 1756 07fc 37004092 		subls	r0, r0, #55
 1757              	.LVL149:
  92:./src/main.c  **** 	}
 1758              		.loc 1 92 14 view .LVU676
 1759 0800 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1760              		.loc 1 89 4 view .LVU677
 1761 0804 0400009A 		bls	.L114
  94:./src/main.c  **** 	{
 1762              		.loc 1 94 2 is_stmt 1 view .LVU678
  94:./src/main.c  **** 	{
 1763              		.loc 1 94 19 is_stmt 0 view .LVU679
 1764 0808 61C040E2 		sub	ip, r0, #97
 1765              	.LVL150:
  94:./src/main.c  **** 	{
 1766              		.loc 1 94 4 view .LVU680
 1767 080c FFC00CE2 		and	ip, ip, #255
 1768 0810 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1769              		.loc 1 96 3 is_stmt 1 view .LVU681
 1770              	.LVL151:
  97:./src/main.c  **** 	}
 1771              		.loc 1 97 3 view .LVU682
  96:./src/main.c  **** 		return chr &0xF;
 1772              		.loc 1 96 7 is_stmt 0 view .LVU683
 1773 0814 57004092 		subls	r0, r0, #87
 1774              	.LVL152:
 1775              	.LBB472:
 1776              	.LBI472:
  87:./src/main.c  **** {
 1777              		.loc 1 87 6 is_stmt 1 view .LVU684
 1778              	.LBB473:
 100:./src/main.c  **** 	{
 1779              		.loc 1 100 2 view .LVU685
 104:./src/main.c  **** }
 1780              		.loc 1 104 2 view .LVU686
 104:./src/main.c  **** }
 1781              		.loc 1 104 13 is_stmt 0 view .LVU687
 1782 0818 0F0000E2 		and	r0, r0, #15
 1783              	.LVL153:
 1784              	.L114:
 104:./src/main.c  **** }
 1785              		.loc 1 104 13 view .LVU688
 1786              	.LBE473:
 1787              	.LBE472:
 1788              	.LBE471:
 1789              	.LBE470:
 607:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 1790              		.loc 1 607 30 view .LVU689
 1791 081c 003683E1 		orr	r3, r3, r0, lsl #12
 608:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 1792              		.loc 1 608 3 is_stmt 1 view .LVU690
 608:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 1793              		.loc 1 608 34 is_stmt 0 view .LVU691
 1794 0820 0A00D5E5 		ldrb	r0, [r5, #10]	@ zero_extendqisi2
 1795              	.LVL154:
 1796              	.LBB474:
 1797              	.LBI474:
  87:./src/main.c  **** {
 1798              		.loc 1 87 6 is_stmt 1 view .LVU692
 1799              	.LBB475:
  89:./src/main.c  **** 	{
 1800              		.loc 1 89 2 view .LVU693
  89:./src/main.c  **** 	{
 1801              		.loc 1 89 4 is_stmt 0 view .LVU694
 1802 0824 41C040E2 		sub	ip, r0, #65
 1803 0828 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1804              		.loc 1 91 7 view .LVU695
 1805 082c 37004092 		subls	r0, r0, #55
 1806              	.LVL155:
  92:./src/main.c  **** 	}
 1807              		.loc 1 92 14 view .LVU696
 1808 0830 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1809              		.loc 1 89 4 view .LVU697
 1810 0834 0400009A 		bls	.L118
  94:./src/main.c  **** 	{
 1811              		.loc 1 94 2 is_stmt 1 view .LVU698
  94:./src/main.c  **** 	{
 1812              		.loc 1 94 19 is_stmt 0 view .LVU699
 1813 0838 61C040E2 		sub	ip, r0, #97
 1814              	.LVL156:
  94:./src/main.c  **** 	{
 1815              		.loc 1 94 4 view .LVU700
 1816 083c FFC00CE2 		and	ip, ip, #255
 1817 0840 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1818              		.loc 1 96 3 is_stmt 1 view .LVU701
 1819              	.LVL157:
  97:./src/main.c  **** 	}
 1820              		.loc 1 97 3 view .LVU702
  96:./src/main.c  **** 		return chr &0xF;
 1821              		.loc 1 96 7 is_stmt 0 view .LVU703
 1822 0844 57004092 		subls	r0, r0, #87
 1823              	.LVL158:
 1824              	.LBB476:
 1825              	.LBI476:
  87:./src/main.c  **** {
 1826              		.loc 1 87 6 is_stmt 1 view .LVU704
 1827              	.LBB477:
 100:./src/main.c  **** 	{
 1828              		.loc 1 100 2 view .LVU705
 104:./src/main.c  **** }
 1829              		.loc 1 104 2 view .LVU706
 104:./src/main.c  **** }
 1830              		.loc 1 104 13 is_stmt 0 view .LVU707
 1831 0848 0F0000E2 		and	r0, r0, #15
 1832              	.LVL159:
 1833              	.L118:
 104:./src/main.c  **** }
 1834              		.loc 1 104 13 view .LVU708
 1835              	.LBE477:
 1836              	.LBE476:
 1837              	.LBE475:
 1838              	.LBE474:
 608:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 1839              		.loc 1 608 30 view .LVU709
 1840 084c 003483E1 		orr	r3, r3, r0, lsl #8
 609:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 1841              		.loc 1 609 3 is_stmt 1 view .LVU710
 609:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 1842              		.loc 1 609 34 is_stmt 0 view .LVU711
 1843 0850 0B00D5E5 		ldrb	r0, [r5, #11]	@ zero_extendqisi2
 1844              	.LVL160:
 1845              	.LBB478:
 1846              	.LBI478:
  87:./src/main.c  **** {
 1847              		.loc 1 87 6 is_stmt 1 view .LVU712
 1848              	.LBB479:
  89:./src/main.c  **** 	{
 1849              		.loc 1 89 2 view .LVU713
  89:./src/main.c  **** 	{
 1850              		.loc 1 89 4 is_stmt 0 view .LVU714
 1851 0854 41C040E2 		sub	ip, r0, #65
 1852 0858 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1853              		.loc 1 91 7 view .LVU715
 1854 085c 37004092 		subls	r0, r0, #55
 1855              	.LVL161:
  92:./src/main.c  **** 	}
 1856              		.loc 1 92 14 view .LVU716
 1857 0860 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1858              		.loc 1 89 4 view .LVU717
 1859 0864 0400009A 		bls	.L122
  94:./src/main.c  **** 	{
 1860              		.loc 1 94 2 is_stmt 1 view .LVU718
  94:./src/main.c  **** 	{
 1861              		.loc 1 94 19 is_stmt 0 view .LVU719
 1862 0868 61C040E2 		sub	ip, r0, #97
 1863              	.LVL162:
  94:./src/main.c  **** 	{
 1864              		.loc 1 94 4 view .LVU720
 1865 086c FFC00CE2 		and	ip, ip, #255
 1866 0870 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1867              		.loc 1 96 3 is_stmt 1 view .LVU721
 1868              	.LVL163:
  97:./src/main.c  **** 	}
 1869              		.loc 1 97 3 view .LVU722
  96:./src/main.c  **** 		return chr &0xF;
 1870              		.loc 1 96 7 is_stmt 0 view .LVU723
 1871 0874 57004092 		subls	r0, r0, #87
 1872              	.LVL164:
 1873              	.LBB480:
 1874              	.LBI480:
  87:./src/main.c  **** {
 1875              		.loc 1 87 6 is_stmt 1 view .LVU724
 1876              	.LBB481:
 100:./src/main.c  **** 	{
 1877              		.loc 1 100 2 view .LVU725
 104:./src/main.c  **** }
 1878              		.loc 1 104 2 view .LVU726
 104:./src/main.c  **** }
 1879              		.loc 1 104 13 is_stmt 0 view .LVU727
 1880 0878 0F0000E2 		and	r0, r0, #15
 1881              	.LVL165:
 1882              	.L122:
 104:./src/main.c  **** }
 1883              		.loc 1 104 13 view .LVU728
 1884              	.LBE481:
 1885              	.LBE480:
 1886              	.LBE479:
 1887              	.LBE478:
 609:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 1888              		.loc 1 609 30 view .LVU729
 1889 087c 003283E1 		orr	r3, r3, r0, lsl #4
 610:./src/main.c  **** 		
 1890              		.loc 1 610 3 is_stmt 1 view .LVU730
 610:./src/main.c  **** 		
 1891              		.loc 1 610 34 is_stmt 0 view .LVU731
 1892 0880 0C00D5E5 		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 1893              	.LVL166:
 1894              	.LBB482:
 1895              	.LBI482:
  87:./src/main.c  **** {
 1896              		.loc 1 87 6 is_stmt 1 view .LVU732
 1897              	.LBB483:
  89:./src/main.c  **** 	{
 1898              		.loc 1 89 2 view .LVU733
  89:./src/main.c  **** 	{
 1899              		.loc 1 89 4 is_stmt 0 view .LVU734
 1900 0884 41C040E2 		sub	ip, r0, #65
 1901 0888 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 1902              		.loc 1 91 7 view .LVU735
 1903 088c 37004092 		subls	r0, r0, #55
 1904              	.LVL167:
  92:./src/main.c  **** 	}
 1905              		.loc 1 92 14 view .LVU736
 1906 0890 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 1907              		.loc 1 89 4 view .LVU737
 1908 0894 0400009A 		bls	.L126
  94:./src/main.c  **** 	{
 1909              		.loc 1 94 2 is_stmt 1 view .LVU738
  94:./src/main.c  **** 	{
 1910              		.loc 1 94 19 is_stmt 0 view .LVU739
 1911 0898 61C040E2 		sub	ip, r0, #97
 1912              	.LVL168:
  94:./src/main.c  **** 	{
 1913              		.loc 1 94 4 view .LVU740
 1914 089c FFC00CE2 		and	ip, ip, #255
 1915 08a0 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 1916              		.loc 1 96 3 is_stmt 1 view .LVU741
 1917              	.LVL169:
  97:./src/main.c  **** 	}
 1918              		.loc 1 97 3 view .LVU742
  96:./src/main.c  **** 		return chr &0xF;
 1919              		.loc 1 96 7 is_stmt 0 view .LVU743
 1920 08a4 57004092 		subls	r0, r0, #87
 1921              	.LVL170:
 1922              	.LBB484:
 1923              	.LBI484:
  87:./src/main.c  **** {
 1924              		.loc 1 87 6 is_stmt 1 view .LVU744
 1925              	.LBB485:
 100:./src/main.c  **** 	{
 1926              		.loc 1 100 2 view .LVU745
 104:./src/main.c  **** }
 1927              		.loc 1 104 2 view .LVU746
 104:./src/main.c  **** }
 1928              		.loc 1 104 13 is_stmt 0 view .LVU747
 1929 08a8 0F0000E2 		and	r0, r0, #15
 1930              	.LVL171:
 1931              	.L126:
 104:./src/main.c  **** }
 1932              		.loc 1 104 13 view .LVU748
 1933              	.LBE485:
 1934              	.LBE484:
 1935              	.LBE483:
 1936              	.LBE482:
 610:./src/main.c  **** 		
 1937              		.loc 1 610 30 view .LVU749
 1938 08ac 030080E1 		orr	r0, r0, r3
 613:./src/main.c  **** 	
 1939              		.loc 1 613 17 view .LVU750
 1940 08b0 0230A0E3 		mov	r3, #2
 1941              	.LBB486:
 1942              	.LBB487:
  89:./src/main.c  **** 	{
 1943              		.loc 1 89 4 view .LVU751
 1944 08b4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 1945              		.loc 1 91 7 view .LVU752
 1946 08b8 37204292 		subls	r2, r2, #55
 1947              	.LBE487:
 1948              	.LBE486:
 610:./src/main.c  **** 		
 1949              		.loc 1 610 15 view .LVU753
 1950 08bc 500085E5 		str	r0, [r5, #80]
 613:./src/main.c  **** 	
 1951              		.loc 1 613 3 is_stmt 1 view .LVU754
 613:./src/main.c  **** 	
 1952              		.loc 1 613 17 is_stmt 0 view .LVU755
 1953 08c0 4E30C5E5 		strb	r3, [r5, #78]
 616:./src/main.c  **** 		
 1954              		.loc 1 616 3 is_stmt 1 view .LVU756
 1955              	.LBB491:
 1956              	.LBI486:
  87:./src/main.c  **** {
 1957              		.loc 1 87 6 view .LVU757
 1958              	.LBB490:
  89:./src/main.c  **** 	{
 1959              		.loc 1 89 2 view .LVU758
  92:./src/main.c  **** 	}
 1960              		.loc 1 92 14 is_stmt 0 view .LVU759
 1961 08c4 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 1962              		.loc 1 89 4 view .LVU760
 1963 08c8 0400009A 		bls	.L130
  94:./src/main.c  **** 	{
 1964              		.loc 1 94 2 is_stmt 1 view .LVU761
  94:./src/main.c  **** 	{
 1965              		.loc 1 94 19 is_stmt 0 view .LVU762
 1966 08cc 613042E2 		sub	r3, r2, #97
  94:./src/main.c  **** 	{
 1967              		.loc 1 94 4 view .LVU763
 1968 08d0 FF3003E2 		and	r3, r3, #255
 1969 08d4 190053E3 		cmp	r3, #25
  96:./src/main.c  **** 		return chr &0xF;
 1970              		.loc 1 96 3 is_stmt 1 view .LVU764
 1971              	.LVL172:
  97:./src/main.c  **** 	}
 1972              		.loc 1 97 3 view .LVU765
  96:./src/main.c  **** 		return chr &0xF;
 1973              		.loc 1 96 7 is_stmt 0 view .LVU766
 1974 08d8 57204292 		subls	r2, r2, #87
 1975              	.LVL173:
 1976              	.LBB488:
 1977              	.LBI488:
  87:./src/main.c  **** {
 1978              		.loc 1 87 6 is_stmt 1 view .LVU767
 1979              	.LBB489:
 100:./src/main.c  **** 	{
 1980              		.loc 1 100 2 view .LVU768
 104:./src/main.c  **** }
 1981              		.loc 1 104 2 view .LVU769
 104:./src/main.c  **** }
 1982              		.loc 1 104 13 is_stmt 0 view .LVU770
 1983 08dc 0F2002E2 		and	r2, r2, #15
 1984              	.LVL174:
 1985              	.L130:
 104:./src/main.c  **** }
 1986              		.loc 1 104 13 view .LVU771
 1987 08e0 08C69FE5 		ldr	ip, .L248+28
 1988              	.LBE489:
 1989              	.LBE488:
 1990              	.LBE490:
 1991              	.LBE491:
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1992              		.loc 1 619 3 view .LVU772
 1993 08e4 00E0A0E3 		mov	lr, #0
 616:./src/main.c  **** 		
 1994              		.loc 1 616 16 view .LVU773
 1995 08e8 4F20C5E5 		strb	r2, [r5, #79]
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1996              		.loc 1 619 3 is_stmt 1 view .LVU774
 1997              	.LVL175:
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 1998              		.loc 1 619 3 is_stmt 0 view .LVU775
 1999 08ec 50004CE2 		sub	r0, ip, #80
 2000 08f0 1B0000EA 		b	.L133
 2001              	.LVL176:
 2002              	.L142:
 620:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[11+2*i]))& 0x00F));
 2003              		.loc 1 620 4 is_stmt 1 view .LVU776
 620:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[11+2*i]))& 0x00F));
 2004              		.loc 1 620 25 is_stmt 0 view .LVU777
 2005 08f4 0A30D0E5 		ldrb	r3, [r0, #10]	@ zero_extendqisi2
 2006              	.LVL177:
 2007              	.LBB492:
 2008              	.LBI492:
  87:./src/main.c  **** {
 2009              		.loc 1 87 6 is_stmt 1 view .LVU778
 2010              	.LBB493:
  89:./src/main.c  **** 	{
 2011              		.loc 1 89 2 view .LVU779
  89:./src/main.c  **** 	{
 2012              		.loc 1 89 4 is_stmt 0 view .LVU780
 2013 08f8 411043E2 		sub	r1, r3, #65
 2014 08fc 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2015              		.loc 1 91 7 view .LVU781
 2016 0900 37304392 		subls	r3, r3, #55
 2017              	.LVL178:
  92:./src/main.c  **** 	}
 2018              		.loc 1 92 14 view .LVU782
 2019 0904 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 2020              		.loc 1 89 4 view .LVU783
 2021 0908 0400009A 		bls	.L135
  94:./src/main.c  **** 	{
 2022              		.loc 1 94 2 is_stmt 1 view .LVU784
  94:./src/main.c  **** 	{
 2023              		.loc 1 94 19 is_stmt 0 view .LVU785
 2024 090c 611043E2 		sub	r1, r3, #97
 2025              	.LVL179:
  94:./src/main.c  **** 	{
 2026              		.loc 1 94 4 view .LVU786
 2027 0910 FF1001E2 		and	r1, r1, #255
 2028 0914 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2029              		.loc 1 96 3 is_stmt 1 view .LVU787
 2030              	.LVL180:
  97:./src/main.c  **** 	}
 2031              		.loc 1 97 3 view .LVU788
  96:./src/main.c  **** 		return chr &0xF;
 2032              		.loc 1 96 7 is_stmt 0 view .LVU789
 2033 0918 57304392 		subls	r3, r3, #87
 2034              	.LVL181:
 2035              	.LBB494:
 2036              	.LBI494:
  87:./src/main.c  **** {
 2037              		.loc 1 87 6 is_stmt 1 view .LVU790
 2038              	.LBB495:
 100:./src/main.c  **** 	{
 2039              		.loc 1 100 2 view .LVU791
 104:./src/main.c  **** }
 2040              		.loc 1 104 2 view .LVU792
 104:./src/main.c  **** }
 2041              		.loc 1 104 13 is_stmt 0 view .LVU793
 2042 091c 0F3003E2 		and	r3, r3, #15
 2043              	.LVL182:
 2044              	.L135:
 104:./src/main.c  **** }
 2045              		.loc 1 104 13 view .LVU794
 2046              	.LBE495:
 2047              	.LBE494:
 2048              	.LBE493:
 2049              	.LBE492:
 621:./src/main.c  **** 		}
 2050              		.loc 1 621 4 is_stmt 1 view .LVU795
 621:./src/main.c  **** 		}
 2051              		.loc 1 621 47 is_stmt 0 view .LVU796
 2052 0920 0B10D0E5 		ldrb	r1, [r0, #11]	@ zero_extendqisi2
 2053              	.LVL183:
 2054              	.LBB496:
 2055              	.LBI496:
  87:./src/main.c  **** {
 2056              		.loc 1 87 6 is_stmt 1 view .LVU797
 2057              	.LBB497:
  89:./src/main.c  **** 	{
 2058              		.loc 1 89 2 view .LVU798
  89:./src/main.c  **** 	{
 2059              		.loc 1 89 4 is_stmt 0 view .LVU799
 2060 0924 417041E2 		sub	r7, r1, #65
 2061 0928 190057E3 		cmp	r7, #25
 2062              	.LBE497:
 2063              	.LBE496:
 621:./src/main.c  **** 		}
 2064              		.loc 1 621 39 view .LVU800
 2065 092c 033EA0E1 		lsl	r3, r3, #28
 2066              	.LBB502:
 2067              	.LBB500:
  91:./src/main.c  **** 		return chr &0xF;
 2068              		.loc 1 91 7 view .LVU801
 2069 0930 37104192 		subls	r1, r1, #55
 2070              	.LVL184:
  91:./src/main.c  **** 		return chr &0xF;
 2071              		.loc 1 91 7 view .LVU802
 2072              	.LBE500:
 2073              	.LBE502:
 621:./src/main.c  **** 		}
 2074              		.loc 1 621 39 view .LVU803
 2075 0934 433CA0E1 		asr	r3, r3, #24
 2076              	.LBB503:
 2077              	.LBB501:
  92:./src/main.c  **** 	}
 2078              		.loc 1 92 14 view .LVU804
 2079 0938 0F100192 		andls	r1, r1, #15
  89:./src/main.c  **** 	{
 2080              		.loc 1 89 4 view .LVU805
 2081 093c 0400009A 		bls	.L139
  94:./src/main.c  **** 	{
 2082              		.loc 1 94 2 is_stmt 1 view .LVU806
  94:./src/main.c  **** 	{
 2083              		.loc 1 94 19 is_stmt 0 view .LVU807
 2084 0940 617041E2 		sub	r7, r1, #97
 2085              	.LVL185:
  94:./src/main.c  **** 	{
 2086              		.loc 1 94 4 view .LVU808
 2087 0944 FF7007E2 		and	r7, r7, #255
 2088 0948 190057E3 		cmp	r7, #25
  96:./src/main.c  **** 		return chr &0xF;
 2089              		.loc 1 96 3 is_stmt 1 view .LVU809
 2090              	.LVL186:
  97:./src/main.c  **** 	}
 2091              		.loc 1 97 3 view .LVU810
  96:./src/main.c  **** 		return chr &0xF;
 2092              		.loc 1 96 7 is_stmt 0 view .LVU811
 2093 094c 57104192 		subls	r1, r1, #87
 2094              	.LVL187:
 2095              	.LBB498:
 2096              	.LBI498:
  87:./src/main.c  **** {
 2097              		.loc 1 87 6 is_stmt 1 view .LVU812
 2098              	.LBB499:
 100:./src/main.c  **** 	{
 2099              		.loc 1 100 2 view .LVU813
 104:./src/main.c  **** }
 2100              		.loc 1 104 2 view .LVU814
 104:./src/main.c  **** }
 2101              		.loc 1 104 13 is_stmt 0 view .LVU815
 2102 0950 0F1001E2 		and	r1, r1, #15
 2103              	.LVL188:
 2104              	.L139:
 104:./src/main.c  **** }
 2105              		.loc 1 104 13 view .LVU816
 2106              	.LBE499:
 2107              	.LBE498:
 2108              	.LBE501:
 2109              	.LBE503:
 621:./src/main.c  **** 		}
 2110              		.loc 1 621 43 view .LVU817
 2111 0954 011083E1 		orr	r1, r3, r1
 621:./src/main.c  **** 		}
 2112              		.loc 1 621 22 view .LVU818
 2113 0958 0110CCE4 		strb	r1, [ip], #1
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 2114              		.loc 1 619 29 is_stmt 1 view .LVU819
 2115              	.LVL189:
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 2116              		.loc 1 619 29 is_stmt 0 view .LVU820
 2117 095c 01E08EE2 		add	lr, lr, #1
 2118              	.LVL190:
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 2119              		.loc 1 619 29 view .LVU821
 2120 0960 020080E2 		add	r0, r0, #2
 2121              	.L133:
 2122              	.LVL191:
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 2123              		.loc 1 619 12 is_stmt 1 view .LVU822
 619:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[10+2*i])<<4 )& 0x0F0;
 2124              		.loc 1 619 3 is_stmt 0 view .LVU823
 2125 0964 FF300EE2 		and	r3, lr, #255
 2126 0968 030052E1 		cmp	r2, r3
 2127 096c E0FFFF8A 		bhi	.L142
 2128              	.LVL192:
 2129              	.L240:
 625:./src/main.c  **** 	}
 2130              		.loc 1 625 3 is_stmt 1 view .LVU824
 2131 0970 0000A0E3 		mov	r0, #0
 2132 0974 6C159FE5 		ldr	r1, .L248+20
 2133 0978 FEFFFFEB 		bl	CAN_UserWrite
 2134              	.LVL193:
 633:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 2135              		.loc 1 633 2 view .LVU825
 633:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 2136              		.loc 1 633 15 is_stmt 0 view .LVU826
 2137 097c 0020A0E3 		mov	r2, #0
 635:./src/main.c  **** 		if (Result == ret_OK) {
 2138              		.loc 1 635 5 view .LVU827
 2139 0980 0530D6E5 		ldrb	r3, [r6, #5]	@ zero_extendqisi2
 2140 0984 010053E3 		cmp	r3, #1
 633:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 2141              		.loc 1 633 15 view .LVU828
 2142 0988 4920C5E5 		strb	r2, [r5, #73]
 635:./src/main.c  **** 		if (Result == ret_OK) {
 2143              		.loc 1 635 2 is_stmt 1 view .LVU829
 637:./src/main.c  **** 			SerXmtBufPtr++;
 2144              		.loc 1 637 4 view .LVU830
 637:./src/main.c  **** 			SerXmtBufPtr++;
 2145              		.loc 1 637 28 is_stmt 0 view .LVU831
 2146 098c 5A20A003 		moveq	r2, #90
 638:./src/main.c  **** 		}
 2147              		.loc 1 638 16 view .LVU832
 2148 0990 4930C505 		strbeq	r3, [r5, #73]
 637:./src/main.c  **** 			SerXmtBufPtr++;
 2149              		.loc 1 637 28 view .LVU833
 2150 0994 2820C505 		strbeq	r2, [r5, #40]
 638:./src/main.c  **** 		}
 2151              		.loc 1 638 4 is_stmt 1 view .LVU834
 2152              	.LVL194:
 2153              	.L143:
 641:./src/main.c  **** 	SerXmtBufPtr++;
 2154              		.loc 1 641 2 view .LVU835
 641:./src/main.c  **** 	SerXmtBufPtr++;
 2155              		.loc 1 641 11 is_stmt 0 view .LVU836
 2156 0998 4930D5E5 		ldrb	r3, [r5, #73]	@ zero_extendqisi2
 642:./src/main.c  **** 	
 2157              		.loc 1 642 14 view .LVU837
 2158 099c 012083E2 		add	r2, r3, #1
 641:./src/main.c  **** 	SerXmtBufPtr++;
 2159              		.loc 1 641 26 view .LVU838
 2160 09a0 033085E0 		add	r3, r5, r3
 2161 09a4 2840C3E5 		strb	r4, [r3, #40]
 642:./src/main.c  **** 	
 2162              		.loc 1 642 2 is_stmt 1 view .LVU839
 642:./src/main.c  **** 	
 2163              		.loc 1 642 14 is_stmt 0 view .LVU840
 2164 09a8 FF2002E2 		and	r2, r2, #255
 645:./src/main.c  **** }
 2165              		.loc 1 645 2 view .LVU841
 2166 09ac 24159FE5 		ldr	r1, .L248+4
 2167 09b0 0000A0E3 		mov	r0, #0
 642:./src/main.c  **** 	
 2168              		.loc 1 642 14 view .LVU842
 2169 09b4 4920C5E5 		strb	r2, [r5, #73]
 645:./src/main.c  **** }
 2170              		.loc 1 645 2 is_stmt 1 view .LVU843
 2171 09b8 FEFFFFEB 		bl	SER_Write
 2172              	.LVL195:
 646:./src/main.c  **** /**************************************************/
 2173              		.loc 1 646 1 is_stmt 0 view .LVU844
 2174 09bc 13FEFFEA 		b	.L41
 2175              	.LVL196:
 2176              	.L31:
 646:./src/main.c  **** /**************************************************/
 2177              		.loc 1 646 1 view .LVU845
 2178              	.LBE451:
 2179              	.LBE450:
 325:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 2180              		.loc 1 325 3 is_stmt 1 view .LVU846
 325:./src/main.c  **** 		&&  (CanChnOpen == 1) 
 2181              		.loc 1 325 6 is_stmt 0 view .LVU847
 2182 09c0 0A0056E3 		cmp	r6, #10
 2183 09c4 F8FDFF1A 		bne	.L18
 326:./src/main.c  **** 		&&  (CanBusMode == BUS_ON)) {
 2184              		.loc 1 326 3 view .LVU848
 2185 09c8 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 2186 09cc 010053E3 		cmp	r3, #1
 2187 09d0 F5FDFF1A 		bne	.L18
 327:./src/main.c  **** 			TransmitExtendedRtr();
 2188              		.loc 1 327 19 view .LVU849
 2189 09d4 08659FE5 		ldr	r6, .L248+16
 2190              	.LVL197:
 327:./src/main.c  **** 			TransmitExtendedRtr();
 2191              		.loc 1 327 3 view .LVU850
 2192 09d8 0420D6E5 		ldrb	r2, [r6, #4]	@ zero_extendqisi2
 2193              	.LVL198:
 327:./src/main.c  **** 			TransmitExtendedRtr();
 2194              		.loc 1 327 3 view .LVU851
 2195 09dc 000052E3 		cmp	r2, #0
 2196 09e0 F1FDFF1A 		bne	.L18
 328:./src/main.c  **** 		}
 2197              		.loc 1 328 4 is_stmt 1 view .LVU852
 2198              	.LBB504:
 2199              	.LBI353:
 813:./src/main.c  **** //-------------------------------------------------
 2200              		.loc 1 813 13 view .LVU853
 2201              	.LBB399:
 816:./src/main.c  **** 
 2202              		.loc 1 816 2 view .LVU854
 818:./src/main.c  **** 
 2203              		.loc 1 818 2 view .LVU855
 2204              	.LVL199:
 821:./src/main.c  **** 
 2205              		.loc 1 821 2 view .LVU856
 824:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 2206              		.loc 1 824 3 view .LVU857
 828:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 2207              		.loc 1 828 34 is_stmt 0 view .LVU858
 2208 09e4 0530D5E5 		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 2209              	.LBB361:
 2210              	.LBB362:
  89:./src/main.c  **** 	{
 2211              		.loc 1 89 4 view .LVU859
 2212 09e8 411043E2 		sub	r1, r3, #65
 2213 09ec 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2214              		.loc 1 91 7 view .LVU860
 2215 09f0 37304392 		subls	r3, r3, #55
 2216              	.LBE362:
 2217              	.LBE361:
 824:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 2218              		.loc 1 824 22 view .LVU861
 2219 09f4 542085E5 		str	r2, [r5, #84]
 825:./src/main.c  **** 	
 2220              		.loc 1 825 3 is_stmt 1 view .LVU862
 825:./src/main.c  **** 	
 2221              		.loc 1 825 22 is_stmt 0 view .LVU863
 2222 09f8 582085E5 		str	r2, [r5, #88]
 828:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 2223              		.loc 1 828 3 is_stmt 1 view .LVU864
 2224              	.LBB366:
 2225              	.LBI361:
  87:./src/main.c  **** {
 2226              		.loc 1 87 6 view .LVU865
 2227              	.LBB365:
  89:./src/main.c  **** 	{
 2228              		.loc 1 89 2 view .LVU866
  92:./src/main.c  **** 	}
 2229              		.loc 1 92 14 is_stmt 0 view .LVU867
 2230 09fc 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 2231              		.loc 1 89 4 view .LVU868
 2232 0a00 0400009A 		bls	.L162
  94:./src/main.c  **** 	{
 2233              		.loc 1 94 2 is_stmt 1 view .LVU869
  94:./src/main.c  **** 	{
 2234              		.loc 1 94 19 is_stmt 0 view .LVU870
 2235 0a04 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 2236              		.loc 1 94 4 view .LVU871
 2237 0a08 FF2002E2 		and	r2, r2, #255
 2238 0a0c 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 2239              		.loc 1 96 3 is_stmt 1 view .LVU872
 2240              	.LVL200:
  97:./src/main.c  **** 	}
 2241              		.loc 1 97 3 view .LVU873
  96:./src/main.c  **** 		return chr &0xF;
 2242              		.loc 1 96 7 is_stmt 0 view .LVU874
 2243 0a10 57304392 		subls	r3, r3, #87
 2244              	.LVL201:
 2245              	.LBB363:
 2246              	.LBI363:
  87:./src/main.c  **** {
 2247              		.loc 1 87 6 is_stmt 1 view .LVU875
 2248              	.LBB364:
 100:./src/main.c  **** 	{
 2249              		.loc 1 100 2 view .LVU876
 104:./src/main.c  **** }
 2250              		.loc 1 104 2 view .LVU877
 104:./src/main.c  **** }
 2251              		.loc 1 104 13 is_stmt 0 view .LVU878
 2252 0a14 0F3003E2 		and	r3, r3, #15
 2253              	.LVL202:
 2254              	.L162:
 104:./src/main.c  **** }
 2255              		.loc 1 104 13 view .LVU879
 2256              	.LBE364:
 2257              	.LBE363:
 2258              	.LBE365:
 2259              	.LBE366:
 829:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 2260              		.loc 1 829 34 view .LVU880
 2261 0a18 0620D5E5 		ldrb	r2, [r5, #6]	@ zero_extendqisi2
 2262              	.LBB367:
 2263              	.LBB368:
  89:./src/main.c  **** 	{
 2264              		.loc 1 89 4 view .LVU881
 2265 0a1c 411042E2 		sub	r1, r2, #65
 2266 0a20 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2267              		.loc 1 91 7 view .LVU882
 2268 0a24 37204292 		subls	r2, r2, #55
 2269              	.LBE368:
 2270              	.LBE367:
 828:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<24 )& 0x0F000000));
 2271              		.loc 1 828 57 view .LVU883
 2272 0a28 033EA0E1 		lsl	r3, r3, #28
 829:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 2273              		.loc 1 829 3 is_stmt 1 view .LVU884
 2274              	.LBB372:
 2275              	.LBI367:
  87:./src/main.c  **** {
 2276              		.loc 1 87 6 view .LVU885
 2277              	.LBB371:
  89:./src/main.c  **** 	{
 2278              		.loc 1 89 2 view .LVU886
  92:./src/main.c  **** 	}
 2279              		.loc 1 92 14 is_stmt 0 view .LVU887
 2280 0a2c 0F100292 		andls	r1, r2, #15
  89:./src/main.c  **** 	{
 2281              		.loc 1 89 4 view .LVU888
 2282 0a30 0400009A 		bls	.L166
  94:./src/main.c  **** 	{
 2283              		.loc 1 94 2 is_stmt 1 view .LVU889
  94:./src/main.c  **** 	{
 2284              		.loc 1 94 19 is_stmt 0 view .LVU890
 2285 0a34 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2286              		.loc 1 94 4 view .LVU891
 2287 0a38 FF1001E2 		and	r1, r1, #255
 2288 0a3c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2289              		.loc 1 96 3 is_stmt 1 view .LVU892
 2290              	.LVL203:
  97:./src/main.c  **** 	}
 2291              		.loc 1 97 3 view .LVU893
  96:./src/main.c  **** 		return chr &0xF;
 2292              		.loc 1 96 7 is_stmt 0 view .LVU894
 2293 0a40 57204292 		subls	r2, r2, #87
 2294              	.LVL204:
 2295              	.LBB369:
 2296              	.LBI369:
  87:./src/main.c  **** {
 2297              		.loc 1 87 6 is_stmt 1 view .LVU895
 2298              	.LBB370:
 100:./src/main.c  **** 	{
 2299              		.loc 1 100 2 view .LVU896
 104:./src/main.c  **** }
 2300              		.loc 1 104 2 view .LVU897
 104:./src/main.c  **** }
 2301              		.loc 1 104 13 is_stmt 0 view .LVU898
 2302 0a44 0F1002E2 		and	r1, r2, #15
 2303              	.LVL205:
 2304              	.L166:
 104:./src/main.c  **** }
 2305              		.loc 1 104 13 view .LVU899
 2306              	.LBE370:
 2307              	.LBE369:
 2308              	.LBE371:
 2309              	.LBE372:
 830:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 2310              		.loc 1 830 34 view .LVU900
 2311 0a48 0720D5E5 		ldrb	r2, [r5, #7]	@ zero_extendqisi2
 829:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])<<20 )& 0x00F00000));
 2312              		.loc 1 829 30 view .LVU901
 2313 0a4c 013C83E1 		orr	r3, r3, r1, lsl #24
 830:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 2314              		.loc 1 830 3 is_stmt 1 view .LVU902
 2315              	.LVL206:
 2316              	.LBB373:
 2317              	.LBI373:
  87:./src/main.c  **** {
 2318              		.loc 1 87 6 view .LVU903
 2319              	.LBB374:
  89:./src/main.c  **** 	{
 2320              		.loc 1 89 2 view .LVU904
  89:./src/main.c  **** 	{
 2321              		.loc 1 89 4 is_stmt 0 view .LVU905
 2322 0a50 411042E2 		sub	r1, r2, #65
 2323 0a54 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2324              		.loc 1 91 7 view .LVU906
 2325 0a58 37204292 		subls	r2, r2, #55
 2326              	.LVL207:
  92:./src/main.c  **** 	}
 2327              		.loc 1 92 14 view .LVU907
 2328 0a5c 0F100292 		andls	r1, r2, #15
 2329              	.LVL208:
  89:./src/main.c  **** 	{
 2330              		.loc 1 89 4 view .LVU908
 2331 0a60 0400009A 		bls	.L170
  94:./src/main.c  **** 	{
 2332              		.loc 1 94 2 is_stmt 1 view .LVU909
  94:./src/main.c  **** 	{
 2333              		.loc 1 94 19 is_stmt 0 view .LVU910
 2334 0a64 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2335              		.loc 1 94 4 view .LVU911
 2336 0a68 FF1001E2 		and	r1, r1, #255
 2337 0a6c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2338              		.loc 1 96 3 is_stmt 1 view .LVU912
 2339              	.LVL209:
  97:./src/main.c  **** 	}
 2340              		.loc 1 97 3 view .LVU913
  96:./src/main.c  **** 		return chr &0xF;
 2341              		.loc 1 96 7 is_stmt 0 view .LVU914
 2342 0a70 57204292 		subls	r2, r2, #87
 2343              	.LVL210:
 2344              	.LBB375:
 2345              	.LBI375:
  87:./src/main.c  **** {
 2346              		.loc 1 87 6 is_stmt 1 view .LVU915
 2347              	.LBB376:
 100:./src/main.c  **** 	{
 2348              		.loc 1 100 2 view .LVU916
 104:./src/main.c  **** }
 2349              		.loc 1 104 2 view .LVU917
 104:./src/main.c  **** }
 2350              		.loc 1 104 13 is_stmt 0 view .LVU918
 2351 0a74 0F1002E2 		and	r1, r2, #15
 2352              	.LVL211:
 2353              	.L170:
 104:./src/main.c  **** }
 2354              		.loc 1 104 13 view .LVU919
 2355              	.LBE376:
 2356              	.LBE375:
 2357              	.LBE374:
 2358              	.LBE373:
 831:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 2359              		.loc 1 831 34 view .LVU920
 2360 0a78 0820D5E5 		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 830:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[4])<<16 )& 0x000F0000));
 2361              		.loc 1 830 30 view .LVU921
 2362 0a7c 013A83E1 		orr	r3, r3, r1, lsl #20
 831:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 2363              		.loc 1 831 3 is_stmt 1 view .LVU922
 2364              	.LVL212:
 2365              	.LBB377:
 2366              	.LBI377:
  87:./src/main.c  **** {
 2367              		.loc 1 87 6 view .LVU923
 2368              	.LBB378:
  89:./src/main.c  **** 	{
 2369              		.loc 1 89 2 view .LVU924
  89:./src/main.c  **** 	{
 2370              		.loc 1 89 4 is_stmt 0 view .LVU925
 2371 0a80 411042E2 		sub	r1, r2, #65
 2372 0a84 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2373              		.loc 1 91 7 view .LVU926
 2374 0a88 37204292 		subls	r2, r2, #55
 2375              	.LVL213:
  92:./src/main.c  **** 	}
 2376              		.loc 1 92 14 view .LVU927
 2377 0a8c 0F100292 		andls	r1, r2, #15
 2378              	.LVL214:
  89:./src/main.c  **** 	{
 2379              		.loc 1 89 4 view .LVU928
 2380 0a90 0400009A 		bls	.L174
  94:./src/main.c  **** 	{
 2381              		.loc 1 94 2 is_stmt 1 view .LVU929
  94:./src/main.c  **** 	{
 2382              		.loc 1 94 19 is_stmt 0 view .LVU930
 2383 0a94 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2384              		.loc 1 94 4 view .LVU931
 2385 0a98 FF1001E2 		and	r1, r1, #255
 2386 0a9c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2387              		.loc 1 96 3 is_stmt 1 view .LVU932
 2388              	.LVL215:
  97:./src/main.c  **** 	}
 2389              		.loc 1 97 3 view .LVU933
  96:./src/main.c  **** 		return chr &0xF;
 2390              		.loc 1 96 7 is_stmt 0 view .LVU934
 2391 0aa0 57204292 		subls	r2, r2, #87
 2392              	.LVL216:
 2393              	.LBB379:
 2394              	.LBI379:
  87:./src/main.c  **** {
 2395              		.loc 1 87 6 is_stmt 1 view .LVU935
 2396              	.LBB380:
 100:./src/main.c  **** 	{
 2397              		.loc 1 100 2 view .LVU936
 104:./src/main.c  **** }
 2398              		.loc 1 104 2 view .LVU937
 104:./src/main.c  **** }
 2399              		.loc 1 104 13 is_stmt 0 view .LVU938
 2400 0aa4 0F1002E2 		and	r1, r2, #15
 2401              	.LVL217:
 2402              	.L174:
 104:./src/main.c  **** }
 2403              		.loc 1 104 13 view .LVU939
 2404              	.LBE380:
 2405              	.LBE379:
 2406              	.LBE378:
 2407              	.LBE377:
 832:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 2408              		.loc 1 832 34 view .LVU940
 2409 0aa8 0920D5E5 		ldrb	r2, [r5, #9]	@ zero_extendqisi2
 831:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[5])<<12 )& 0x0000F000));
 2410              		.loc 1 831 30 view .LVU941
 2411 0aac 013883E1 		orr	r3, r3, r1, lsl #16
 832:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 2412              		.loc 1 832 3 is_stmt 1 view .LVU942
 2413              	.LVL218:
 2414              	.LBB381:
 2415              	.LBI381:
  87:./src/main.c  **** {
 2416              		.loc 1 87 6 view .LVU943
 2417              	.LBB382:
  89:./src/main.c  **** 	{
 2418              		.loc 1 89 2 view .LVU944
  89:./src/main.c  **** 	{
 2419              		.loc 1 89 4 is_stmt 0 view .LVU945
 2420 0ab0 411042E2 		sub	r1, r2, #65
 2421 0ab4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2422              		.loc 1 91 7 view .LVU946
 2423 0ab8 37204292 		subls	r2, r2, #55
 2424              	.LVL219:
  92:./src/main.c  **** 	}
 2425              		.loc 1 92 14 view .LVU947
 2426 0abc 0F100292 		andls	r1, r2, #15
 2427              	.LVL220:
  89:./src/main.c  **** 	{
 2428              		.loc 1 89 4 view .LVU948
 2429 0ac0 0400009A 		bls	.L178
  94:./src/main.c  **** 	{
 2430              		.loc 1 94 2 is_stmt 1 view .LVU949
  94:./src/main.c  **** 	{
 2431              		.loc 1 94 19 is_stmt 0 view .LVU950
 2432 0ac4 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2433              		.loc 1 94 4 view .LVU951
 2434 0ac8 FF1001E2 		and	r1, r1, #255
 2435 0acc 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2436              		.loc 1 96 3 is_stmt 1 view .LVU952
 2437              	.LVL221:
  97:./src/main.c  **** 	}
 2438              		.loc 1 97 3 view .LVU953
  96:./src/main.c  **** 		return chr &0xF;
 2439              		.loc 1 96 7 is_stmt 0 view .LVU954
 2440 0ad0 57204292 		subls	r2, r2, #87
 2441              	.LVL222:
 2442              	.LBB383:
 2443              	.LBI383:
  87:./src/main.c  **** {
 2444              		.loc 1 87 6 is_stmt 1 view .LVU955
 2445              	.LBB384:
 100:./src/main.c  **** 	{
 2446              		.loc 1 100 2 view .LVU956
 104:./src/main.c  **** }
 2447              		.loc 1 104 2 view .LVU957
 104:./src/main.c  **** }
 2448              		.loc 1 104 13 is_stmt 0 view .LVU958
 2449 0ad4 0F1002E2 		and	r1, r2, #15
 2450              	.LVL223:
 2451              	.L178:
 104:./src/main.c  **** }
 2452              		.loc 1 104 13 view .LVU959
 2453              	.LBE384:
 2454              	.LBE383:
 2455              	.LBE382:
 2456              	.LBE381:
 833:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 2457              		.loc 1 833 34 view .LVU960
 2458 0ad8 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 832:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[6])<< 8 )& 0x00000F00));
 2459              		.loc 1 832 30 view .LVU961
 2460 0adc 013683E1 		orr	r3, r3, r1, lsl #12
 833:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 2461              		.loc 1 833 3 is_stmt 1 view .LVU962
 2462              	.LVL224:
 2463              	.LBB385:
 2464              	.LBI385:
  87:./src/main.c  **** {
 2465              		.loc 1 87 6 view .LVU963
 2466              	.LBB386:
  89:./src/main.c  **** 	{
 2467              		.loc 1 89 2 view .LVU964
  89:./src/main.c  **** 	{
 2468              		.loc 1 89 4 is_stmt 0 view .LVU965
 2469 0ae0 411042E2 		sub	r1, r2, #65
 2470 0ae4 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2471              		.loc 1 91 7 view .LVU966
 2472 0ae8 37204292 		subls	r2, r2, #55
 2473              	.LVL225:
  92:./src/main.c  **** 	}
 2474              		.loc 1 92 14 view .LVU967
 2475 0aec 0F100292 		andls	r1, r2, #15
 2476              	.LVL226:
  89:./src/main.c  **** 	{
 2477              		.loc 1 89 4 view .LVU968
 2478 0af0 0400009A 		bls	.L182
  94:./src/main.c  **** 	{
 2479              		.loc 1 94 2 is_stmt 1 view .LVU969
  94:./src/main.c  **** 	{
 2480              		.loc 1 94 19 is_stmt 0 view .LVU970
 2481 0af4 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2482              		.loc 1 94 4 view .LVU971
 2483 0af8 FF1001E2 		and	r1, r1, #255
 2484 0afc 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2485              		.loc 1 96 3 is_stmt 1 view .LVU972
 2486              	.LVL227:
  97:./src/main.c  **** 	}
 2487              		.loc 1 97 3 view .LVU973
  96:./src/main.c  **** 		return chr &0xF;
 2488              		.loc 1 96 7 is_stmt 0 view .LVU974
 2489 0b00 57204292 		subls	r2, r2, #87
 2490              	.LVL228:
 2491              	.LBB387:
 2492              	.LBI387:
  87:./src/main.c  **** {
 2493              		.loc 1 87 6 is_stmt 1 view .LVU975
 2494              	.LBB388:
 100:./src/main.c  **** 	{
 2495              		.loc 1 100 2 view .LVU976
 104:./src/main.c  **** }
 2496              		.loc 1 104 2 view .LVU977
 104:./src/main.c  **** }
 2497              		.loc 1 104 13 is_stmt 0 view .LVU978
 2498 0b04 0F1002E2 		and	r1, r2, #15
 2499              	.LVL229:
 2500              	.L182:
 104:./src/main.c  **** }
 2501              		.loc 1 104 13 view .LVU979
 2502              	.LBE388:
 2503              	.LBE387:
 2504              	.LBE386:
 2505              	.LBE385:
 834:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 2506              		.loc 1 834 34 view .LVU980
 2507 0b08 0B20D5E5 		ldrb	r2, [r5, #11]	@ zero_extendqisi2
 833:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[7])<< 4 )& 0x000000F0));
 2508              		.loc 1 833 30 view .LVU981
 2509 0b0c 013483E1 		orr	r3, r3, r1, lsl #8
 834:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 2510              		.loc 1 834 3 is_stmt 1 view .LVU982
 2511              	.LVL230:
 2512              	.LBB389:
 2513              	.LBI389:
  87:./src/main.c  **** {
 2514              		.loc 1 87 6 view .LVU983
 2515              	.LBB390:
  89:./src/main.c  **** 	{
 2516              		.loc 1 89 2 view .LVU984
  89:./src/main.c  **** 	{
 2517              		.loc 1 89 4 is_stmt 0 view .LVU985
 2518 0b10 411042E2 		sub	r1, r2, #65
 2519 0b14 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2520              		.loc 1 91 7 view .LVU986
 2521 0b18 37204292 		subls	r2, r2, #55
 2522              	.LVL231:
  92:./src/main.c  **** 	}
 2523              		.loc 1 92 14 view .LVU987
 2524 0b1c 0F100292 		andls	r1, r2, #15
 2525              	.LVL232:
  89:./src/main.c  **** 	{
 2526              		.loc 1 89 4 view .LVU988
 2527 0b20 0400009A 		bls	.L186
  94:./src/main.c  **** 	{
 2528              		.loc 1 94 2 is_stmt 1 view .LVU989
  94:./src/main.c  **** 	{
 2529              		.loc 1 94 19 is_stmt 0 view .LVU990
 2530 0b24 611042E2 		sub	r1, r2, #97
  94:./src/main.c  **** 	{
 2531              		.loc 1 94 4 view .LVU991
 2532 0b28 FF1001E2 		and	r1, r1, #255
 2533 0b2c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2534              		.loc 1 96 3 is_stmt 1 view .LVU992
 2535              	.LVL233:
  97:./src/main.c  **** 	}
 2536              		.loc 1 97 3 view .LVU993
  96:./src/main.c  **** 		return chr &0xF;
 2537              		.loc 1 96 7 is_stmt 0 view .LVU994
 2538 0b30 57204292 		subls	r2, r2, #87
 2539              	.LVL234:
 2540              	.LBB391:
 2541              	.LBI391:
  87:./src/main.c  **** {
 2542              		.loc 1 87 6 is_stmt 1 view .LVU995
 2543              	.LBB392:
 100:./src/main.c  **** 	{
 2544              		.loc 1 100 2 view .LVU996
 104:./src/main.c  **** }
 2545              		.loc 1 104 2 view .LVU997
 104:./src/main.c  **** }
 2546              		.loc 1 104 13 is_stmt 0 view .LVU998
 2547 0b34 0F1002E2 		and	r1, r2, #15
 2548              	.LVL235:
 2549              	.L186:
 104:./src/main.c  **** }
 2550              		.loc 1 104 13 view .LVU999
 2551              	.LBE392:
 2552              	.LBE391:
 2553              	.LBE390:
 2554              	.LBE389:
 835:./src/main.c  **** 		
 2555              		.loc 1 835 34 view .LVU1000
 2556 0b38 0C20D5E5 		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 834:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[8])     )& 0x0000000F));
 2557              		.loc 1 834 30 view .LVU1001
 2558 0b3c 013283E1 		orr	r3, r3, r1, lsl #4
 835:./src/main.c  **** 		
 2559              		.loc 1 835 3 is_stmt 1 view .LVU1002
 2560              	.LVL236:
 2561              	.LBB393:
 2562              	.LBI393:
  87:./src/main.c  **** {
 2563              		.loc 1 87 6 view .LVU1003
 2564              	.LBB394:
  89:./src/main.c  **** 	{
 2565              		.loc 1 89 2 view .LVU1004
  89:./src/main.c  **** 	{
 2566              		.loc 1 89 4 is_stmt 0 view .LVU1005
 2567 0b40 411042E2 		sub	r1, r2, #65
 2568 0b44 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2569              		.loc 1 91 7 view .LVU1006
 2570 0b48 37204292 		subls	r2, r2, #55
 2571              	.LVL237:
  92:./src/main.c  **** 	}
 2572              		.loc 1 92 14 view .LVU1007
 2573 0b4c 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 2574              		.loc 1 89 4 view .LVU1008
 2575 0b50 0400009A 		bls	.L190
  94:./src/main.c  **** 	{
 2576              		.loc 1 94 2 is_stmt 1 view .LVU1009
  94:./src/main.c  **** 	{
 2577              		.loc 1 94 19 is_stmt 0 view .LVU1010
 2578 0b54 611042E2 		sub	r1, r2, #97
 2579              	.LVL238:
  94:./src/main.c  **** 	{
 2580              		.loc 1 94 4 view .LVU1011
 2581 0b58 FF1001E2 		and	r1, r1, #255
 2582 0b5c 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 2583              		.loc 1 96 3 is_stmt 1 view .LVU1012
 2584              	.LVL239:
  97:./src/main.c  **** 	}
 2585              		.loc 1 97 3 view .LVU1013
  96:./src/main.c  **** 		return chr &0xF;
 2586              		.loc 1 96 7 is_stmt 0 view .LVU1014
 2587 0b60 57204292 		subls	r2, r2, #87
 2588              	.LVL240:
 2589              	.LBB395:
 2590              	.LBI395:
  87:./src/main.c  **** {
 2591              		.loc 1 87 6 is_stmt 1 view .LVU1015
 2592              	.LBB396:
 100:./src/main.c  **** 	{
 2593              		.loc 1 100 2 view .LVU1016
 104:./src/main.c  **** }
 2594              		.loc 1 104 2 view .LVU1017
 104:./src/main.c  **** }
 2595              		.loc 1 104 13 is_stmt 0 view .LVU1018
 2596 0b64 0F2002E2 		and	r2, r2, #15
 2597              	.LVL241:
 2598              	.L190:
 104:./src/main.c  **** }
 2599              		.loc 1 104 13 view .LVU1019
 2600              	.LBE396:
 2601              	.LBE395:
 2602              	.LBE394:
 2603              	.LBE393:
 838:./src/main.c  **** 	
 2604              		.loc 1 838 17 view .LVU1020
 2605 0b68 0310A0E3 		mov	r1, #3
 835:./src/main.c  **** 		
 2606              		.loc 1 835 30 view .LVU1021
 2607 0b6c 032082E1 		orr	r2, r2, r3
 841:./src/main.c  **** 				
 2608              		.loc 1 841 19 view .LVU1022
 2609 0b70 0D30D5E5 		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 835:./src/main.c  **** 		
 2610              		.loc 1 835 15 view .LVU1023
 2611 0b74 502085E5 		str	r2, [r5, #80]
 838:./src/main.c  **** 	
 2612              		.loc 1 838 3 is_stmt 1 view .LVU1024
 2613              	.LBB397:
 2614              	.LBB359:
  89:./src/main.c  **** 	{
 2615              		.loc 1 89 4 is_stmt 0 view .LVU1025
 2616 0b78 412043E2 		sub	r2, r3, #65
 2617 0b7c 190052E3 		cmp	r2, #25
 2618              	.LBE359:
 2619              	.LBE397:
 838:./src/main.c  **** 	
 2620              		.loc 1 838 17 view .LVU1026
 2621 0b80 4E10C5E5 		strb	r1, [r5, #78]
 841:./src/main.c  **** 				
 2622              		.loc 1 841 3 is_stmt 1 view .LVU1027
 2623              	.LVL242:
 2624              	.LBB398:
 2625              	.LBI355:
  87:./src/main.c  **** {
 2626              		.loc 1 87 6 view .LVU1028
 2627              	.LBB360:
  89:./src/main.c  **** 	{
 2628              		.loc 1 89 2 view .LVU1029
  89:./src/main.c  **** 	{
 2629              		.loc 1 89 4 is_stmt 0 view .LVU1030
 2630 0b84 13FEFF8A 		bhi	.L193
 2631              	.LVL243:
 2632              	.L243:
  91:./src/main.c  **** 		return chr &0xF;
 2633              		.loc 1 91 3 is_stmt 1 view .LVU1031
  92:./src/main.c  **** 	}
 2634              		.loc 1 92 3 view .LVU1032
  91:./src/main.c  **** 		return chr &0xF;
 2635              		.loc 1 91 7 is_stmt 0 view .LVU1033
 2636 0b88 373043E2 		sub	r3, r3, #55
 2637              	.LVL244:
  92:./src/main.c  **** 	}
 2638              		.loc 1 92 14 view .LVU1034
 2639 0b8c 0F3003E2 		and	r3, r3, #15
 2640 0b90 15FEFFEA 		b	.L194
 2641              	.LVL245:
 2642              	.L34:
  92:./src/main.c  **** 	}
 2643              		.loc 1 92 14 view .LVU1035
 2644              	.LBE360:
 2645              	.LBE398:
 2646              	.LBE399:
 2647              	.LBE504:
 266:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2648              		.loc 1 266 3 is_stmt 1 view .LVU1036
 266:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2649              		.loc 1 266 6 is_stmt 0 view .LVU1037
 2650 0b94 010056E3 		cmp	r6, #1
 2651 0b98 83FDFF1A 		bne	.L18
 266:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2652              		.loc 1 266 23 discriminator 1 view .LVU1038
 2653 0b9c 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 2654 0ba0 000054E3 		cmp	r4, #0
 2655 0ba4 80FDFF1A 		bne	.L18
 266:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2656              		.loc 1 266 44 discriminator 2 view .LVU1039
 2657 0ba8 2730D5E5 		ldrb	r3, [r5, #39]	@ zero_extendqisi2
 2658 0bac 010053E3 		cmp	r3, #1
 2659 0bb0 7DFDFF1A 		bne	.L18
 267:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_LOM);
 2660              		.loc 1 267 4 is_stmt 1 view .LVU1040
 2661 0bb4 0400A0E1 		mov	r0, r4
 2662              	.LVL246:
 267:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_LOM);
 2663              		.loc 1 267 4 is_stmt 0 view .LVU1041
 2664 0bb8 FEFFFFEB 		bl	CAN_ReInitChannel
 2665              	.LVL247:
 268:./src/main.c  **** 			CanChnOpen = 1;
 2666              		.loc 1 268 4 is_stmt 1 view .LVU1042
 2667 0bbc 0210A0E3 		mov	r1, #2
 2668 0bc0 0400A0E1 		mov	r0, r4
 2669 0bc4 FEFFFFEB 		bl	CAN_SetBusMode
 2670              	.LVL248:
 269:./src/main.c  **** 			CanBusMode =BUS_LOM;
 2671              		.loc 1 269 4 view .LVU1043
 270:./src/main.c  **** 						// Send ASCII OK
 2672              		.loc 1 270 15 is_stmt 0 view .LVU1044
 2673 0bc8 02C0A0E3 		mov	ip, #2
 2674 0bcc 10339FE5 		ldr	r3, .L248+16
 272:./src/main.c  **** 		}
 2675              		.loc 1 272 4 view .LVU1045
 2676 0bd0 0400A0E1 		mov	r0, r4
 2677 0bd4 0620A0E1 		mov	r2, r6
 2678 0bd8 07108DE2 		add	r1, sp, #7
 269:./src/main.c  **** 			CanBusMode =BUS_LOM;
 2679              		.loc 1 269 15 view .LVU1046
 2680 0bdc 2660C5E5 		strb	r6, [r5, #38]
 270:./src/main.c  **** 						// Send ASCII OK
 2681              		.loc 1 270 4 is_stmt 1 view .LVU1047
 270:./src/main.c  **** 						// Send ASCII OK
 2682              		.loc 1 270 15 is_stmt 0 view .LVU1048
 2683 0be0 04C0C3E5 		strb	ip, [r3, #4]
 272:./src/main.c  **** 		}
 2684              		.loc 1 272 4 is_stmt 1 view .LVU1049
 2685 0be4 FEFFFFEB 		bl	SER_Write
 2686              	.LVL249:
 2687 0be8 88FDFFEA 		b	.L41
 2688              	.LVL250:
 2689              	.L32:
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2690              		.loc 1 252 3 view .LVU1050
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2691              		.loc 1 252 6 is_stmt 0 view .LVU1051
 2692 0bec 010056E3 		cmp	r6, #1
 2693 0bf0 6DFDFF1A 		bne	.L18
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2694              		.loc 1 252 23 discriminator 1 view .LVU1052
 2695 0bf4 2640D5E5 		ldrb	r4, [r5, #38]	@ zero_extendqisi2
 2696 0bf8 000054E3 		cmp	r4, #0
 2697 0bfc 6AFDFF1A 		bne	.L18
 252:./src/main.c  **** 			CAN_ReInitChannel ( CAN_BUS1);
 2698              		.loc 1 252 44 discriminator 2 view .LVU1053
 2699 0c00 2730D5E5 		ldrb	r3, [r5, #39]	@ zero_extendqisi2
 2700 0c04 010053E3 		cmp	r3, #1
 2701 0c08 67FDFF1A 		bne	.L18
 253:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 2702              		.loc 1 253 4 is_stmt 1 view .LVU1054
 2703 0c0c 0400A0E1 		mov	r0, r4
 2704              	.LVL251:
 253:./src/main.c  **** 			CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 2705              		.loc 1 253 4 is_stmt 0 view .LVU1055
 2706 0c10 FEFFFFEB 		bl	CAN_ReInitChannel
 2707              	.LVL252:
 254:./src/main.c  **** 			CanChnOpen = 1;
 2708              		.loc 1 254 4 is_stmt 1 view .LVU1056
 2709 0c14 0410A0E1 		mov	r1, r4
 2710 0c18 0400A0E1 		mov	r0, r4
 2711 0c1c FEFFFFEB 		bl	CAN_SetBusMode
 2712              	.LVL253:
 255:./src/main.c  **** 			CanBusMode = BUS_ON;
 2713              		.loc 1 255 4 view .LVU1057
 256:./src/main.c  **** 			// Send ASCII OK
 2714              		.loc 1 256 15 is_stmt 0 view .LVU1058
 2715 0c20 BC329FE5 		ldr	r3, .L248+16
 258:./src/main.c  **** 		}
 2716              		.loc 1 258 4 view .LVU1059
 2717 0c24 0620A0E1 		mov	r2, r6
 2718 0c28 0400A0E1 		mov	r0, r4
 2719 0c2c 07108DE2 		add	r1, sp, #7
 255:./src/main.c  **** 			CanBusMode = BUS_ON;
 2720              		.loc 1 255 15 view .LVU1060
 2721 0c30 2660C5E5 		strb	r6, [r5, #38]
 256:./src/main.c  **** 			// Send ASCII OK
 2722              		.loc 1 256 4 is_stmt 1 view .LVU1061
 256:./src/main.c  **** 			// Send ASCII OK
 2723              		.loc 1 256 15 is_stmt 0 view .LVU1062
 2724 0c34 0440C3E5 		strb	r4, [r3, #4]
 258:./src/main.c  **** 		}
 2725              		.loc 1 258 4 is_stmt 1 view .LVU1063
 2726 0c38 FEFFFFEB 		bl	SER_Write
 2727              	.LVL254:
 2728 0c3c 73FDFFEA 		b	.L41
 2729              	.LVL255:
 2730              	.L21:
 293:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 2731              		.loc 1 293 3 view .LVU1064
 293:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 2732              		.loc 1 293 26 is_stmt 0 view .LVU1065
 2733 0c40 0830D5E5 		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 2734              	.LVL256:
 2735              	.LBB505:
 2736              	.LBI505:
  87:./src/main.c  **** {
 2737              		.loc 1 87 6 is_stmt 1 view .LVU1066
 2738              	.LBB506:
  89:./src/main.c  **** 	{
 2739              		.loc 1 89 2 view .LVU1067
  89:./src/main.c  **** 	{
 2740              		.loc 1 89 19 is_stmt 0 view .LVU1068
 2741 0c44 411043E2 		sub	r1, r3, #65
 2742 0c48 FF1001E2 		and	r1, r1, #255
  89:./src/main.c  **** 	{
 2743              		.loc 1 89 4 view .LVU1069
 2744 0c4c 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2745              		.loc 1 91 7 view .LVU1070
 2746 0c50 37204392 		subls	r2, r3, #55
  92:./src/main.c  **** 	}
 2747              		.loc 1 92 14 view .LVU1071
 2748 0c54 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 2749              		.loc 1 89 4 view .LVU1072
 2750 0c58 0500009A 		bls	.L61
  94:./src/main.c  **** 	{
 2751              		.loc 1 94 2 is_stmt 1 view .LVU1073
  94:./src/main.c  **** 	{
 2752              		.loc 1 94 19 is_stmt 0 view .LVU1074
 2753 0c5c 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 2754              		.loc 1 94 4 view .LVU1075
 2755 0c60 FF2002E2 		and	r2, r2, #255
 2756 0c64 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 2757              		.loc 1 96 3 is_stmt 1 view .LVU1076
 2758              	.LVL257:
  97:./src/main.c  **** 	}
 2759              		.loc 1 97 3 view .LVU1077
 2760              	.LBB507:
 2761              	.LBI507:
  87:./src/main.c  **** {
 2762              		.loc 1 87 6 view .LVU1078
 2763              	.LBB508:
 100:./src/main.c  **** 	{
 2764              		.loc 1 100 2 view .LVU1079
 104:./src/main.c  **** }
 2765              		.loc 1 104 2 view .LVU1080
 2766              	.LBE508:
 2767              	.LBE507:
  96:./src/main.c  **** 		return chr &0xF;
 2768              		.loc 1 96 7 is_stmt 0 view .LVU1081
 2769 0c68 57204392 		subls	r2, r3, #87
  97:./src/main.c  **** 	}
 2770              		.loc 1 97 14 view .LVU1082
 2771 0c6c 0F200292 		andls	r2, r2, #15
 2772              	.LBB510:
 2773              	.LBB509:
 104:./src/main.c  **** }
 2774              		.loc 1 104 13 view .LVU1083
 2775 0c70 0F200382 		andhi	r2, r3, #15
 2776              	.LVL258:
 2777              	.L61:
 104:./src/main.c  **** }
 2778              		.loc 1 104 13 view .LVU1084
 2779              	.LBE509:
 2780              	.LBE510:
 2781              	.LBE506:
 2782              	.LBE505:
 293:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 2783              		.loc 1 293 49 view .LVU1085
 2784 0c74 8220A0E1 		lsl	r2, r2, #1
 293:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 2785              		.loc 1 293 23 view .LVU1086
 2786 0c78 052082E2 		add	r2, r2, #5
 293:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 2787              		.loc 1 293 6 view .LVU1087
 2788 0c7c 020056E1 		cmp	r6, r2
 2789 0c80 49FDFF1A 		bne	.L18
 293:./src/main.c  **** 		&&  (CanBusMode == BUS_ON))  ) {
 2790              		.loc 1 293 53 discriminator 1 view .LVU1088
 2791 0c84 2620D5E5 		ldrb	r2, [r5, #38]	@ zero_extendqisi2
 2792 0c88 010052E3 		cmp	r2, #1
 2793 0c8c 46FDFF1A 		bne	.L18
 294:./src/main.c  **** 			TransmitStandardFrame();
 2794              		.loc 1 294 19 view .LVU1089
 2795 0c90 4C629FE5 		ldr	r6, .L248+16
 2796              	.LVL259:
 294:./src/main.c  **** 			TransmitStandardFrame();
 2797              		.loc 1 294 3 view .LVU1090
 2798 0c94 0400D6E5 		ldrb	r0, [r6, #4]	@ zero_extendqisi2
 2799              	.LVL260:
 294:./src/main.c  **** 			TransmitStandardFrame();
 2800              		.loc 1 294 3 view .LVU1091
 2801 0c98 000050E3 		cmp	r0, #0
 2802 0c9c 42FDFF1A 		bne	.L18
 295:./src/main.c  **** 		}
 2803              		.loc 1 295 4 is_stmt 1 view .LVU1092
 2804              	.LBB511:
 2805              	.LBI511:
 499:./src/main.c  **** //-------------------------------------------------
 2806              		.loc 1 499 13 view .LVU1093
 2807              	.LBB512:
 502:./src/main.c  **** 	u8_t i;			// all purpose loop counter
 2808              		.loc 1 502 2 view .LVU1094
 503:./src/main.c  **** 
 2809              		.loc 1 503 2 view .LVU1095
 505:./src/main.c  **** 
 2810              		.loc 1 505 2 view .LVU1096
 2811              	.LVL261:
 508:./src/main.c  **** 	&&  (CanBusMode == BUS_ON)
 2812              		.loc 1 508 3 view .LVU1097
 510:./src/main.c  **** 
 2813              		.loc 1 510 2 is_stmt 0 view .LVU1098
 2814 0ca0 4A20D5E5 		ldrb	r2, [r5, #74]	@ zero_extendqisi2
 2815 0ca4 000052E3 		cmp	r2, #0
 2816 0ca8 8600001A 		bne	.L64
 513:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 2817              		.loc 1 513 3 is_stmt 1 view .LVU1099
 513:./src/main.c  **** 		CanTxMsg.Data32[1] = 0;
 2818              		.loc 1 513 22 is_stmt 0 view .LVU1100
 2819 0cac 542085E5 		str	r2, [r5, #84]
 514:./src/main.c  **** 	
 2820              		.loc 1 514 3 is_stmt 1 view .LVU1101
 514:./src/main.c  **** 	
 2821              		.loc 1 514 22 is_stmt 0 view .LVU1102
 2822 0cb0 582085E5 		str	r2, [r5, #88]
 517:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 2823              		.loc 1 517 3 is_stmt 1 view .LVU1103
 517:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 2824              		.loc 1 517 34 is_stmt 0 view .LVU1104
 2825 0cb4 0520D5E5 		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 2826              	.LVL262:
 2827              	.LBB513:
 2828              	.LBI513:
  87:./src/main.c  **** {
 2829              		.loc 1 87 6 is_stmt 1 view .LVU1105
 2830              	.LBB514:
  89:./src/main.c  **** 	{
 2831              		.loc 1 89 2 view .LVU1106
  89:./src/main.c  **** 	{
 2832              		.loc 1 89 4 is_stmt 0 view .LVU1107
 2833 0cb8 410042E2 		sub	r0, r2, #65
 2834 0cbc 190050E3 		cmp	r0, #25
  91:./src/main.c  **** 		return chr &0xF;
 2835              		.loc 1 91 7 view .LVU1108
 2836 0cc0 37204292 		subls	r2, r2, #55
 2837              	.LVL263:
  92:./src/main.c  **** 	}
 2838              		.loc 1 92 14 view .LVU1109
 2839 0cc4 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 2840              		.loc 1 89 4 view .LVU1110
 2841 0cc8 0400009A 		bls	.L66
  94:./src/main.c  **** 	{
 2842              		.loc 1 94 2 is_stmt 1 view .LVU1111
  94:./src/main.c  **** 	{
 2843              		.loc 1 94 19 is_stmt 0 view .LVU1112
 2844 0ccc 610042E2 		sub	r0, r2, #97
 2845              	.LVL264:
  94:./src/main.c  **** 	{
 2846              		.loc 1 94 4 view .LVU1113
 2847 0cd0 FF0000E2 		and	r0, r0, #255
 2848 0cd4 190050E3 		cmp	r0, #25
  96:./src/main.c  **** 		return chr &0xF;
 2849              		.loc 1 96 3 is_stmt 1 view .LVU1114
 2850              	.LVL265:
  97:./src/main.c  **** 	}
 2851              		.loc 1 97 3 view .LVU1115
  96:./src/main.c  **** 		return chr &0xF;
 2852              		.loc 1 96 7 is_stmt 0 view .LVU1116
 2853 0cd8 57204292 		subls	r2, r2, #87
 2854              	.LVL266:
 2855              	.LBB515:
 2856              	.LBI515:
  87:./src/main.c  **** {
 2857              		.loc 1 87 6 is_stmt 1 view .LVU1117
 2858              	.LBB516:
 100:./src/main.c  **** 	{
 2859              		.loc 1 100 2 view .LVU1118
 104:./src/main.c  **** }
 2860              		.loc 1 104 2 view .LVU1119
 104:./src/main.c  **** }
 2861              		.loc 1 104 13 is_stmt 0 view .LVU1120
 2862 0cdc 0F2002E2 		and	r2, r2, #15
 2863              	.LVL267:
 2864              	.L66:
 104:./src/main.c  **** }
 2865              		.loc 1 104 13 view .LVU1121
 2866              	.LBE516:
 2867              	.LBE515:
 2868              	.LBE514:
 2869              	.LBE513:
 518:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 2870              		.loc 1 518 34 view .LVU1122
 2871 0ce0 0600D5E5 		ldrb	r0, [r5, #6]	@ zero_extendqisi2
 2872              	.LBB517:
 2873              	.LBB518:
  89:./src/main.c  **** 	{
 2874              		.loc 1 89 4 view .LVU1123
 2875 0ce4 41C040E2 		sub	ip, r0, #65
 2876 0ce8 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 2877              		.loc 1 91 7 view .LVU1124
 2878 0cec 37004092 		subls	r0, r0, #55
 2879              	.LBE518:
 2880              	.LBE517:
 517:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[2])<<4 )& 0x0F0));
 2881              		.loc 1 517 57 view .LVU1125
 2882 0cf0 0224A0E1 		lsl	r2, r2, #8
 518:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 2883              		.loc 1 518 3 is_stmt 1 view .LVU1126
 2884              	.LBB522:
 2885              	.LBI517:
  87:./src/main.c  **** {
 2886              		.loc 1 87 6 view .LVU1127
 2887              	.LBB521:
  89:./src/main.c  **** 	{
 2888              		.loc 1 89 2 view .LVU1128
  92:./src/main.c  **** 	}
 2889              		.loc 1 92 14 is_stmt 0 view .LVU1129
 2890 0cf4 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 2891              		.loc 1 89 4 view .LVU1130
 2892 0cf8 0400009A 		bls	.L70
  94:./src/main.c  **** 	{
 2893              		.loc 1 94 2 is_stmt 1 view .LVU1131
  94:./src/main.c  **** 	{
 2894              		.loc 1 94 19 is_stmt 0 view .LVU1132
 2895 0cfc 61C040E2 		sub	ip, r0, #97
  94:./src/main.c  **** 	{
 2896              		.loc 1 94 4 view .LVU1133
 2897 0d00 FFC00CE2 		and	ip, ip, #255
 2898 0d04 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 2899              		.loc 1 96 3 is_stmt 1 view .LVU1134
 2900              	.LVL268:
  97:./src/main.c  **** 	}
 2901              		.loc 1 97 3 view .LVU1135
  96:./src/main.c  **** 		return chr &0xF;
 2902              		.loc 1 96 7 is_stmt 0 view .LVU1136
 2903 0d08 57004092 		subls	r0, r0, #87
 2904              	.LVL269:
 2905              	.LBB519:
 2906              	.LBI519:
  87:./src/main.c  **** {
 2907              		.loc 1 87 6 is_stmt 1 view .LVU1137
 2908              	.LBB520:
 100:./src/main.c  **** 	{
 2909              		.loc 1 100 2 view .LVU1138
 104:./src/main.c  **** }
 2910              		.loc 1 104 2 view .LVU1139
 104:./src/main.c  **** }
 2911              		.loc 1 104 13 is_stmt 0 view .LVU1140
 2912 0d0c 0F0000E2 		and	r0, r0, #15
 2913              	.LVL270:
 2914              	.L70:
 104:./src/main.c  **** }
 2915              		.loc 1 104 13 view .LVU1141
 2916              	.LBE520:
 2917              	.LBE519:
 2918              	.LBE521:
 2919              	.LBE522:
 518:./src/main.c  **** 		CanTxMsg.Id = (CanTxMsg.Id | ((ascii2hex(SerRcvBuf[3])    )& 0x00F));
 2920              		.loc 1 518 30 view .LVU1142
 2921 0d10 002282E1 		orr	r2, r2, r0, lsl #4
 519:./src/main.c  **** 		
 2922              		.loc 1 519 3 is_stmt 1 view .LVU1143
 519:./src/main.c  **** 		
 2923              		.loc 1 519 34 is_stmt 0 view .LVU1144
 2924 0d14 0700D5E5 		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 2925              	.LVL271:
 2926              	.LBB523:
 2927              	.LBI523:
  87:./src/main.c  **** {
 2928              		.loc 1 87 6 is_stmt 1 view .LVU1145
 2929              	.LBB524:
  89:./src/main.c  **** 	{
 2930              		.loc 1 89 2 view .LVU1146
  89:./src/main.c  **** 	{
 2931              		.loc 1 89 4 is_stmt 0 view .LVU1147
 2932 0d18 41C040E2 		sub	ip, r0, #65
 2933 0d1c 19005CE3 		cmp	ip, #25
  91:./src/main.c  **** 		return chr &0xF;
 2934              		.loc 1 91 7 view .LVU1148
 2935 0d20 37004092 		subls	r0, r0, #55
 2936              	.LVL272:
  92:./src/main.c  **** 	}
 2937              		.loc 1 92 14 view .LVU1149
 2938 0d24 0F000092 		andls	r0, r0, #15
  89:./src/main.c  **** 	{
 2939              		.loc 1 89 4 view .LVU1150
 2940 0d28 0400009A 		bls	.L74
  94:./src/main.c  **** 	{
 2941              		.loc 1 94 2 is_stmt 1 view .LVU1151
  94:./src/main.c  **** 	{
 2942              		.loc 1 94 19 is_stmt 0 view .LVU1152
 2943 0d2c 61C040E2 		sub	ip, r0, #97
 2944              	.LVL273:
  94:./src/main.c  **** 	{
 2945              		.loc 1 94 4 view .LVU1153
 2946 0d30 FFC00CE2 		and	ip, ip, #255
 2947 0d34 19005CE3 		cmp	ip, #25
  96:./src/main.c  **** 		return chr &0xF;
 2948              		.loc 1 96 3 is_stmt 1 view .LVU1154
 2949              	.LVL274:
  97:./src/main.c  **** 	}
 2950              		.loc 1 97 3 view .LVU1155
  96:./src/main.c  **** 		return chr &0xF;
 2951              		.loc 1 96 7 is_stmt 0 view .LVU1156
 2952 0d38 57004092 		subls	r0, r0, #87
 2953              	.LVL275:
 2954              	.LBB525:
 2955              	.LBI525:
  87:./src/main.c  **** {
 2956              		.loc 1 87 6 is_stmt 1 view .LVU1157
 2957              	.LBB526:
 100:./src/main.c  **** 	{
 2958              		.loc 1 100 2 view .LVU1158
 104:./src/main.c  **** }
 2959              		.loc 1 104 2 view .LVU1159
 104:./src/main.c  **** }
 2960              		.loc 1 104 13 is_stmt 0 view .LVU1160
 2961 0d3c 0F0000E2 		and	r0, r0, #15
 2962              	.LVL276:
 2963              	.L74:
 104:./src/main.c  **** }
 2964              		.loc 1 104 13 view .LVU1161
 2965              	.LBE526:
 2966              	.LBE525:
 2967              	.LBE524:
 2968              	.LBE523:
 519:./src/main.c  **** 		
 2969              		.loc 1 519 30 view .LVU1162
 2970 0d40 020080E1 		orr	r0, r0, r2
 522:./src/main.c  **** 	
 2971              		.loc 1 522 17 view .LVU1163
 2972 0d44 0020A0E3 		mov	r2, #0
 2973              	.LBB527:
 2974              	.LBB528:
  89:./src/main.c  **** 	{
 2975              		.loc 1 89 4 view .LVU1164
 2976 0d48 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 2977              		.loc 1 91 7 view .LVU1165
 2978 0d4c 37304392 		subls	r3, r3, #55
 2979              	.LBE528:
 2980              	.LBE527:
 519:./src/main.c  **** 		
 2981              		.loc 1 519 15 view .LVU1166
 2982 0d50 500085E5 		str	r0, [r5, #80]
 522:./src/main.c  **** 	
 2983              		.loc 1 522 3 is_stmt 1 view .LVU1167
 522:./src/main.c  **** 	
 2984              		.loc 1 522 17 is_stmt 0 view .LVU1168
 2985 0d54 4E20C5E5 		strb	r2, [r5, #78]
 525:./src/main.c  **** 		
 2986              		.loc 1 525 3 is_stmt 1 view .LVU1169
 2987              	.LBB532:
 2988              	.LBI527:
  87:./src/main.c  **** {
 2989              		.loc 1 87 6 view .LVU1170
 2990              	.LBB531:
  89:./src/main.c  **** 	{
 2991              		.loc 1 89 2 view .LVU1171
  92:./src/main.c  **** 	}
 2992              		.loc 1 92 14 is_stmt 0 view .LVU1172
 2993 0d58 0F300392 		andls	r3, r3, #15
  89:./src/main.c  **** 	{
 2994              		.loc 1 89 4 view .LVU1173
 2995 0d5c 0400009A 		bls	.L78
  94:./src/main.c  **** 	{
 2996              		.loc 1 94 2 is_stmt 1 view .LVU1174
  94:./src/main.c  **** 	{
 2997              		.loc 1 94 19 is_stmt 0 view .LVU1175
 2998 0d60 612043E2 		sub	r2, r3, #97
  94:./src/main.c  **** 	{
 2999              		.loc 1 94 4 view .LVU1176
 3000 0d64 FF2002E2 		and	r2, r2, #255
 3001 0d68 190052E3 		cmp	r2, #25
  96:./src/main.c  **** 		return chr &0xF;
 3002              		.loc 1 96 3 is_stmt 1 view .LVU1177
 3003              	.LVL277:
  97:./src/main.c  **** 	}
 3004              		.loc 1 97 3 view .LVU1178
  96:./src/main.c  **** 		return chr &0xF;
 3005              		.loc 1 96 7 is_stmt 0 view .LVU1179
 3006 0d6c 57304392 		subls	r3, r3, #87
 3007              	.LVL278:
 3008              	.LBB529:
 3009              	.LBI529:
  87:./src/main.c  **** {
 3010              		.loc 1 87 6 is_stmt 1 view .LVU1180
 3011              	.LBB530:
 100:./src/main.c  **** 	{
 3012              		.loc 1 100 2 view .LVU1181
 104:./src/main.c  **** }
 3013              		.loc 1 104 2 view .LVU1182
 104:./src/main.c  **** }
 3014              		.loc 1 104 13 is_stmt 0 view .LVU1183
 3015 0d70 0F3003E2 		and	r3, r3, #15
 3016              	.LVL279:
 3017              	.L78:
 104:./src/main.c  **** }
 3018              		.loc 1 104 13 view .LVU1184
 3019 0d74 74C19FE5 		ldr	ip, .L248+28
 3020              	.LBE530:
 3021              	.LBE529:
 3022              	.LBE531:
 3023              	.LBE532:
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3024              		.loc 1 528 3 view .LVU1185
 3025 0d78 00E0A0E3 		mov	lr, #0
 525:./src/main.c  **** 		
 3026              		.loc 1 525 16 view .LVU1186
 3027 0d7c 4F30C5E5 		strb	r3, [r5, #79]
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3028              		.loc 1 528 3 is_stmt 1 view .LVU1187
 3029              	.LVL280:
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3030              		.loc 1 528 3 is_stmt 0 view .LVU1188
 3031 0d80 50004CE2 		sub	r0, ip, #80
 3032 0d84 1B0000EA 		b	.L81
 3033              	.LVL281:
 3034              	.L90:
 529:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[i*2+6]))& 0x00F));
 3035              		.loc 1 529 4 is_stmt 1 view .LVU1189
 529:./src/main.c  **** 			CanTxMsg.Data8[i] = (CanTxMsg.Data8[i] | ((ascii2hex(SerRcvBuf[i*2+6]))& 0x00F));
 3036              		.loc 1 529 25 is_stmt 0 view .LVU1190
 3037 0d88 0520D0E5 		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 3038              	.LVL282:
 3039              	.LBB533:
 3040              	.LBI533:
  87:./src/main.c  **** {
 3041              		.loc 1 87 6 is_stmt 1 view .LVU1191
 3042              	.LBB534:
  89:./src/main.c  **** 	{
 3043              		.loc 1 89 2 view .LVU1192
  89:./src/main.c  **** 	{
 3044              		.loc 1 89 4 is_stmt 0 view .LVU1193
 3045 0d8c 411042E2 		sub	r1, r2, #65
 3046 0d90 190051E3 		cmp	r1, #25
  91:./src/main.c  **** 		return chr &0xF;
 3047              		.loc 1 91 7 view .LVU1194
 3048 0d94 37204292 		subls	r2, r2, #55
 3049              	.LVL283:
  92:./src/main.c  **** 	}
 3050              		.loc 1 92 14 view .LVU1195
 3051 0d98 0F200292 		andls	r2, r2, #15
  89:./src/main.c  **** 	{
 3052              		.loc 1 89 4 view .LVU1196
 3053 0d9c 0400009A 		bls	.L83
  94:./src/main.c  **** 	{
 3054              		.loc 1 94 2 is_stmt 1 view .LVU1197
  94:./src/main.c  **** 	{
 3055              		.loc 1 94 19 is_stmt 0 view .LVU1198
 3056 0da0 611042E2 		sub	r1, r2, #97
 3057              	.LVL284:
  94:./src/main.c  **** 	{
 3058              		.loc 1 94 4 view .LVU1199
 3059 0da4 FF1001E2 		and	r1, r1, #255
 3060 0da8 190051E3 		cmp	r1, #25
  96:./src/main.c  **** 		return chr &0xF;
 3061              		.loc 1 96 3 is_stmt 1 view .LVU1200
 3062              	.LVL285:
  97:./src/main.c  **** 	}
 3063              		.loc 1 97 3 view .LVU1201
  96:./src/main.c  **** 		return chr &0xF;
 3064              		.loc 1 96 7 is_stmt 0 view .LVU1202
 3065 0dac 57204292 		subls	r2, r2, #87
 3066              	.LVL286:
 3067              	.LBB535:
 3068              	.LBI535:
  87:./src/main.c  **** {
 3069              		.loc 1 87 6 is_stmt 1 view .LVU1203
 3070              	.LBB536:
 100:./src/main.c  **** 	{
 3071              		.loc 1 100 2 view .LVU1204
 104:./src/main.c  **** }
 3072              		.loc 1 104 2 view .LVU1205
 104:./src/main.c  **** }
 3073              		.loc 1 104 13 is_stmt 0 view .LVU1206
 3074 0db0 0F2002E2 		and	r2, r2, #15
 3075              	.LVL287:
 3076              	.L83:
 104:./src/main.c  **** }
 3077              		.loc 1 104 13 view .LVU1207
 3078              	.LBE536:
 3079              	.LBE535:
 3080              	.LBE534:
 3081              	.LBE533:
 530:./src/main.c  **** 		}
 3082              		.loc 1 530 4 is_stmt 1 view .LVU1208
 530:./src/main.c  **** 		}
 3083              		.loc 1 530 47 is_stmt 0 view .LVU1209
 3084 0db4 0610D0E5 		ldrb	r1, [r0, #6]	@ zero_extendqisi2
 3085              	.LVL288:
 3086              	.LBB537:
 3087              	.LBI537:
  87:./src/main.c  **** {
 3088              		.loc 1 87 6 is_stmt 1 view .LVU1210
 3089              	.LBB538:
  89:./src/main.c  **** 	{
 3090              		.loc 1 89 2 view .LVU1211
  89:./src/main.c  **** 	{
 3091              		.loc 1 89 4 is_stmt 0 view .LVU1212
 3092 0db8 417041E2 		sub	r7, r1, #65
 3093 0dbc 190057E3 		cmp	r7, #25
 3094              	.LBE538:
 3095              	.LBE537:
 530:./src/main.c  **** 		}
 3096              		.loc 1 530 39 view .LVU1213
 3097 0dc0 022EA0E1 		lsl	r2, r2, #28
 3098              	.LBB543:
 3099              	.LBB541:
  91:./src/main.c  **** 		return chr &0xF;
 3100              		.loc 1 91 7 view .LVU1214
 3101 0dc4 37104192 		subls	r1, r1, #55
 3102              	.LVL289:
  91:./src/main.c  **** 		return chr &0xF;
 3103              		.loc 1 91 7 view .LVU1215
 3104              	.LBE541:
 3105              	.LBE543:
 530:./src/main.c  **** 		}
 3106              		.loc 1 530 39 view .LVU1216
 3107 0dc8 422CA0E1 		asr	r2, r2, #24
 3108              	.LBB544:
 3109              	.LBB542:
  92:./src/main.c  **** 	}
 3110              		.loc 1 92 14 view .LVU1217
 3111 0dcc 0F100192 		andls	r1, r1, #15
  89:./src/main.c  **** 	{
 3112              		.loc 1 89 4 view .LVU1218
 3113 0dd0 0400009A 		bls	.L87
  94:./src/main.c  **** 	{
 3114              		.loc 1 94 2 is_stmt 1 view .LVU1219
  94:./src/main.c  **** 	{
 3115              		.loc 1 94 19 is_stmt 0 view .LVU1220
 3116 0dd4 617041E2 		sub	r7, r1, #97
 3117              	.LVL290:
  94:./src/main.c  **** 	{
 3118              		.loc 1 94 4 view .LVU1221
 3119 0dd8 FF7007E2 		and	r7, r7, #255
 3120 0ddc 190057E3 		cmp	r7, #25
  96:./src/main.c  **** 		return chr &0xF;
 3121              		.loc 1 96 3 is_stmt 1 view .LVU1222
 3122              	.LVL291:
  97:./src/main.c  **** 	}
 3123              		.loc 1 97 3 view .LVU1223
  96:./src/main.c  **** 		return chr &0xF;
 3124              		.loc 1 96 7 is_stmt 0 view .LVU1224
 3125 0de0 57104192 		subls	r1, r1, #87
 3126              	.LVL292:
 3127              	.LBB539:
 3128              	.LBI539:
  87:./src/main.c  **** {
 3129              		.loc 1 87 6 is_stmt 1 view .LVU1225
 3130              	.LBB540:
 100:./src/main.c  **** 	{
 3131              		.loc 1 100 2 view .LVU1226
 104:./src/main.c  **** }
 3132              		.loc 1 104 2 view .LVU1227
 104:./src/main.c  **** }
 3133              		.loc 1 104 13 is_stmt 0 view .LVU1228
 3134 0de4 0F1001E2 		and	r1, r1, #15
 3135              	.LVL293:
 3136              	.L87:
 104:./src/main.c  **** }
 3137              		.loc 1 104 13 view .LVU1229
 3138              	.LBE540:
 3139              	.LBE539:
 3140              	.LBE542:
 3141              	.LBE544:
 530:./src/main.c  **** 		}
 3142              		.loc 1 530 43 view .LVU1230
 3143 0de8 011082E1 		orr	r1, r2, r1
 530:./src/main.c  **** 		}
 3144              		.loc 1 530 22 view .LVU1231
 3145 0dec 0110CCE4 		strb	r1, [ip], #1
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3146              		.loc 1 528 29 is_stmt 1 view .LVU1232
 3147              	.LVL294:
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3148              		.loc 1 528 29 is_stmt 0 view .LVU1233
 3149 0df0 01E08EE2 		add	lr, lr, #1
 3150              	.LVL295:
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3151              		.loc 1 528 29 view .LVU1234
 3152 0df4 020080E2 		add	r0, r0, #2
 3153              	.L81:
 3154              	.LVL296:
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3155              		.loc 1 528 12 is_stmt 1 view .LVU1235
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3156              		.loc 1 528 3 is_stmt 0 view .LVU1236
 3157 0df8 FF200EE2 		and	r2, lr, #255
 3158 0dfc 020053E1 		cmp	r3, r2
 3159 0e00 E0FFFF8A 		bhi	.L90
 3160 0e04 D9FEFFEA 		b	.L240
 3161              	.LVL297:
 3162              	.L33:
 528:./src/main.c  **** 			CanTxMsg.Data8[i] = (ascii2hex(SerRcvBuf[5+2*i])<<4 )& 0x0F0;
 3163              		.loc 1 528 3 view .LVU1237
 3164              	.LBE512:
 3165              	.LBE511:
 431:./src/main.c  **** 			GetSerialNumber();
 3166              		.loc 1 431 3 is_stmt 1 view .LVU1238
 431:./src/main.c  **** 			GetSerialNumber();
 3167              		.loc 1 431 6 is_stmt 0 view .LVU1239
 3168 0e08 010056E3 		cmp	r6, #1
 3169 0e0c E6FCFF1A 		bne	.L18
 432:./src/main.c  **** 		}
 3170              		.loc 1 432 4 is_stmt 1 view .LVU1240
 3171              	.LBB546:
 3172              	.LBI546:
1087:./src/main.c  **** //-------------------------------------------------
 3173              		.loc 1 1087 13 view .LVU1241
 3174              	.LBB547:
1090:./src/main.c  **** 
 3175              		.loc 1 1090 2 view .LVU1242
1092:./src/main.c  **** 	SerXmtBufPtr++;
 3176              		.loc 1 1092 3 view .LVU1243
1092:./src/main.c  **** 	SerXmtBufPtr++;
 3177              		.loc 1 1092 27 is_stmt 0 view .LVU1244
 3178 0e10 4E30A0E3 		mov	r3, #78
1095:./src/main.c  **** //	memcpy (&SerXmtBuf[SerXmtBufPtr],EepromData.DeviceSN,4);
 3179              		.loc 1 1095 2 view .LVU1245
 3180 0e14 0420A0E3 		mov	r2, #4
 3181 0e18 D4109FE5 		ldr	r1, .L248+32
 3182 0e1c D4009FE5 		ldr	r0, .L248+36
 3183              	.LVL298:
1092:./src/main.c  **** 	SerXmtBufPtr++;
 3184              		.loc 1 1092 27 view .LVU1246
 3185 0e20 2830C5E5 		strb	r3, [r5, #40]
1093:./src/main.c  **** 
 3186              		.loc 1 1093 2 is_stmt 1 view .LVU1247
1095:./src/main.c  **** //	memcpy (&SerXmtBuf[SerXmtBufPtr],EepromData.DeviceSN,4);
 3187              		.loc 1 1095 2 view .LVU1248
 3188 0e24 FEFFFFEB 		bl	memcpy
 3189              	.LVL299:
1097:./src/main.c  **** 
 3190              		.loc 1 1097 2 view .LVU1249
1099:./src/main.c  **** 	SerXmtBufPtr++;
 3191              		.loc 1 1099 2 view .LVU1250
1100:./src/main.c  **** 	
 3192              		.loc 1 1100 14 is_stmt 0 view .LVU1251
 3193 0e28 0620A0E3 		mov	r2, #6
1099:./src/main.c  **** 	SerXmtBufPtr++;
 3194              		.loc 1 1099 26 view .LVU1252
 3195 0e2c 0D30A0E3 		mov	r3, #13
1103:./src/main.c  **** }
 3196              		.loc 1 1103 2 view .LVU1253
 3197 0e30 A0109FE5 		ldr	r1, .L248+4
 3198 0e34 0000A0E3 		mov	r0, #0
1099:./src/main.c  **** 	SerXmtBufPtr++;
 3199              		.loc 1 1099 26 view .LVU1254
 3200 0e38 2D30C5E5 		strb	r3, [r5, #45]
1100:./src/main.c  **** 	
 3201              		.loc 1 1100 2 is_stmt 1 view .LVU1255
1100:./src/main.c  **** 	
 3202              		.loc 1 1100 14 is_stmt 0 view .LVU1256
 3203 0e3c 4920C5E5 		strb	r2, [r5, #73]
1103:./src/main.c  **** }
 3204              		.loc 1 1103 2 is_stmt 1 view .LVU1257
 3205 0e40 FEFFFFEB 		bl	SER_Write
 3206              	.LVL300:
1104:./src/main.c  **** /**************************************************/
 3207              		.loc 1 1104 1 is_stmt 0 view .LVU1258
 3208 0e44 F1FCFFEA 		b	.L41
 3209              	.LVL301:
 3210              	.L247:
1104:./src/main.c  **** /**************************************************/
 3211              		.loc 1 1104 1 view .LVU1259
 3212              	.LBE547:
 3213              	.LBE546:
 3214              	.LBB548:
 3215              	.LBB418:
 692:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3216              		.loc 1 692 8 view .LVU1260
 3217 0e48 0180A0E3 		mov	r8, #1
 689:./src/main.c  **** 		// Write values to CAN controller
 3218              		.loc 1 689 16 view .LVU1261
 3219 0e4c 012282E1 		orr	r2, r2, r1, lsl #4
 3220              	.LVL302:
 679:./src/main.c  **** 	// get BTR1 from the received UART command line
 3221              		.loc 1 679 8 view .LVU1262
 3222 0e50 061283E1 		orr	r1, r3, r6, lsl #4
 687:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3223              		.loc 1 687 3 is_stmt 1 view .LVU1263
 687:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3224              		.loc 1 687 40 is_stmt 0 view .LVU1264
 3225 0e54 3F3001E2 		and	r3, r1, #63
 3226              	.LVL303:
 687:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3227              		.loc 1 687 40 view .LVU1265
 3228 0e58 083083E0 		add	r3, r3, r8
 3229 0e5c 133883E0 		add	r3, r3, r3, lsl r8
 688:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3230              		.loc 1 688 36 view .LVU1266
 3231 0e60 0164A0E1 		lsl	r6, r1, #8
 687:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3232              		.loc 1 687 40 view .LVU1267
 3233 0e64 1338A0E1 		lsl	r3, r3, r8
 687:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE0 &0xC0) << 8;			// SJW, bit 14..15
 3234              		.loc 1 687 11 view .LVU1268
 3235 0e68 013043E2 		sub	r3, r3, #1
 3236              	.LVL304:
 688:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3237              		.loc 1 688 3 is_stmt 1 view .LVU1269
 688:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3238              		.loc 1 688 36 is_stmt 0 view .LVU1270
 3239 0e6c 036906E2 		and	r6, r6, #49152
 688:./src/main.c  **** 		LpcBtr |=   ((u32_t)BYTE1       << 16);			// TSEG1, TSEG2, SAM
 3240              		.loc 1 688 10 view .LVU1271
 3241 0e70 036086E1 		orr	r6, r6, r3
 3242              	.LVL305:
 689:./src/main.c  **** 		// Write values to CAN controller
 3243              		.loc 1 689 3 is_stmt 1 view .LVU1272
 689:./src/main.c  **** 		// Write values to CAN controller
 3244              		.loc 1 689 10 is_stmt 0 view .LVU1273
 3245 0e74 026886E1 		orr	r6, r6, r2, lsl #16
 3246              	.LVL306:
 691:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 3247              		.loc 1 691 3 is_stmt 1 view .LVU1274
 691:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 3248              		.loc 1 691 11 is_stmt 0 view .LVU1275
 3249 0e78 7C209FE5 		ldr	r2, .L248+40
 3250 0e7c 043092E5 		ldr	r3, [r2, #4]
 692:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3251              		.loc 1 692 8 view .LVU1276
 3252 0e80 64909FE5 		ldr	r9, .L248+24
 691:./src/main.c  **** 		C1MOD=1<<0;			//RESET MODE 
 3253              		.loc 1 691 11 view .LVU1277
 3254 0e84 553583E3 		orr	r3, r3, #356515840
 3255 0e88 153983E3 		orr	r3, r3, #344064
 3256 0e8c 043082E5 		str	r3, [r2, #4]
 3257              	.LVL307:
 692:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3258              		.loc 1 692 3 is_stmt 1 view .LVU1278
 693:./src/main.c  **** 		C1IER=0x00; // Disabling all interrupts
 3259              		.loc 1 693 3 is_stmt 0 view .LVU1279
 3260 0e90 0810A0E1 		mov	r1, r8
 3261 0e94 0700A0E1 		mov	r0, r7
 692:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);
 3262              		.loc 1 692 8 view .LVU1280
 3263 0e98 008089E5 		str	r8, [r9]
 693:./src/main.c  **** 		C1IER=0x00; // Disabling all interrupts
 3264              		.loc 1 693 3 is_stmt 1 view .LVU1281
 3265 0e9c FEFFFFEB 		bl	CAN_SetBusMode
 3266              	.LVL308:
 694:./src/main.c  **** 		C1BTR = LpcBtr;
 3267              		.loc 1 694 3 view .LVU1282
 694:./src/main.c  **** 		C1BTR = LpcBtr;
 3268              		.loc 1 694 8 is_stmt 0 view .LVU1283
 3269 0ea0 107089E5 		str	r7, [r9, #16]
 695:./src/main.c  **** 		//CAN_InitChannel (CAN_BUS1, LpcBtr);
 3270              		.loc 1 695 3 is_stmt 1 view .LVU1284
 698:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 3271              		.loc 1 698 3 is_stmt 0 view .LVU1285
 3272 0ea4 0810A0E1 		mov	r1, r8
 695:./src/main.c  **** 		//CAN_InitChannel (CAN_BUS1, LpcBtr);
 3273              		.loc 1 695 9 view .LVU1286
 3274 0ea8 146089E5 		str	r6, [r9, #20]
 697:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);					// CAN Bus On
 3275              		.loc 1 697 3 is_stmt 1 view .LVU1287
 698:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 3276              		.loc 1 698 3 is_stmt 0 view .LVU1288
 3277 0eac 0700A0E1 		mov	r0, r7
 697:./src/main.c  **** 		CAN_SetBusMode ( CAN_BUS1, BUS_OFF);					// CAN Bus On
 3278              		.loc 1 697 8 view .LVU1289
 3279 0eb0 007089E5 		str	r7, [r9]
 698:./src/main.c  **** 		CAN_ReInitChannel ( CAN_BUS1);
 3280              		.loc 1 698 3 is_stmt 1 view .LVU1290
 3281 0eb4 FEFFFFEB 		bl	CAN_SetBusMode
 3282              	.LVL309:
 699:./src/main.c  **** 
 3283              		.loc 1 699 3 view .LVU1291
 3284 0eb8 0700A0E1 		mov	r0, r7
 3285 0ebc FEFFFFEB 		bl	CAN_ReInitChannel
 3286              	.LVL310:
 701:./src/main.c  **** 	}
 3287              		.loc 1 701 3 view .LVU1292
 701:./src/main.c  **** 	}
 3288              		.loc 1 701 18 is_stmt 0 view .LVU1293
 3289 0ec0 2780C5E5 		strb	r8, [r5, #39]
 3290 0ec4 F1FCFFEA 		b	.L220
 3291              	.LVL311:
 3292              	.L64:
 701:./src/main.c  **** 	}
 3293              		.loc 1 701 18 view .LVU1294
 3294              	.LBE418:
 3295              	.LBE548:
 3296              	.LBB549:
 3297              	.LBB545:
 539:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 3298              		.loc 1 539 2 is_stmt 1 view .LVU1295
 537:./src/main.c  **** 	}
 3299              		.loc 1 537 10 is_stmt 0 view .LVU1296
 3300 0ec8 0740A0E3 		mov	r4, #7
 539:./src/main.c  **** 	// return string to RS232 UART (Host-PC)
 3301              		.loc 1 539 15 view .LVU1297
 3302 0ecc 4900C5E5 		strb	r0, [r5, #73]
 541:./src/main.c  **** 		if (Result == ret_OK) {
 3303              		.loc 1 541 2 is_stmt 1 view .LVU1298
 3304 0ed0 B0FEFFEA 		b	.L143
 3305              	.L249:
 3306              		.align	2
 3307              	.L248:
 3308 0ed4 00000000 		.word	.LANCHOR0
 3309 0ed8 28000000 		.word	.LANCHOR0+40
 3310 0edc 56303030 		.word	808464470
 3311 0ee0 310D0000 		.word	3377
 3312 0ee4 00000000 		.word	.LANCHOR1
 3313 0ee8 4C000000 		.word	.LANCHOR0+76
 3314 0eec 004004E0 		.word	-536592384
 3315 0ef0 54000000 		.word	.LANCHOR0+84
 3316 0ef4 00000000 		.word	.LC0
 3317 0ef8 29000000 		.word	.LANCHOR0+41
 3318 0efc 00C002E0 		.word	-536690688
 3319              	.LBE545:
 3320              	.LBE549:
 3321              		.cfi_endproc
 3322              	.LFE6:
 3324              		.align	2
 3325              		.global	ProcessMsgFromCan
 3326              		.syntax unified
 3327              		.arm
 3328              		.fpu softvfp
 3330              	ProcessMsgFromCan:
 3331              	.LFB18:
1162:./src/main.c  **** /**************************************************/
1163:./src/main.c  **** 
1164:./src/main.c  **** 
1165:./src/main.c  **** 
1166:./src/main.c  **** 
1167:./src/main.c  **** 
1168:./src/main.c  **** 
1169:./src/main.c  **** //*************************************************
1170:./src/main.c  **** //! @brief	
1171:./src/main.c  **** //! Reads one MSG or RTR from CAN and passes this to RS232 UART (Host-PC).
1172:./src/main.c  **** //! To be called from MAIN() cyclically, as fast as possible.
1173:./src/main.c  **** //!
1174:./src/main.c  **** //! Reads messages from CAN and forwards them to the host PC (RS232), with or without timestamp.
1175:./src/main.c  **** //!
1176:./src/main.c  **** //! @param	void
1177:./src/main.c  **** //!
1178:./src/main.c  **** //! @return	void
1179:./src/main.c  **** //!
1180:./src/main.c  **** void ProcessMsgFromCan(void) 
1181:./src/main.c  **** //-------------------------------------------------
1182:./src/main.c  **** {
 3332              		.loc 1 1182 1 view -0
 3333              		.cfi_startproc
 3334              		@ Function supports interworking.
 3335              		@ args = 0, pretend = 0, frame = 0
 3336              		@ frame_needed = 0, uses_anonymous_args = 0
1183:./src/main.c  **** 	static u8_t i; //all purpose loop counter
 3337              		.loc 1 1183 2 view .LVU1300
1184:./src/main.c  **** 	static u16_t Timestamp;
 3338              		.loc 1 1184 2 view .LVU1301
1185:./src/main.c  **** 
1186:./src/main.c  **** 	if (AutoPollAutoSend == 1) {
 3339              		.loc 1 1186 2 view .LVU1302
 3340              		.loc 1 1186 23 is_stmt 0 view .LVU1303
 3341 0f00 8C339FE5 		ldr	r3, .L349
 3342              		.loc 1 1186 5 view .LVU1304
 3343 0f04 0530D3E5 		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3344 0f08 010053E3 		cmp	r3, #1
 3345 0f0c 1EFF2F11 		bxne	lr
1187:./src/main.c  **** 
1188:./src/main.c  **** 		// repeat previous message if not successfully sent in last cycle
1189:./src/main.c  **** 		if (UARTWriteResult != SER_ERR_OK) {
 3346              		.loc 1 1189 3 is_stmt 1 view .LVU1305
1182:./src/main.c  **** 	static u8_t i; //all purpose loop counter
 3347              		.loc 1 1182 1 is_stmt 0 view .LVU1306
 3348 0f10 70402DE9 		push	{r4, r5, r6, lr}
 3349              	.LCFI5:
 3350              		.cfi_def_cfa_offset 16
 3351              		.cfi_offset 4, -16
 3352              		.cfi_offset 5, -12
 3353              		.cfi_offset 6, -8
 3354              		.cfi_offset 14, -4
 3355              		.loc 1 1189 23 view .LVU1307
 3356 0f14 7C439FE5 		ldr	r4, .L349+4
 3357              		.loc 1 1189 6 view .LVU1308
 3358 0f18 600094E5 		ldr	r0, [r4, #96]
 3359 0f1c 000050E3 		cmp	r0, #0
 3360 0f20 4000001A 		bne	.L347
1190:./src/main.c  **** 			SerTxCongestionOccurred = 1; // set flag indicationg Tx buffer was full before
1191:./src/main.c  **** 			// Repeat sending last ASCII string to RS232 UART (Host-PC)
1192:./src/main.c  **** 			UARTWriteResult = SER_Write ( SER_PORT1, &SerXmtBuf[0], SerXmtBufPtr);
1193:./src/main.c  **** 			return;
1194:./src/main.c  **** 		}
1195:./src/main.c  **** 		//-------------------------------------------------
1196:./src/main.c  **** 
1197:./src/main.c  **** 		if (CAN_UserRead (CAN_BUS1, &CanRxMsg) != 0) {
 3361              		.loc 1 1197 3 is_stmt 1 view .LVU1309
 3362              		.loc 1 1197 7 is_stmt 0 view .LVU1310
 3363 0f24 641084E2 		add	r1, r4, #100
 3364 0f28 FEFFFFEB 		bl	CAN_UserRead
 3365              	.LVL312:
 3366              		.loc 1 1197 6 view .LVU1311
 3367 0f2c 000050E3 		cmp	r0, #0
 3368 0f30 4200000A 		beq	.L250
 3369              	.LBB602:
 3370              	.LBI602:
1180:./src/main.c  **** //-------------------------------------------------
 3371              		.loc 1 1180 6 is_stmt 1 view .LVU1312
 3372              	.LBB603:
1198:./src/main.c  **** 			
1199:./src/main.c  **** 			Timestamp = Millitimer; // get current timestamp 
 3373              		.loc 1 1199 4 view .LVU1313
1200:./src/main.c  **** 
1201:./src/main.c  **** 			// if 11 bit Id
1202:./src/main.c  **** 			if ((CanRxMsg.Type & CAN_MSG_EXTENDED) == 0) { // is -not- 29 bit
 3374              		.loc 1 1202 17 is_stmt 0 view .LVU1314
 3375 0f34 6630D4E5 		ldrb	r3, [r4, #102]	@ zero_extendqisi2
 3376              		.loc 1 1202 7 view .LVU1315
 3377 0f38 020013E3 		tst	r3, #2
1199:./src/main.c  **** 
 3378              		.loc 1 1199 14 view .LVU1316
 3379 0f3c B407D4E1 		ldrh	r0, [r4, #116]
 3380              		.loc 1 1202 4 is_stmt 1 view .LVU1317
 3381              		.loc 1 1202 7 is_stmt 0 view .LVU1318
 3382 0f40 4000001A 		bne	.L255
1203:./src/main.c  **** 
1204:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
 3383              		.loc 1 1204 5 is_stmt 1 view .LVU1319
1205:./src/main.c  **** 					SerXmtBuf[0] = 't';
 3384              		.loc 1 1205 19 is_stmt 0 view .LVU1320
 3385 0f44 013013E2 		ands	r3, r3, #1
 3386 0f48 72C0A013 		movne	ip, #114
 3387 0f4c 74C0A003 		moveq	ip, #116
1206:./src/main.c  **** 				}
1207:./src/main.c  **** 				else { // is 11 bit RTR	
1208:./src/main.c  **** 					SerXmtBuf[0] = 'r';
1209:./src/main.c  **** 				}
1210:./src/main.c  **** 				// convert 11 bit Id
1211:./src/main.c  **** 				SerXmtBuf[1] = hex2ascii((CanRxMsg.Id & 0x700)>>8);
 3388              		.loc 1 1211 39 view .LVU1321
 3389 0f50 682094E5 		ldr	r2, [r4, #104]
 3390              		.loc 1 1211 51 view .LVU1322
 3391 0f54 2214A0E1 		lsr	r1, r2, #8
 3392              		.loc 1 1211 20 view .LVU1323
 3393 0f58 071001E2 		and	r1, r1, #7
 3394              	.LBB604:
 3395              	.LBB605:
  82:./src/main.c  **** 	}
 3396              		.loc 1 82 7 view .LVU1324
 3397 0f5c 301081E2 		add	r1, r1, #48
 3398              	.LBE605:
 3399              	.LBE604:
 3400              		.loc 1 1211 18 view .LVU1325
 3401 0f60 2910C4E5 		strb	r1, [r4, #41]
1212:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F0)>>4);
 3402              		.loc 1 1212 51 view .LVU1326
 3403 0f64 2212A0E1 		lsr	r1, r2, #4
 3404              		.loc 1 1212 20 view .LVU1327
 3405 0f68 0F1001E2 		and	r1, r1, #15
1213:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii (CanRxMsg.Id & 0x00F);
 3406              		.loc 1 1213 20 view .LVU1328
 3407 0f6c 0F2002E2 		and	r2, r2, #15
 3408              	.LBB607:
 3409              	.LBB608:
  76:./src/main.c  **** 	{
 3410              		.loc 1 76 4 view .LVU1329
 3411 0f70 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3412              		.loc 1 78 7 view .LVU1330
 3413 0f74 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3414              		.loc 1 82 7 view .LVU1331
 3415 0f78 30108192 		addls	r1, r1, #48
 3416              	.LBE608:
 3417              	.LBE607:
1214:./src/main.c  **** 				// convert DLC
1215:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii(CanRxMsg.Len);
 3418              		.loc 1 1215 20 view .LVU1332
 3419 0f7c 67E0D4E5 		ldrb	lr, [r4, #103]	@ zero_extendqisi2
 3420              	.LBB610:
 3421              	.LBB611:
  76:./src/main.c  **** 	{
 3422              		.loc 1 76 4 view .LVU1333
 3423 0f80 090052E3 		cmp	r2, #9
  78:./src/main.c  **** 	}
 3424              		.loc 1 78 7 view .LVU1334
 3425 0f84 37208282 		addhi	r2, r2, #55
  82:./src/main.c  **** 	}
 3426              		.loc 1 82 7 view .LVU1335
 3427 0f88 30208292 		addls	r2, r2, #48
 3428              	.LBE611:
 3429              	.LBE610:
1213:./src/main.c  **** 				// convert DLC
 3430              		.loc 1 1213 18 view .LVU1336
 3431 0f8c 2B20C4E5 		strb	r2, [r4, #43]
 3432              	.LBB613:
 3433              	.LBB614:
  75:./src/main.c  **** 	if(chr > 9)
 3434              		.loc 1 75 6 view .LVU1337
 3435 0f90 0F200EE2 		and	r2, lr, #15
  76:./src/main.c  **** 	{
 3436              		.loc 1 76 4 view .LVU1338
 3437 0f94 090052E3 		cmp	r2, #9
 3438 0f98 28C0C4E5 		strb	ip, [r4, #40]
 3439              	.LBE614:
 3440              	.LBE613:
1211:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F0)>>4);
 3441              		.loc 1 1211 5 is_stmt 1 view .LVU1339
 3442              	.LBB617:
 3443              	.LBI604:
  73:./src/main.c  **** {
 3444              		.loc 1 73 6 view .LVU1340
 3445              	.LBB606:
  75:./src/main.c  **** 	if(chr > 9)
 3446              		.loc 1 75 2 view .LVU1341
  76:./src/main.c  **** 	{
 3447              		.loc 1 76 2 view .LVU1342
  82:./src/main.c  **** 	}
 3448              		.loc 1 82 3 view .LVU1343
  84:./src/main.c  **** }
 3449              		.loc 1 84 2 view .LVU1344
 3450              	.LBE606:
 3451              	.LBE617:
1212:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii (CanRxMsg.Id & 0x00F);
 3452              		.loc 1 1212 5 view .LVU1345
 3453              	.LBB618:
 3454              	.LBI607:
  73:./src/main.c  **** {
 3455              		.loc 1 73 6 view .LVU1346
 3456              	.LBB609:
  75:./src/main.c  **** 	if(chr > 9)
 3457              		.loc 1 75 2 view .LVU1347
  76:./src/main.c  **** 	{
 3458              		.loc 1 76 2 view .LVU1348
  78:./src/main.c  **** 	}
 3459              		.loc 1 78 3 view .LVU1349
  82:./src/main.c  **** 	}
 3460              		.loc 1 82 3 view .LVU1350
 3461              	.LVL313:
  84:./src/main.c  **** }
 3462              		.loc 1 84 2 view .LVU1351
  84:./src/main.c  **** }
 3463              		.loc 1 84 2 is_stmt 0 view .LVU1352
 3464              	.LBE609:
 3465              	.LBE618:
1212:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii (CanRxMsg.Id & 0x00F);
 3466              		.loc 1 1212 18 view .LVU1353
 3467 0f9c 2A10C4E5 		strb	r1, [r4, #42]
1213:./src/main.c  **** 				// convert DLC
 3468              		.loc 1 1213 5 is_stmt 1 view .LVU1354
 3469              	.LBB619:
 3470              	.LBI610:
  73:./src/main.c  **** {
 3471              		.loc 1 73 6 view .LVU1355
 3472              	.LBB612:
  75:./src/main.c  **** 	if(chr > 9)
 3473              		.loc 1 75 2 view .LVU1356
  76:./src/main.c  **** 	{
 3474              		.loc 1 76 2 view .LVU1357
  78:./src/main.c  **** 	}
 3475              		.loc 1 78 3 view .LVU1358
  82:./src/main.c  **** 	}
 3476              		.loc 1 82 3 view .LVU1359
  84:./src/main.c  **** }
 3477              		.loc 1 84 2 view .LVU1360
 3478              	.LBE612:
 3479              	.LBE619:
 3480              		.loc 1 1215 5 view .LVU1361
 3481              	.LVL314:
 3482              	.LBB620:
 3483              	.LBI613:
  73:./src/main.c  **** {
 3484              		.loc 1 73 6 view .LVU1362
 3485              	.LBB615:
  75:./src/main.c  **** 	if(chr > 9)
 3486              		.loc 1 75 2 view .LVU1363
  76:./src/main.c  **** 	{
 3487              		.loc 1 76 2 view .LVU1364
  76:./src/main.c  **** 	{
 3488              		.loc 1 76 4 is_stmt 0 view .LVU1365
 3489 0fa0 B400008A 		bhi	.L348
  82:./src/main.c  **** 	}
 3490              		.loc 1 82 3 is_stmt 1 view .LVU1366
 3491              	.LVL315:
  84:./src/main.c  **** }
 3492              		.loc 1 84 2 view .LVU1367
  82:./src/main.c  **** 	}
 3493              		.loc 1 82 7 is_stmt 0 view .LVU1368
 3494 0fa4 302082E2 		add	r2, r2, #48
 3495              	.LBE615:
 3496              	.LBE620:
1216:./src/main.c  **** 
1217:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
 3497              		.loc 1 1217 8 view .LVU1369
 3498 0fa8 000053E3 		cmp	r3, #0
1215:./src/main.c  **** 
 3499              		.loc 1 1215 18 view .LVU1370
 3500 0fac 2C20C4E5 		strb	r2, [r4, #44]
 3501              		.loc 1 1217 5 is_stmt 1 view .LVU1371
 3502              		.loc 1 1217 8 is_stmt 0 view .LVU1372
 3503 0fb0 B400001A 		bne	.L263
1218:./src/main.c  **** 					// convert data bytes to ASCII
1219:./src/main.c  **** 					for (i=0;i<CanRxMsg.Len;++i) {
 3504              		.loc 1 1219 6 is_stmt 1 view .LVU1373
 3505 0fb4 00005EE3 		cmp	lr, #0
 3506              		.loc 1 1219 12 is_stmt 0 view .LVU1374
 3507 0fb8 7630C4E5 		strb	r3, [r4, #118]
 3508              		.loc 1 1219 15 is_stmt 1 view .LVU1375
 3509              		.loc 1 1219 6 is_stmt 0 view .LVU1376
 3510 0fbc 1400000A 		beq	.L264
 3511              	.L262:
 3512 0fc0 D4C29FE5 		ldr	ip, .L349+8
 3513 0fc4 01504EE2 		sub	r5, lr, #1
 3514 0fc8 FF3005E2 		and	r3, r5, #255
 3515 0fcc 01508CE2 		add	r5, ip, #1
 3516 0fd0 43204CE2 		sub	r2, ip, #67
 3517 0fd4 035085E0 		add	r5, r5, r3
 3518              	.L269:
1220:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3519              		.loc 1 1220 7 is_stmt 1 view .LVU1377
 3520              	.LBB621:
 3521              	.LBB622:
  78:./src/main.c  **** 	}
 3522              		.loc 1 78 3 view .LVU1378
  82:./src/main.c  **** 	}
 3523              		.loc 1 82 3 view .LVU1379
 3524              	.LBE622:
 3525              	.LBE621:
 3526              		.loc 1 1220 51 is_stmt 0 view .LVU1380
 3527 0fd8 0130FCE5 		ldrb	r3, [ip, #1]!	@ zero_extendqisi2
 3528              	.LBB626:
 3529              	.LBB623:
  76:./src/main.c  **** 	{
 3530              		.loc 1 76 4 view .LVU1381
 3531 0fdc 9F0053E3 		cmp	r3, #159
 3532              	.LBE623:
 3533              	.LBE626:
 3534              		.loc 1 1220 26 view .LVU1382
 3535 0fe0 2312A0E1 		lsr	r1, r3, #4
 3536              	.LVL316:
 3537              	.LBB627:
 3538              	.LBI621:
  73:./src/main.c  **** {
 3539              		.loc 1 73 6 is_stmt 1 view .LVU1383
 3540              	.LBB624:
  75:./src/main.c  **** 	if(chr > 9)
 3541              		.loc 1 75 2 view .LVU1384
  76:./src/main.c  **** 	{
 3542              		.loc 1 76 2 view .LVU1385
 3543              	.LBE624:
 3544              	.LBE627:
1221:./src/main.c  **** 						SerXmtBuf[6+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 3545              		.loc 1 1221 26 is_stmt 0 view .LVU1386
 3546 0fe4 0F3003E2 		and	r3, r3, #15
 3547              	.LBB628:
 3548              	.LBB625:
  78:./src/main.c  **** 	}
 3549              		.loc 1 78 7 view .LVU1387
 3550 0fe8 37108182 		addhi	r1, r1, #55
 3551              	.LVL317:
  82:./src/main.c  **** 	}
 3552              		.loc 1 82 7 view .LVU1388
 3553 0fec 30108192 		addls	r1, r1, #48
 3554              	.LVL318:
  84:./src/main.c  **** }
 3555              		.loc 1 84 2 is_stmt 1 view .LVU1389
  84:./src/main.c  **** }
 3556              		.loc 1 84 2 is_stmt 0 view .LVU1390
 3557              	.LBE625:
 3558              	.LBE628:
 3559              	.LBB629:
 3560              	.LBB630:
  78:./src/main.c  **** 	}
 3561              		.loc 1 78 3 is_stmt 1 view .LVU1391
  82:./src/main.c  **** 	}
 3562              		.loc 1 82 3 view .LVU1392
  76:./src/main.c  **** 	{
 3563              		.loc 1 76 4 is_stmt 0 view .LVU1393
 3564 0ff0 090053E3 		cmp	r3, #9
  78:./src/main.c  **** 	}
 3565              		.loc 1 78 7 view .LVU1394
 3566 0ff4 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 3567              		.loc 1 82 7 view .LVU1395
 3568 0ff8 30308392 		addls	r3, r3, #48
 3569              	.LBE630:
 3570              	.LBE629:
1219:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3571              		.loc 1 1219 6 view .LVU1396
 3572 0ffc 0C0055E1 		cmp	r5, ip
1220:./src/main.c  **** 						SerXmtBuf[6+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 3573              		.loc 1 1220 24 view .LVU1397
 3574 1000 0510C2E5 		strb	r1, [r2, #5]
 3575              		.loc 1 1221 7 is_stmt 1 view .LVU1398
 3576              	.LBB632:
 3577              	.LBI629:
  73:./src/main.c  **** {
 3578              		.loc 1 73 6 view .LVU1399
 3579              	.LBB631:
  75:./src/main.c  **** 	if(chr > 9)
 3580              		.loc 1 75 2 view .LVU1400
  76:./src/main.c  **** 	{
 3581              		.loc 1 76 2 view .LVU1401
 3582              	.LVL319:
  84:./src/main.c  **** }
 3583              		.loc 1 84 2 view .LVU1402
  84:./src/main.c  **** }
 3584              		.loc 1 84 2 is_stmt 0 view .LVU1403
 3585              	.LBE631:
 3586              	.LBE632:
 3587              		.loc 1 1221 24 view .LVU1404
 3588 1004 0630C2E5 		strb	r3, [r2, #6]
1219:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3589              		.loc 1 1219 30 is_stmt 1 view .LVU1405
1219:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3590              		.loc 1 1219 15 view .LVU1406
1219:./src/main.c  **** 						SerXmtBuf[5+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 3591              		.loc 1 1219 6 is_stmt 0 view .LVU1407
 3592 1008 022082E2 		add	r2, r2, #2
 3593 100c F1FFFF1A 		bne	.L269
 3594 1010 76E0C4E5 		strb	lr, [r4, #118]
 3595              	.L264:
1222:./src/main.c  **** 					}
1223:./src/main.c  **** 					SerXmtBufPtr = 5 + (CanRxMsg.Len *2);
 3596              		.loc 1 1223 6 is_stmt 1 view .LVU1408
 3597              		.loc 1 1223 23 is_stmt 0 view .LVU1409
 3598 1014 8E30A0E1 		lsl	r3, lr, #1
 3599 1018 053083E2 		add	r3, r3, #5
 3600 101c FF3003E2 		and	r3, r3, #255
1224:./src/main.c  **** 				}
1225:./src/main.c  **** 				else { // is RTR: no data
1226:./src/main.c  **** 					SerXmtBufPtr = 5;
1227:./src/main.c  **** 				}
1228:./src/main.c  **** 
1229:./src/main.c  **** 				// append timestamp, if enabled
1230:./src/main.c  **** 				if (CanRcvTimestampOn == 1) {
1231:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 3601              		.loc 1 1231 15 view .LVU1410
 3602 1020 0310A0E1 		mov	r1, r3
 3603 1024 430000EA 		b	.L304
 3604              	.L347:
 3605              	.LBE603:
 3606              	.LBE602:
1190:./src/main.c  **** 			// Repeat sending last ASCII string to RS232 UART (Host-PC)
 3607              		.loc 1 1190 4 is_stmt 1 view .LVU1411
1192:./src/main.c  **** 			return;
 3608              		.loc 1 1192 22 is_stmt 0 view .LVU1412
 3609 1028 0000A0E3 		mov	r0, #0
 3610 102c 4920D4E5 		ldrb	r2, [r4, #73]	@ zero_extendqisi2
 3611 1030 281084E2 		add	r1, r4, #40
1190:./src/main.c  **** 			// Repeat sending last ASCII string to RS232 UART (Host-PC)
 3612              		.loc 1 1190 28 view .LVU1413
 3613 1034 5C30C4E5 		strb	r3, [r4, #92]
1192:./src/main.c  **** 			return;
 3614              		.loc 1 1192 4 is_stmt 1 view .LVU1414
1192:./src/main.c  **** 			return;
 3615              		.loc 1 1192 22 is_stmt 0 view .LVU1415
 3616 1038 FEFFFFEB 		bl	SER_Write
 3617              	.LVL320:
1192:./src/main.c  **** 			return;
 3618              		.loc 1 1192 20 view .LVU1416
 3619 103c 600084E5 		str	r0, [r4, #96]
1193:./src/main.c  **** 		}
 3620              		.loc 1 1193 4 is_stmt 1 view .LVU1417
 3621              	.L250:
1232:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
1233:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
1234:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
1235:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
1236:./src/main.c  **** 				}   
1237:./src/main.c  **** 	
1238:./src/main.c  **** 				SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
1239:./src/main.c  **** 				SerXmtBufPtr ++;
1240:./src/main.c  **** 
1241:./src/main.c  **** 				// Send ASCII string to RS232 UART (Host-PC)
1242:./src/main.c  **** 				UARTWriteResult = SER_Write ( SER_PORT1, &SerXmtBuf[0], SerXmtBufPtr);
1243:./src/main.c  **** 			} // IF Id=not Extended
1244:./src/main.c  **** 			//-------------------------------------------------
1245:./src/main.c  **** 
1246:./src/main.c  **** 			else { // Id = EXTENDED 29 bit
1247:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
1248:./src/main.c  **** 					SerXmtBuf[0] = 'T';
1249:./src/main.c  **** 				}
1250:./src/main.c  **** 				else { // is 29 bit RTR	
1251:./src/main.c  **** 					SerXmtBuf[0] = 'R';
1252:./src/main.c  **** 				}
1253:./src/main.c  **** 				SerXmtBufPtr++;
1254:./src/main.c  **** 				// 29 bit Id
1255:./src/main.c  **** 				SerXmtBuf[1] = hex2ascii((CanRxMsg.Id & 0x10000000)>>28);
1256:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
1257:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
1258:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
1259:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
1260:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
1261:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
1262:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
1263:./src/main.c  **** 				// DLC
1264:./src/main.c  **** 				SerXmtBuf[9] = hex2ascii(CanRxMsg.Len);
1265:./src/main.c  **** 				// data bytes
1266:./src/main.c  **** 				if ((CanRxMsg.Type & CAN_MSG_RTR) == 0) { // is -not- RTR
1267:./src/main.c  **** 					// convert data bytes to ASCII
1268:./src/main.c  **** 					for (i=0;i<CanRxMsg.Len;++i) {
1269:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
1270:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
1271:./src/main.c  **** 					}
1272:./src/main.c  **** 					SerXmtBufPtr = 10 + (CanRxMsg.Len *2);
1273:./src/main.c  **** 				}
1274:./src/main.c  **** 				else { // is RTR: no data
1275:./src/main.c  **** 					SerXmtBufPtr = 10;
1276:./src/main.c  **** 				}
1277:./src/main.c  **** 				// append timestamp, if enabled
1278:./src/main.c  **** 				if (CanRcvTimestampOn == 1) {
1279:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
1280:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
1282:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
1283:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
1284:./src/main.c  **** 				}   
1285:./src/main.c  **** 
1286:./src/main.c  **** 				SerXmtBuf[SerXmtBufPtr] = '\r'; // Append <CR>
1287:./src/main.c  **** 				SerXmtBufPtr ++;
1288:./src/main.c  **** 
1289:./src/main.c  **** 				// Send ASCII string to RS232 UART (Host-PC)
1290:./src/main.c  **** 				UARTWriteResult = SER_Write ( SER_PORT1, &SerXmtBuf[0], SerXmtBufPtr);
1291:./src/main.c  **** 			} // IF Id=Extended
1292:./src/main.c  **** 			//-------------------------------------------------
1293:./src/main.c  **** 		} // IF Can read
1294:./src/main.c  **** 	} // IF auto poll auto send
1295:./src/main.c  **** }
 3622              		.loc 1 1295 1 is_stmt 0 view .LVU1418
 3623 1040 7040BDE8 		pop	{r4, r5, r6, lr}
 3624              	.LCFI6:
 3625              		.cfi_remember_state
 3626              		.cfi_restore 14
 3627              		.cfi_restore 6
 3628              		.cfi_restore 5
 3629              		.cfi_restore 4
 3630              		.cfi_def_cfa_offset 0
 3631 1044 1EFF2FE1 		bx	lr
 3632              	.L255:
 3633              	.LCFI7:
 3634              		.cfi_restore_state
 3635              	.LBB704:
 3636              	.LBB702:
1247:./src/main.c  **** 					SerXmtBuf[0] = 'T';
 3637              		.loc 1 1247 5 is_stmt 1 view .LVU1419
1248:./src/main.c  **** 				}
 3638              		.loc 1 1248 19 is_stmt 0 view .LVU1420
 3639 1048 012013E2 		ands	r2, r3, #1
 3640 104c 52C0A013 		movne	ip, #82
 3641 1050 54C0A003 		moveq	ip, #84
1255:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3642              		.loc 1 1255 39 view .LVU1421
 3643 1054 683094E5 		ldr	r3, [r4, #104]
1255:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3644              		.loc 1 1255 56 view .LVU1422
 3645 1058 231EA0E1 		lsr	r1, r3, #28
1255:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3646              		.loc 1 1255 20 view .LVU1423
 3647 105c 011001E2 		and	r1, r1, #1
 3648              	.LBB633:
 3649              	.LBB634:
  82:./src/main.c  **** 	}
 3650              		.loc 1 82 7 view .LVU1424
 3651 1060 301081E2 		add	r1, r1, #48
 3652              	.LBE634:
 3653              	.LBE633:
1255:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3654              		.loc 1 1255 18 view .LVU1425
 3655 1064 2910C4E5 		strb	r1, [r4, #41]
1256:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3656              		.loc 1 1256 56 view .LVU1426
 3657 1068 231CA0E1 		lsr	r1, r3, #24
1256:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3658              		.loc 1 1256 20 view .LVU1427
 3659 106c 0F1001E2 		and	r1, r1, #15
 3660              	.LBB636:
 3661              	.LBB637:
  76:./src/main.c  **** 	{
 3662              		.loc 1 76 4 view .LVU1428
 3663 1070 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3664              		.loc 1 78 7 view .LVU1429
 3665 1074 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3666              		.loc 1 82 7 view .LVU1430
 3667 1078 30108192 		addls	r1, r1, #48
 3668              	.LBE637:
 3669              	.LBE636:
1256:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3670              		.loc 1 1256 18 view .LVU1431
 3671 107c 2A10C4E5 		strb	r1, [r4, #42]
1257:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3672              		.loc 1 1257 56 view .LVU1432
 3673 1080 231AA0E1 		lsr	r1, r3, #20
1257:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3674              		.loc 1 1257 20 view .LVU1433
 3675 1084 0F1001E2 		and	r1, r1, #15
 3676              	.LBB639:
 3677              	.LBB640:
  76:./src/main.c  **** 	{
 3678              		.loc 1 76 4 view .LVU1434
 3679 1088 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3680              		.loc 1 78 7 view .LVU1435
 3681 108c 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3682              		.loc 1 82 7 view .LVU1436
 3683 1090 30108192 		addls	r1, r1, #48
 3684              	.LBE640:
 3685              	.LBE639:
1257:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3686              		.loc 1 1257 18 view .LVU1437
 3687 1094 2B10C4E5 		strb	r1, [r4, #43]
1258:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3688              		.loc 1 1258 56 view .LVU1438
 3689 1098 2318A0E1 		lsr	r1, r3, #16
1258:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3690              		.loc 1 1258 20 view .LVU1439
 3691 109c 0F1001E2 		and	r1, r1, #15
 3692              	.LBB642:
 3693              	.LBB643:
  76:./src/main.c  **** 	{
 3694              		.loc 1 76 4 view .LVU1440
 3695 10a0 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3696              		.loc 1 78 7 view .LVU1441
 3697 10a4 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3698              		.loc 1 82 7 view .LVU1442
 3699 10a8 30108192 		addls	r1, r1, #48
 3700              	.LBE643:
 3701              	.LBE642:
1258:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3702              		.loc 1 1258 18 view .LVU1443
 3703 10ac 2C10C4E5 		strb	r1, [r4, #44]
1259:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3704              		.loc 1 1259 56 view .LVU1444
 3705 10b0 2316A0E1 		lsr	r1, r3, #12
1259:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3706              		.loc 1 1259 20 view .LVU1445
 3707 10b4 0F1001E2 		and	r1, r1, #15
 3708              	.LBB645:
 3709              	.LBB646:
  76:./src/main.c  **** 	{
 3710              		.loc 1 76 4 view .LVU1446
 3711 10b8 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3712              		.loc 1 78 7 view .LVU1447
 3713 10bc 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3714              		.loc 1 82 7 view .LVU1448
 3715 10c0 30108192 		addls	r1, r1, #48
 3716              	.LBE646:
 3717              	.LBE645:
1259:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3718              		.loc 1 1259 18 view .LVU1449
 3719 10c4 2D10C4E5 		strb	r1, [r4, #45]
1260:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3720              		.loc 1 1260 56 view .LVU1450
 3721 10c8 2314A0E1 		lsr	r1, r3, #8
1260:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3722              		.loc 1 1260 20 view .LVU1451
 3723 10cc 0F1001E2 		and	r1, r1, #15
 3724              	.LBB648:
 3725              	.LBB649:
  76:./src/main.c  **** 	{
 3726              		.loc 1 76 4 view .LVU1452
 3727 10d0 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3728              		.loc 1 78 7 view .LVU1453
 3729 10d4 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3730              		.loc 1 82 7 view .LVU1454
 3731 10d8 30108192 		addls	r1, r1, #48
 3732              	.LBE649:
 3733              	.LBE648:
1260:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3734              		.loc 1 1260 18 view .LVU1455
 3735 10dc 2E10C4E5 		strb	r1, [r4, #46]
1261:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3736              		.loc 1 1261 56 view .LVU1456
 3737 10e0 2312A0E1 		lsr	r1, r3, #4
1261:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3738              		.loc 1 1261 20 view .LVU1457
 3739 10e4 0F1001E2 		and	r1, r1, #15
1262:./src/main.c  **** 				// DLC
 3740              		.loc 1 1262 20 view .LVU1458
 3741 10e8 0F3003E2 		and	r3, r3, #15
 3742              	.LBB651:
 3743              	.LBB652:
  76:./src/main.c  **** 	{
 3744              		.loc 1 76 4 view .LVU1459
 3745 10ec 090051E3 		cmp	r1, #9
  78:./src/main.c  **** 	}
 3746              		.loc 1 78 7 view .LVU1460
 3747 10f0 37108182 		addhi	r1, r1, #55
  82:./src/main.c  **** 	}
 3748              		.loc 1 82 7 view .LVU1461
 3749 10f4 30108192 		addls	r1, r1, #48
 3750 10f8 28C0C4E5 		strb	ip, [r4, #40]
 3751              	.LBE652:
 3752              	.LBE651:
1253:./src/main.c  **** 				// 29 bit Id
 3753              		.loc 1 1253 5 is_stmt 1 view .LVU1462
1255:./src/main.c  **** 				SerXmtBuf[2] = hex2ascii((CanRxMsg.Id & 0x0F000000)>>24);
 3754              		.loc 1 1255 5 view .LVU1463
 3755              	.LBB654:
 3756              	.LBI633:
  73:./src/main.c  **** {
 3757              		.loc 1 73 6 view .LVU1464
 3758              	.LBB635:
  75:./src/main.c  **** 	if(chr > 9)
 3759              		.loc 1 75 2 view .LVU1465
  76:./src/main.c  **** 	{
 3760              		.loc 1 76 2 view .LVU1466
  82:./src/main.c  **** 	}
 3761              		.loc 1 82 3 view .LVU1467
  84:./src/main.c  **** }
 3762              		.loc 1 84 2 view .LVU1468
 3763              	.LBE635:
 3764              	.LBE654:
1256:./src/main.c  **** 				SerXmtBuf[3] = hex2ascii((CanRxMsg.Id & 0x00F00000)>>20);
 3765              		.loc 1 1256 5 view .LVU1469
 3766              	.LBB655:
 3767              	.LBI636:
  73:./src/main.c  **** {
 3768              		.loc 1 73 6 view .LVU1470
 3769              	.LBB638:
  75:./src/main.c  **** 	if(chr > 9)
 3770              		.loc 1 75 2 view .LVU1471
  76:./src/main.c  **** 	{
 3771              		.loc 1 76 2 view .LVU1472
  78:./src/main.c  **** 	}
 3772              		.loc 1 78 3 view .LVU1473
  82:./src/main.c  **** 	}
 3773              		.loc 1 82 3 view .LVU1474
  84:./src/main.c  **** }
 3774              		.loc 1 84 2 view .LVU1475
 3775              	.LBE638:
 3776              	.LBE655:
1257:./src/main.c  **** 				SerXmtBuf[4] = hex2ascii((CanRxMsg.Id & 0x000F0000)>>16);
 3777              		.loc 1 1257 5 view .LVU1476
 3778              	.LBB656:
 3779              	.LBI639:
  73:./src/main.c  **** {
 3780              		.loc 1 73 6 view .LVU1477
 3781              	.LBB641:
  75:./src/main.c  **** 	if(chr > 9)
 3782              		.loc 1 75 2 view .LVU1478
  76:./src/main.c  **** 	{
 3783              		.loc 1 76 2 view .LVU1479
  78:./src/main.c  **** 	}
 3784              		.loc 1 78 3 view .LVU1480
  82:./src/main.c  **** 	}
 3785              		.loc 1 82 3 view .LVU1481
  84:./src/main.c  **** }
 3786              		.loc 1 84 2 view .LVU1482
 3787              	.LBE641:
 3788              	.LBE656:
1258:./src/main.c  **** 				SerXmtBuf[5] = hex2ascii((CanRxMsg.Id & 0x0000F000)>>12);
 3789              		.loc 1 1258 5 view .LVU1483
 3790              	.LBB657:
 3791              	.LBI642:
  73:./src/main.c  **** {
 3792              		.loc 1 73 6 view .LVU1484
 3793              	.LBB644:
  75:./src/main.c  **** 	if(chr > 9)
 3794              		.loc 1 75 2 view .LVU1485
  76:./src/main.c  **** 	{
 3795              		.loc 1 76 2 view .LVU1486
  78:./src/main.c  **** 	}
 3796              		.loc 1 78 3 view .LVU1487
  82:./src/main.c  **** 	}
 3797              		.loc 1 82 3 view .LVU1488
  84:./src/main.c  **** }
 3798              		.loc 1 84 2 view .LVU1489
 3799              	.LBE644:
 3800              	.LBE657:
1259:./src/main.c  **** 				SerXmtBuf[6] = hex2ascii((CanRxMsg.Id & 0x00000F00)>>8);
 3801              		.loc 1 1259 5 view .LVU1490
 3802              	.LBB658:
 3803              	.LBI645:
  73:./src/main.c  **** {
 3804              		.loc 1 73 6 view .LVU1491
 3805              	.LBB647:
  75:./src/main.c  **** 	if(chr > 9)
 3806              		.loc 1 75 2 view .LVU1492
  76:./src/main.c  **** 	{
 3807              		.loc 1 76 2 view .LVU1493
  78:./src/main.c  **** 	}
 3808              		.loc 1 78 3 view .LVU1494
  82:./src/main.c  **** 	}
 3809              		.loc 1 82 3 view .LVU1495
  84:./src/main.c  **** }
 3810              		.loc 1 84 2 view .LVU1496
 3811              	.LBE647:
 3812              	.LBE658:
1260:./src/main.c  **** 				SerXmtBuf[7] = hex2ascii((CanRxMsg.Id & 0x000000F0)>>4);
 3813              		.loc 1 1260 5 view .LVU1497
 3814              	.LBB659:
 3815              	.LBI648:
  73:./src/main.c  **** {
 3816              		.loc 1 73 6 view .LVU1498
 3817              	.LBB650:
  75:./src/main.c  **** 	if(chr > 9)
 3818              		.loc 1 75 2 view .LVU1499
  76:./src/main.c  **** 	{
 3819              		.loc 1 76 2 view .LVU1500
  78:./src/main.c  **** 	}
 3820              		.loc 1 78 3 view .LVU1501
  82:./src/main.c  **** 	}
 3821              		.loc 1 82 3 view .LVU1502
  84:./src/main.c  **** }
 3822              		.loc 1 84 2 view .LVU1503
 3823              	.LBE650:
 3824              	.LBE659:
1261:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3825              		.loc 1 1261 5 view .LVU1504
 3826              	.LBB660:
 3827              	.LBI651:
  73:./src/main.c  **** {
 3828              		.loc 1 73 6 view .LVU1505
 3829              	.LBB653:
  75:./src/main.c  **** 	if(chr > 9)
 3830              		.loc 1 75 2 view .LVU1506
  76:./src/main.c  **** 	{
 3831              		.loc 1 76 2 view .LVU1507
  78:./src/main.c  **** 	}
 3832              		.loc 1 78 3 view .LVU1508
  82:./src/main.c  **** 	}
 3833              		.loc 1 82 3 view .LVU1509
 3834              	.LVL321:
  84:./src/main.c  **** }
 3835              		.loc 1 84 2 view .LVU1510
  84:./src/main.c  **** }
 3836              		.loc 1 84 2 is_stmt 0 view .LVU1511
 3837              	.LBE653:
 3838              	.LBE660:
 3839              	.LBB661:
 3840              	.LBB662:
  76:./src/main.c  **** 	{
 3841              		.loc 1 76 4 view .LVU1512
 3842 10fc 090053E3 		cmp	r3, #9
 3843              	.LBE662:
 3844              	.LBE661:
1264:./src/main.c  **** 				// data bytes
 3845              		.loc 1 1264 20 view .LVU1513
 3846 1100 67C0D4E5 		ldrb	ip, [r4, #103]	@ zero_extendqisi2
 3847              	.LBB665:
 3848              	.LBB663:
  78:./src/main.c  **** 	}
 3849              		.loc 1 78 7 view .LVU1514
 3850 1104 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 3851              		.loc 1 82 7 view .LVU1515
 3852 1108 30308392 		addls	r3, r3, #48
 3853              	.LBE663:
 3854              	.LBE665:
1262:./src/main.c  **** 				// DLC
 3855              		.loc 1 1262 18 view .LVU1516
 3856 110c 3030C4E5 		strb	r3, [r4, #48]
 3857              	.LBB666:
 3858              	.LBB667:
  75:./src/main.c  **** 	if(chr > 9)
 3859              		.loc 1 75 6 view .LVU1517
 3860 1110 0F300CE2 		and	r3, ip, #15
  76:./src/main.c  **** 	{
 3861              		.loc 1 76 4 view .LVU1518
 3862 1114 090053E3 		cmp	r3, #9
 3863              	.LBE667:
 3864              	.LBE666:
1261:./src/main.c  **** 				SerXmtBuf[8] = hex2ascii (CanRxMsg.Id & 0x0000000F);
 3865              		.loc 1 1261 18 view .LVU1519
 3866 1118 2F10C4E5 		strb	r1, [r4, #47]
1262:./src/main.c  **** 				// DLC
 3867              		.loc 1 1262 5 is_stmt 1 view .LVU1520
 3868              	.LBB670:
 3869              	.LBI661:
  73:./src/main.c  **** {
 3870              		.loc 1 73 6 view .LVU1521
 3871              	.LBB664:
  75:./src/main.c  **** 	if(chr > 9)
 3872              		.loc 1 75 2 view .LVU1522
  76:./src/main.c  **** 	{
 3873              		.loc 1 76 2 view .LVU1523
  78:./src/main.c  **** 	}
 3874              		.loc 1 78 3 view .LVU1524
  82:./src/main.c  **** 	}
 3875              		.loc 1 82 3 view .LVU1525
  84:./src/main.c  **** }
 3876              		.loc 1 84 2 view .LVU1526
 3877              	.LBE664:
 3878              	.LBE670:
1264:./src/main.c  **** 				// data bytes
 3879              		.loc 1 1264 5 view .LVU1527
 3880              	.LVL322:
 3881              	.LBB671:
 3882              	.LBI666:
  73:./src/main.c  **** {
 3883              		.loc 1 73 6 view .LVU1528
 3884              	.LBB668:
  75:./src/main.c  **** 	if(chr > 9)
 3885              		.loc 1 75 2 view .LVU1529
  76:./src/main.c  **** 	{
 3886              		.loc 1 76 2 view .LVU1530
  76:./src/main.c  **** 	{
 3887              		.loc 1 76 4 is_stmt 0 view .LVU1531
 3888 111c 3400009A 		bls	.L295
  78:./src/main.c  **** 	}
 3889              		.loc 1 78 3 is_stmt 1 view .LVU1532
 3890              	.LVL323:
  84:./src/main.c  **** }
 3891              		.loc 1 84 2 view .LVU1533
  78:./src/main.c  **** 	}
 3892              		.loc 1 78 7 is_stmt 0 view .LVU1534
 3893 1120 373083E2 		add	r3, r3, #55
 3894              	.LBE668:
 3895              	.LBE671:
1266:./src/main.c  **** 					// convert data bytes to ASCII
 3896              		.loc 1 1266 8 view .LVU1535
 3897 1124 000052E3 		cmp	r2, #0
1264:./src/main.c  **** 				// data bytes
 3898              		.loc 1 1264 18 view .LVU1536
 3899 1128 3130C4E5 		strb	r3, [r4, #49]
1266:./src/main.c  **** 					// convert data bytes to ASCII
 3900              		.loc 1 1266 5 is_stmt 1 view .LVU1537
1266:./src/main.c  **** 					// convert data bytes to ASCII
 3901              		.loc 1 1266 8 is_stmt 0 view .LVU1538
 3902 112c 3700000A 		beq	.L296
 3903              	.L297:
1275:./src/main.c  **** 				}
 3904              		.loc 1 1275 6 is_stmt 1 view .LVU1539
1275:./src/main.c  **** 				}
 3905              		.loc 1 1275 19 is_stmt 0 view .LVU1540
 3906 1130 0A10A0E3 		mov	r1, #10
 3907 1134 0130A0E1 		mov	r3, r1
 3908              	.L304:
1278:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 3909              		.loc 1 1278 5 is_stmt 1 view .LVU1541
1278:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 3910              		.loc 1 1278 8 is_stmt 0 view .LVU1542
 3911 1138 5E20D4E5 		ldrb	r2, [r4, #94]	@ zero_extendqisi2
 3912 113c 010052E3 		cmp	r2, #1
 3913 1140 1F00001A 		bne	.L305
1279:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 3914              		.loc 1 1279 6 is_stmt 1 view .LVU1543
1279:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 3915              		.loc 1 1279 34 is_stmt 0 view .LVU1544
 3916 1144 20C6A0E1 		lsr	ip, r0, #12
 3917              	.LVL324:
 3918              	.LBB672:
 3919              	.LBI672:
  73:./src/main.c  **** {
 3920              		.loc 1 73 6 is_stmt 1 view .LVU1545
 3921              	.LBB673:
  75:./src/main.c  **** 	if(chr > 9)
 3922              		.loc 1 75 2 view .LVU1546
  76:./src/main.c  **** 	{
 3923              		.loc 1 76 2 view .LVU1547
  78:./src/main.c  **** 	}
 3924              		.loc 1 78 3 view .LVU1548
  76:./src/main.c  **** 	{
 3925              		.loc 1 76 4 is_stmt 0 view .LVU1549
 3926 1148 0A0A50E3 		cmp	r0, #40960
 3927              	.LBE673:
 3928              	.LBE672:
1280:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3929              		.loc 1 1280 64 view .LVU1550
 3930 114c 4024A0E1 		asr	r2, r0, #8
1280:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3931              		.loc 1 1280 34 view .LVU1551
 3932 1150 0F2002E2 		and	r2, r2, #15
 3933              	.LBB675:
 3934              	.LBB674:
  78:./src/main.c  **** 	}
 3935              		.loc 1 78 7 view .LVU1552
 3936 1154 37C08C22 		addcs	ip, ip, #55
 3937              	.LVL325:
  82:./src/main.c  **** 	}
 3938              		.loc 1 82 3 is_stmt 1 view .LVU1553
  82:./src/main.c  **** 	}
 3939              		.loc 1 82 7 is_stmt 0 view .LVU1554
 3940 1158 30C08C32 		addcc	ip, ip, #48
 3941              	.LVL326:
  84:./src/main.c  **** }
 3942              		.loc 1 84 2 is_stmt 1 view .LVU1555
  84:./src/main.c  **** }
 3943              		.loc 1 84 2 is_stmt 0 view .LVU1556
 3944              	.LBE674:
 3945              	.LBE675:
1279:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 3946              		.loc 1 1279 32 view .LVU1557
 3947 115c 01E084E0 		add	lr, r4, r1
 3948 1160 28C0CEE5 		strb	ip, [lr, #40]
1280:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3949              		.loc 1 1280 6 is_stmt 1 view .LVU1558
 3950              	.LBB676:
 3951              	.LBB677:
  76:./src/main.c  **** 	{
 3952              		.loc 1 76 4 is_stmt 0 view .LVU1559
 3953 1164 090052E3 		cmp	r2, #9
 3954              	.LBE677:
 3955              	.LBE676:
1280:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3956              		.loc 1 1280 28 view .LVU1560
 3957 1168 01C081E2 		add	ip, r1, #1
 3958              	.LVL327:
 3959              	.LBB679:
 3960              	.LBI676:
  73:./src/main.c  **** {
 3961              		.loc 1 73 6 is_stmt 1 view .LVU1561
 3962              	.LBB678:
  75:./src/main.c  **** 	if(chr > 9)
 3963              		.loc 1 75 2 view .LVU1562
  76:./src/main.c  **** 	{
 3964              		.loc 1 76 2 view .LVU1563
  78:./src/main.c  **** 	}
 3965              		.loc 1 78 3 view .LVU1564
  78:./src/main.c  **** 	}
 3966              		.loc 1 78 7 is_stmt 0 view .LVU1565
 3967 116c 37208282 		addhi	r2, r2, #55
 3968              	.LVL328:
  82:./src/main.c  **** 	}
 3969              		.loc 1 82 3 is_stmt 1 view .LVU1566
  82:./src/main.c  **** 	}
 3970              		.loc 1 82 7 is_stmt 0 view .LVU1567
 3971 1170 30208292 		addls	r2, r2, #48
 3972              	.LVL329:
  84:./src/main.c  **** }
 3973              		.loc 1 84 2 is_stmt 1 view .LVU1568
  84:./src/main.c  **** }
 3974              		.loc 1 84 2 is_stmt 0 view .LVU1569
 3975              	.LBE678:
 3976              	.LBE679:
1280:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+2] = hex2ascii((Timestamp & 0x00F0)>>4);
 3977              		.loc 1 1280 32 view .LVU1570
 3978 1174 0CC084E0 		add	ip, r4, ip
 3979 1178 2820CCE5 		strb	r2, [ip, #40]
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 3980              		.loc 1 1281 6 is_stmt 1 view .LVU1571
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 3981              		.loc 1 1281 64 is_stmt 0 view .LVU1572
 3982 117c 4022A0E1 		asr	r2, r0, #4
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 3983              		.loc 1 1281 34 view .LVU1573
 3984 1180 0F2002E2 		and	r2, r2, #15
 3985              	.LBB680:
 3986              	.LBB681:
  76:./src/main.c  **** 	{
 3987              		.loc 1 76 4 view .LVU1574
 3988 1184 090052E3 		cmp	r2, #9
 3989              	.LBE681:
 3990              	.LBE680:
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 3991              		.loc 1 1281 28 view .LVU1575
 3992 1188 02C081E2 		add	ip, r1, #2
 3993              	.LVL330:
 3994              	.LBB684:
 3995              	.LBI680:
  73:./src/main.c  **** {
 3996              		.loc 1 73 6 is_stmt 1 view .LVU1576
 3997              	.LBB682:
  75:./src/main.c  **** 	if(chr > 9)
 3998              		.loc 1 75 2 view .LVU1577
  76:./src/main.c  **** 	{
 3999              		.loc 1 76 2 view .LVU1578
  78:./src/main.c  **** 	}
 4000              		.loc 1 78 3 view .LVU1579
 4001              	.LBE682:
 4002              	.LBE684:
1283:./src/main.c  **** 				}   
 4003              		.loc 1 1283 34 is_stmt 0 view .LVU1580
 4004 118c 043083E2 		add	r3, r3, #4
 4005              	.LBB685:
 4006              	.LBB683:
  78:./src/main.c  **** 	}
 4007              		.loc 1 78 7 view .LVU1581
 4008 1190 37208282 		addhi	r2, r2, #55
 4009              	.LVL331:
  82:./src/main.c  **** 	}
 4010              		.loc 1 82 3 is_stmt 1 view .LVU1582
  82:./src/main.c  **** 	}
 4011              		.loc 1 82 7 is_stmt 0 view .LVU1583
 4012 1194 30208292 		addls	r2, r2, #48
 4013              	.LVL332:
  84:./src/main.c  **** }
 4014              		.loc 1 84 2 is_stmt 1 view .LVU1584
  84:./src/main.c  **** }
 4015              		.loc 1 84 2 is_stmt 0 view .LVU1585
 4016              	.LBE683:
 4017              	.LBE685:
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4018              		.loc 1 1281 32 view .LVU1586
 4019 1198 0CC084E0 		add	ip, r4, ip
1283:./src/main.c  **** 				}   
 4020              		.loc 1 1283 34 view .LVU1587
 4021 119c FF3003E2 		and	r3, r3, #255
1281:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+3] = hex2ascii (Timestamp & 0x000F);
 4022              		.loc 1 1281 32 view .LVU1588
 4023 11a0 2820CCE5 		strb	r2, [ip, #40]
1282:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4024              		.loc 1 1282 6 is_stmt 1 view .LVU1589
1282:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4025              		.loc 1 1282 28 is_stmt 0 view .LVU1590
 4026 11a4 032081E2 		add	r2, r1, #3
1286:./src/main.c  **** 				SerXmtBufPtr ++;
 4027              		.loc 1 1286 14 view .LVU1591
 4028 11a8 0310A0E1 		mov	r1, r3
1282:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4029              		.loc 1 1282 34 view .LVU1592
 4030 11ac 0F0000E2 		and	r0, r0, #15
 4031              	.LVL333:
 4032              	.LBB686:
 4033              	.LBI686:
  73:./src/main.c  **** {
 4034              		.loc 1 73 6 is_stmt 1 view .LVU1593
 4035              	.LBB687:
  75:./src/main.c  **** 	if(chr > 9)
 4036              		.loc 1 75 2 view .LVU1594
  76:./src/main.c  **** 	{
 4037              		.loc 1 76 2 view .LVU1595
  78:./src/main.c  **** 	}
 4038              		.loc 1 78 3 view .LVU1596
  76:./src/main.c  **** 	{
 4039              		.loc 1 76 4 is_stmt 0 view .LVU1597
 4040 11b0 090050E3 		cmp	r0, #9
  78:./src/main.c  **** 	}
 4041              		.loc 1 78 7 view .LVU1598
 4042 11b4 37008082 		addhi	r0, r0, #55
 4043              	.LVL334:
  82:./src/main.c  **** 	}
 4044              		.loc 1 82 3 is_stmt 1 view .LVU1599
  82:./src/main.c  **** 	}
 4045              		.loc 1 82 7 is_stmt 0 view .LVU1600
 4046 11b8 30008092 		addls	r0, r0, #48
 4047              	.LVL335:
  84:./src/main.c  **** }
 4048              		.loc 1 84 2 is_stmt 1 view .LVU1601
  84:./src/main.c  **** }
 4049              		.loc 1 84 2 is_stmt 0 view .LVU1602
 4050              	.LBE687:
 4051              	.LBE686:
1282:./src/main.c  **** 					SerXmtBufPtr = SerXmtBufPtr +4;
 4052              		.loc 1 1282 32 view .LVU1603
 4053 11bc 022084E0 		add	r2, r4, r2
 4054 11c0 2800C2E5 		strb	r0, [r2, #40]
1283:./src/main.c  **** 				}   
 4055              		.loc 1 1283 6 is_stmt 1 view .LVU1604
 4056              	.L305:
1286:./src/main.c  **** 				SerXmtBufPtr ++;
 4057              		.loc 1 1286 5 view .LVU1605
1286:./src/main.c  **** 				SerXmtBufPtr ++;
 4058              		.loc 1 1286 29 is_stmt 0 view .LVU1606
 4059 11c4 0DC0A0E3 		mov	ip, #13
1287:./src/main.c  **** 
 4060              		.loc 1 1287 18 view .LVU1607
 4061 11c8 013083E2 		add	r3, r3, #1
 4062 11cc FF2003E2 		and	r2, r3, #255
1286:./src/main.c  **** 				SerXmtBufPtr ++;
 4063              		.loc 1 1286 29 view .LVU1608
 4064 11d0 013084E0 		add	r3, r4, r1
1287:./src/main.c  **** 
 4065              		.loc 1 1287 18 view .LVU1609
 4066 11d4 4920C4E5 		strb	r2, [r4, #73]
1290:./src/main.c  **** 			} // IF Id=Extended
 4067              		.loc 1 1290 23 view .LVU1610
 4068 11d8 0000A0E3 		mov	r0, #0
 4069 11dc BC109FE5 		ldr	r1, .L349+12
1286:./src/main.c  **** 				SerXmtBufPtr ++;
 4070              		.loc 1 1286 29 view .LVU1611
 4071 11e0 28C0C3E5 		strb	ip, [r3, #40]
1287:./src/main.c  **** 
 4072              		.loc 1 1287 5 is_stmt 1 view .LVU1612
1290:./src/main.c  **** 			} // IF Id=Extended
 4073              		.loc 1 1290 5 view .LVU1613
1290:./src/main.c  **** 			} // IF Id=Extended
 4074              		.loc 1 1290 23 is_stmt 0 view .LVU1614
 4075 11e4 FEFFFFEB 		bl	SER_Write
 4076              	.LVL336:
1290:./src/main.c  **** 			} // IF Id=Extended
 4077              		.loc 1 1290 21 view .LVU1615
 4078 11e8 600084E5 		str	r0, [r4, #96]
 4079              	.LBE702:
 4080              	.LBE704:
 4081              		.loc 1 1295 1 view .LVU1616
 4082 11ec 7040BDE8 		pop	{r4, r5, r6, lr}
 4083              	.LCFI8:
 4084              		.cfi_remember_state
 4085              		.cfi_restore 14
 4086              		.cfi_restore 6
 4087              		.cfi_restore 5
 4088              		.cfi_restore 4
 4089              		.cfi_def_cfa_offset 0
 4090 11f0 1EFF2FE1 		bx	lr
 4091              	.LVL337:
 4092              	.L295:
 4093              	.LCFI9:
 4094              		.cfi_restore_state
 4095              	.LBB705:
 4096              	.LBB703:
 4097              	.LBB688:
 4098              	.LBB669:
  82:./src/main.c  **** 	}
 4099              		.loc 1 82 3 is_stmt 1 view .LVU1617
  84:./src/main.c  **** }
 4100              		.loc 1 84 2 view .LVU1618
  82:./src/main.c  **** 	}
 4101              		.loc 1 82 7 is_stmt 0 view .LVU1619
 4102 11f4 303083E2 		add	r3, r3, #48
 4103              	.LBE669:
 4104              	.LBE688:
1266:./src/main.c  **** 					// convert data bytes to ASCII
 4105              		.loc 1 1266 8 view .LVU1620
 4106 11f8 000052E3 		cmp	r2, #0
1264:./src/main.c  **** 				// data bytes
 4107              		.loc 1 1264 18 view .LVU1621
 4108 11fc 3130C4E5 		strb	r3, [r4, #49]
1266:./src/main.c  **** 					// convert data bytes to ASCII
 4109              		.loc 1 1266 5 is_stmt 1 view .LVU1622
1266:./src/main.c  **** 					// convert data bytes to ASCII
 4110              		.loc 1 1266 8 is_stmt 0 view .LVU1623
 4111 1200 CAFFFF1A 		bne	.L297
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4112              		.loc 1 1268 6 is_stmt 1 view .LVU1624
 4113 1204 00005CE3 		cmp	ip, #0
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4114              		.loc 1 1268 12 is_stmt 0 view .LVU1625
 4115 1208 7620C4E5 		strb	r2, [r4, #118]
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4116              		.loc 1 1268 15 is_stmt 1 view .LVU1626
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4117              		.loc 1 1268 6 is_stmt 0 view .LVU1627
 4118 120c 1400000A 		beq	.L298
 4119              	.L296:
 4120 1210 84E09FE5 		ldr	lr, .L349+8
 4121 1214 01504CE2 		sub	r5, ip, #1
 4122 1218 FF5005E2 		and	r5, r5, #255
 4123 121c 01308EE2 		add	r3, lr, #1
 4124 1220 43204EE2 		sub	r2, lr, #67
 4125 1224 035085E0 		add	r5, r5, r3
 4126              	.L303:
1269:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4127              		.loc 1 1269 7 is_stmt 1 view .LVU1628
 4128              	.LBB689:
 4129              	.LBB690:
  78:./src/main.c  **** 	}
 4130              		.loc 1 78 3 view .LVU1629
  82:./src/main.c  **** 	}
 4131              		.loc 1 82 3 view .LVU1630
 4132              	.LBE690:
 4133              	.LBE689:
1269:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4134              		.loc 1 1269 52 is_stmt 0 view .LVU1631
 4135 1228 0130FEE5 		ldrb	r3, [lr, #1]!	@ zero_extendqisi2
 4136              	.LBB694:
 4137              	.LBB691:
  76:./src/main.c  **** 	{
 4138              		.loc 1 76 4 view .LVU1632
 4139 122c 9F0053E3 		cmp	r3, #159
 4140              	.LBE691:
 4141              	.LBE694:
1269:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4142              		.loc 1 1269 27 view .LVU1633
 4143 1230 2312A0E1 		lsr	r1, r3, #4
 4144              	.LVL338:
 4145              	.LBB695:
 4146              	.LBI689:
  73:./src/main.c  **** {
 4147              		.loc 1 73 6 is_stmt 1 view .LVU1634
 4148              	.LBB692:
  75:./src/main.c  **** 	if(chr > 9)
 4149              		.loc 1 75 2 view .LVU1635
  76:./src/main.c  **** 	{
 4150              		.loc 1 76 2 view .LVU1636
 4151              	.LBE692:
 4152              	.LBE695:
1270:./src/main.c  **** 					}
 4153              		.loc 1 1270 27 is_stmt 0 view .LVU1637
 4154 1234 0F3003E2 		and	r3, r3, #15
 4155              	.LBB696:
 4156              	.LBB693:
  78:./src/main.c  **** 	}
 4157              		.loc 1 78 7 view .LVU1638
 4158 1238 37108182 		addhi	r1, r1, #55
 4159              	.LVL339:
  82:./src/main.c  **** 	}
 4160              		.loc 1 82 7 view .LVU1639
 4161 123c 30108192 		addls	r1, r1, #48
 4162              	.LVL340:
  84:./src/main.c  **** }
 4163              		.loc 1 84 2 is_stmt 1 view .LVU1640
  84:./src/main.c  **** }
 4164              		.loc 1 84 2 is_stmt 0 view .LVU1641
 4165              	.LBE693:
 4166              	.LBE696:
 4167              	.LBB697:
 4168              	.LBB698:
  78:./src/main.c  **** 	}
 4169              		.loc 1 78 3 is_stmt 1 view .LVU1642
  82:./src/main.c  **** 	}
 4170              		.loc 1 82 3 view .LVU1643
  76:./src/main.c  **** 	{
 4171              		.loc 1 76 4 is_stmt 0 view .LVU1644
 4172 1240 090053E3 		cmp	r3, #9
  78:./src/main.c  **** 	}
 4173              		.loc 1 78 7 view .LVU1645
 4174 1244 37308382 		addhi	r3, r3, #55
  82:./src/main.c  **** 	}
 4175              		.loc 1 82 7 view .LVU1646
 4176 1248 30308392 		addls	r3, r3, #48
 4177              	.LBE698:
 4178              	.LBE697:
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4179              		.loc 1 1268 6 view .LVU1647
 4180 124c 0E0055E1 		cmp	r5, lr
1269:./src/main.c  **** 						SerXmtBuf[11+i*2] = hex2ascii (CanRxMsg.Data8[i] & 0x0F);
 4181              		.loc 1 1269 25 view .LVU1648
 4182 1250 0A10C2E5 		strb	r1, [r2, #10]
1270:./src/main.c  **** 					}
 4183              		.loc 1 1270 7 is_stmt 1 view .LVU1649
 4184              	.LBB700:
 4185              	.LBI697:
  73:./src/main.c  **** {
 4186              		.loc 1 73 6 view .LVU1650
 4187              	.LBB699:
  75:./src/main.c  **** 	if(chr > 9)
 4188              		.loc 1 75 2 view .LVU1651
  76:./src/main.c  **** 	{
 4189              		.loc 1 76 2 view .LVU1652
 4190              	.LVL341:
  84:./src/main.c  **** }
 4191              		.loc 1 84 2 view .LVU1653
  84:./src/main.c  **** }
 4192              		.loc 1 84 2 is_stmt 0 view .LVU1654
 4193              	.LBE699:
 4194              	.LBE700:
1270:./src/main.c  **** 					}
 4195              		.loc 1 1270 25 view .LVU1655
 4196 1254 0B30C2E5 		strb	r3, [r2, #11]
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4197              		.loc 1 1268 30 is_stmt 1 view .LVU1656
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4198              		.loc 1 1268 15 view .LVU1657
1268:./src/main.c  **** 						SerXmtBuf[10+i*2] = hex2ascii((CanRxMsg.Data8[i] & 0xF0)>>4);
 4199              		.loc 1 1268 6 is_stmt 0 view .LVU1658
 4200 1258 022082E2 		add	r2, r2, #2
 4201 125c F1FFFF1A 		bne	.L303
 4202 1260 76C0C4E5 		strb	ip, [r4, #118]
 4203              	.L298:
1272:./src/main.c  **** 				}
 4204              		.loc 1 1272 6 is_stmt 1 view .LVU1659
1272:./src/main.c  **** 				}
 4205              		.loc 1 1272 19 is_stmt 0 view .LVU1660
 4206 1264 05308CE2 		add	r3, ip, #5
 4207 1268 8330A0E1 		lsl	r3, r3, #1
 4208 126c FF3003E2 		and	r3, r3, #255
1279:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr+1] = hex2ascii((Timestamp & 0x0F00)>>8);
 4209              		.loc 1 1279 15 view .LVU1661
 4210 1270 0310A0E1 		mov	r1, r3
 4211 1274 AFFFFFEA 		b	.L304
 4212              	.LVL342:
 4213              	.L348:
 4214              	.LBB701:
 4215              	.LBB616:
  78:./src/main.c  **** 	}
 4216              		.loc 1 78 3 is_stmt 1 view .LVU1662
  84:./src/main.c  **** }
 4217              		.loc 1 84 2 view .LVU1663
  78:./src/main.c  **** 	}
 4218              		.loc 1 78 7 is_stmt 0 view .LVU1664
 4219 1278 372082E2 		add	r2, r2, #55
 4220              	.LBE616:
 4221              	.LBE701:
1217:./src/main.c  **** 					// convert data bytes to ASCII
 4222              		.loc 1 1217 8 view .LVU1665
 4223 127c 000053E3 		cmp	r3, #0
1215:./src/main.c  **** 
 4224              		.loc 1 1215 18 view .LVU1666
 4225 1280 2C20C4E5 		strb	r2, [r4, #44]
1217:./src/main.c  **** 					// convert data bytes to ASCII
 4226              		.loc 1 1217 5 is_stmt 1 view .LVU1667
1217:./src/main.c  **** 					// convert data bytes to ASCII
 4227              		.loc 1 1217 8 is_stmt 0 view .LVU1668
 4228 1284 4DFFFF0A 		beq	.L262
 4229              	.L263:
1226:./src/main.c  **** 				}
 4230              		.loc 1 1226 6 is_stmt 1 view .LVU1669
1226:./src/main.c  **** 				}
 4231              		.loc 1 1226 19 is_stmt 0 view .LVU1670
 4232 1288 0510A0E3 		mov	r1, #5
 4233 128c 0130A0E1 		mov	r3, r1
1230:./src/main.c  **** 					SerXmtBuf[SerXmtBufPtr]   = hex2ascii((Timestamp & 0xF000)>>12);
 4234              		.loc 1 1230 5 is_stmt 1 view .LVU1671
 4235 1290 A8FFFFEA 		b	.L304
 4236              	.L350:
 4237              		.align	2
 4238              	.L349:
 4239 1294 00000000 		.word	.LANCHOR1
 4240 1298 00000000 		.word	.LANCHOR0
 4241 129c 6B000000 		.word	.LANCHOR0+107
 4242 12a0 28000000 		.word	.LANCHOR0+40
 4243              	.LBE703:
 4244              	.LBE705:
 4245              		.cfi_endproc
 4246              	.LFE18:
 4248              		.section	.text.startup,"ax",%progbits
 4249              		.align	2
 4250              		.global	main
 4251              		.syntax unified
 4252              		.arm
 4253              		.fpu softvfp
 4255              	main:
 4256              	.LFB5:
 114:./src/main.c  **** 	// init hardware
 4257              		.loc 1 114 1 view -0
 4258              		.cfi_startproc
 4259              		@ Function supports interworking.
 4260              		@ Volatile: function does not return.
 4261              		@ args = 0, pretend = 0, frame = 0
 4262              		@ frame_needed = 0, uses_anonymous_args = 0
 116:./src/main.c  **** 	IODIR1 |= 0x00100000;                     /* P1.16..23 defined as Outputs  */
 4263              		.loc 1 116 2 view .LVU1673
 120:./src/main.c  **** 	// init serial
 4264              		.loc 1 120 9 is_stmt 0 view .LVU1674
 4265 0000 0186A0E3 		mov	r8, #1048576
 114:./src/main.c  **** 	// init hardware
 4266              		.loc 1 114 1 view .LVU1675
 4267 0004 80402DE9 		push	{r7, lr}
 4268              	.LCFI10:
 4269              		.cfi_def_cfa_offset 8
 4270              		.cfi_offset 7, -8
 4271              		.cfi_offset 14, -4
 117:./src/main.c  **** 	// init timer
 4272              		.loc 1 117 9 view .LVU1676
 4273 0008 2C719FE5 		ldr	r7, .L372
 116:./src/main.c  **** 	IODIR1 |= 0x00100000;                     /* P1.16..23 defined as Outputs  */
 4274              		.loc 1 116 2 view .LVU1677
 4275 000c FEFFFFEB 		bl	HW_Init
 4276              	.LVL343:
 117:./src/main.c  **** 	// init timer
 4277              		.loc 1 117 2 is_stmt 1 view .LVU1678
 117:./src/main.c  **** 	// init timer
 4278              		.loc 1 117 9 is_stmt 0 view .LVU1679
 4279 0010 183097E5 		ldr	r3, [r7, #24]
 4280 0014 083083E1 		orr	r3, r3, r8
 4281 0018 183087E5 		str	r3, [r7, #24]
 119:./src/main.c  **** 	IOSET1 = 0x00100000;	//led on
 4282              		.loc 1 119 2 is_stmt 1 view .LVU1680
 4283 001c FEFFFFEB 		bl	SYSTIME_Init
 4284              	.LVL344:
 120:./src/main.c  **** 	// init serial
 4285              		.loc 1 120 2 view .LVU1681
 120:./src/main.c  **** 	// init serial
 4286              		.loc 1 120 9 is_stmt 0 view .LVU1682
 4287 0020 148087E5 		str	r8, [r7, #20]
 122:./src/main.c  **** 	// wait 180 millis for CAN DC/DC converters
 4288              		.loc 1 122 2 is_stmt 1 view .LVU1683
 4289 0024 FEFFFFEB 		bl	SER_UserInit
 4290              	.LVL345:
 124:./src/main.c  **** 	// init CAN
 4291              		.loc 1 124 2 view .LVU1684
 4292 0028 10019FE5 		ldr	r0, .L372+4
 4293 002c FEFFFFEB 		bl	SYSTIME_wait_us
 4294              	.LVL346:
 126:./src/main.c  **** 	CAN_SetBusMode ( CAN_BUS1, BUS_ON);
 4295              		.loc 1 126 2 view .LVU1685
 4296 0030 FEFFFFEB 		bl	CAN_UserInit
 4297              	.LVL347:
 127:./src/main.c  **** 	CanChnOpen = 1;
 4298              		.loc 1 127 2 view .LVU1686
 4299 0034 0010A0E3 		mov	r1, #0
 4300 0038 0100A0E1 		mov	r0, r1
 4301 003c FEFFFFEB 		bl	CAN_SetBusMode
 4302              	.LVL348:
 128:./src/main.c  **** 	CanBusMode = BUS_ON;
 4303              		.loc 1 128 2 view .LVU1687
 128:./src/main.c  **** 	CanBusMode = BUS_ON;
 4304              		.loc 1 128 13 is_stmt 0 view .LVU1688
 4305 0040 0130A0E3 		mov	r3, #1
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4306              		.loc 1 129 13 view .LVU1689
 4307 0044 0020A0E3 		mov	r2, #0
 128:./src/main.c  **** 	CanBusMode = BUS_ON;
 4308              		.loc 1 128 13 view .LVU1690
 4309 0048 F4509FE5 		ldr	r5, .L372+8
 4310 004c 2630C5E5 		strb	r3, [r5, #38]
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4311              		.loc 1 129 2 is_stmt 1 view .LVU1691
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4312              		.loc 1 129 13 is_stmt 0 view .LVU1692
 4313 0050 F0309FE5 		ldr	r3, .L372+12
 130:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 4314              		.loc 1 130 2 view .LVU1693
 4315 0054 E4009FE5 		ldr	r0, .L372+4
 129:./src/main.c  **** 	SYSTIME_wait_us ( 180000);
 4316              		.loc 1 129 13 view .LVU1694
 4317 0058 0420C3E5 		strb	r2, [r3, #4]
 130:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 4318              		.loc 1 130 2 is_stmt 1 view .LVU1695
 142:./src/main.c  **** //			#if testtimer
 4319              		.loc 1 142 7 is_stmt 0 view .LVU1696
 4320 005c E8609FE5 		ldr	r6, .L372+16
 130:./src/main.c  **** 	IOCLR1 = 0x00100000;	//led off
 4321              		.loc 1 130 2 view .LVU1697
 4322 0060 FEFFFFEB 		bl	SYSTIME_wait_us
 4323              	.LVL349:
 131:./src/main.c  **** 	// Set green LEDs for CAN1 and CAN2
 4324              		.loc 1 131 2 is_stmt 1 view .LVU1698
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4325              		.loc 1 151 6 is_stmt 0 view .LVU1699
 4326 0064 E4409FE5 		ldr	r4, .L372+20
 131:./src/main.c  **** 	// Set green LEDs for CAN1 and CAN2
 4327              		.loc 1 131 9 view .LVU1700
 4328 0068 1C8087E5 		str	r8, [r7, #28]
 4329 006c 0C0000EA 		b	.L361
 4330              	.L371:
 161:./src/main.c  **** 			if ( LED_toggleCAN1)
 4331              		.loc 1 161 5 is_stmt 1 view .LVU1701
 161:./src/main.c  **** 			if ( LED_toggleCAN1)
 4332              		.loc 1 161 20 is_stmt 0 view .LVU1702
 4333 0070 8030D5E5 		ldrb	r3, [r5, #128]	@ zero_extendqisi2
 4334 0074 012023E2 		eor	r2, r3, #1
 4335 0078 8020C5E5 		strb	r2, [r5, #128]
 162:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 4336              		.loc 1 162 4 is_stmt 1 view .LVU1703
 163:./src/main.c  **** 			else
 4337              		.loc 1 163 13 is_stmt 0 view .LVU1704
 4338 007c 0126A0E3 		mov	r2, #1048576
 162:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 4339              		.loc 1 162 7 view .LVU1705
 4340 0080 010053E3 		cmp	r3, #1
 163:./src/main.c  **** 			else
 4341              		.loc 1 163 13 view .LVU1706
 4342 0084 B0309FE5 		ldr	r3, .L372
 165:./src/main.c  **** 			}//IF: CAN chan. open
 4343              		.loc 1 165 13 view .LVU1707
 4344 0088 1C208305 		streq	r2, [r3, #28]
 162:./src/main.c  **** 			{	IOSET1 = 0x00100000;		}
 4345              		.loc 1 162 7 view .LVU1708
 4346 008c 0000000A 		beq	.L360
 4347              	.L368:
 168:./src/main.c  **** 			}
 4348              		.loc 1 168 12 view .LVU1709
 4349 0090 142083E5 		str	r2, [r3, #20]
 4350              	.L360:
 170:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 4351              		.loc 1 170 4 is_stmt 1 view .LVU1710
 170:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 4352              		.loc 1 170 18 is_stmt 0 view .LVU1711
 4353 0094 083096E5 		ldr	r3, [r6, #8]
 170:./src/main.c  **** 		}//IF: SYSTIME_DIFF
 4354              		.loc 1 170 16 view .LVU1712
 4355 0098 7C3085E5 		str	r3, [r5, #124]
 4356              	.L363:
 174:./src/main.c  **** 
 4357              		.loc 1 174 3 is_stmt 1 view .LVU1713
 4358 009c FEFFFFEB 		bl	ProcessMsgFromCan
 4359              	.LVL350:
 176:./src/main.c  **** 		
 4360              		.loc 1 176 3 view .LVU1714
 4361 00a0 FEFFFFEB 		bl	ProcessMsgFromSerial
 4362              	.LVL351:
 137:./src/main.c  **** 	{
 4363              		.loc 1 137 8 view .LVU1715
 4364              	.L361:
 137:./src/main.c  **** 	{
 4365              		.loc 1 137 2 view .LVU1716
 142:./src/main.c  **** //			#if testtimer
 4366              		.loc 1 142 3 view .LVU1717
 142:./src/main.c  **** //			#if testtimer
 4367              		.loc 1 142 7 is_stmt 0 view .LVU1718
 4368 00a4 083096E5 		ldr	r3, [r6, #8]
 4369 00a8 782095E5 		ldr	r2, [r5, #120]
 142:./src/main.c  **** //			#if testtimer
 4370              		.loc 1 142 50 view .LVU1719
 4371 00ac 020053E1 		cmp	r3, r2
 142:./src/main.c  **** //			#if testtimer
 4372              		.loc 1 142 7 view .LVU1720
 4373 00b0 083096E5 		ldr	r3, [r6, #8]
 4374 00b4 01304332 		subcc	r3, r3, #1
 4375 00b8 023043E0 		sub	r3, r3, r2
 142:./src/main.c  **** //			#if testtimer
 4376              		.loc 1 142 50 view .LVU1721
 4377 00bc FA0F53E3 		cmp	r3, #1000
 4378 00c0 0030A093 		movls	r3, #0
 4379 00c4 0130A083 		movhi	r3, #1
 142:./src/main.c  **** //			#if testtimer
 4380              		.loc 1 142 6 view .LVU1722
 4381 00c8 000053E3 		cmp	r3, #0
 4382 00cc 0800000A 		beq	.L365
 149:./src/main.c  **** //			Millitimer+=(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW)/1000);
 4383              		.loc 1 149 4 is_stmt 1 view .LVU1723
 149:./src/main.c  **** //			Millitimer+=(SYSTIME_DIFF (TimeDiff1000Hz, SYSTIME_NOW)/1000);
 4384              		.loc 1 149 14 is_stmt 0 view .LVU1724
 4385 00d0 B437D5E1 		ldrh	r3, [r5, #116]
 4386 00d4 013083E2 		add	r3, r3, #1
 4387 00d8 0338A0E1 		lsl	r3, r3, #16
 4388 00dc 2338A0E1 		lsr	r3, r3, #16
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4389              		.loc 1 151 4 is_stmt 1 view .LVU1725
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4390              		.loc 1 151 6 is_stmt 0 view .LVU1726
 4391 00e0 040053E1 		cmp	r3, r4
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4392              		.loc 1 151 25 is_stmt 1 view .LVU1727
 151:./src/main.c  **** 			//TimeDiff1000Hz+=1000;
 4393              		.loc 1 151 35 is_stmt 0 view .LVU1728
 4394 00e4 0030A083 		movhi	r3, #0
 4395 00e8 B437C5E1 		strh	r3, [r5, #116]	@ movhi
 153:./src/main.c  **** 		}
 4396              		.loc 1 153 4 is_stmt 1 view .LVU1729
 153:./src/main.c  **** 		}
 4397              		.loc 1 153 19 is_stmt 0 view .LVU1730
 4398 00ec 083096E5 		ldr	r3, [r6, #8]
 153:./src/main.c  **** 		}
 4399              		.loc 1 153 18 view .LVU1731
 4400 00f0 783085E5 		str	r3, [r5, #120]
 4401              	.L365:
 158:./src/main.c  **** 			if (CanChnOpen) {
 4402              		.loc 1 158 3 is_stmt 1 view .LVU1732
 158:./src/main.c  **** 			if (CanChnOpen) {
 4403              		.loc 1 158 7 is_stmt 0 view .LVU1733
 4404 00f4 083096E5 		ldr	r3, [r6, #8]
 4405 00f8 7C2095E5 		ldr	r2, [r5, #124]
 158:./src/main.c  **** 			if (CanChnOpen) {
 4406              		.loc 1 158 47 view .LVU1734
 4407 00fc 020053E1 		cmp	r3, r2
 158:./src/main.c  **** 			if (CanChnOpen) {
 4408              		.loc 1 158 7 view .LVU1735
 4409 0100 083096E5 		ldr	r3, [r6, #8]
 158:./src/main.c  **** 			if (CanChnOpen) {
 4410              		.loc 1 158 47 view .LVU1736
 4411 0104 48109FE5 		ldr	r1, .L372+24
 158:./src/main.c  **** 			if (CanChnOpen) {
 4412              		.loc 1 158 7 view .LVU1737
 4413 0108 01304332 		subcc	r3, r3, #1
 4414 010c 023043E0 		sub	r3, r3, r2
 158:./src/main.c  **** 			if (CanChnOpen) {
 4415              		.loc 1 158 47 view .LVU1738
 4416 0110 010053E1 		cmp	r3, r1
 4417 0114 0030A093 		movls	r3, #0
 4418 0118 0130A083 		movhi	r3, #1
 158:./src/main.c  **** 			if (CanChnOpen) {
 4419              		.loc 1 158 6 view .LVU1739
 4420 011c 000053E3 		cmp	r3, #0
 4421 0120 DDFFFF0A 		beq	.L363
 159:./src/main.c  **** 				// toggle LED
 4422              		.loc 1 159 4 is_stmt 1 view .LVU1740
 159:./src/main.c  **** 				// toggle LED
 4423              		.loc 1 159 7 is_stmt 0 view .LVU1741
 4424 0124 2630D5E5 		ldrb	r3, [r5, #38]	@ zero_extendqisi2
 4425 0128 000053E3 		cmp	r3, #0
 4426 012c CFFFFF1A 		bne	.L371
 168:./src/main.c  **** 			}
 4427              		.loc 1 168 5 is_stmt 1 view .LVU1742
 168:./src/main.c  **** 			}
 4428              		.loc 1 168 12 is_stmt 0 view .LVU1743
 4429 0130 0126A0E3 		mov	r2, #1048576
 4430 0134 00309FE5 		ldr	r3, .L372
 4431 0138 D4FFFFEA 		b	.L368
 4432              	.L373:
 4433              		.align	2
 4434              	.L372:
 4435 013c 008002E0 		.word	-536707072
 4436 0140 20BF0200 		.word	180000
 4437 0144 00000000 		.word	.LANCHOR0
 4438 0148 00000000 		.word	.LANCHOR1
 4439 014c 008000E0 		.word	-536838144
 4440 0150 60EA0000 		.word	60000
 4441 0154 20A10700 		.word	500000
 4442              		.cfi_endproc
 4443              	.LFE5:
 4445              		.global	UARTWriteResult
 4446              		.global	SerTxCongestionOccurred
 4447              		.global	SerRxOverrunOccurred
 4448              		.global	CanRcvTimestampOn
 4449              		.global	FilterMode
 4450              		.global	AutoPollAutoSend
 4451              		.global	AutostartMode
 4452              		.global	CanBusMode
 4453              		.global	CanInitialized
 4454              		.global	CanChnOpen
 4455              		.global	LedTimeDiff
 4456              		.global	TimeDiff1000Hz
 4457              		.global	Millitimer
 4458              		.global	CanSpeed
 4459              		.global	CanTxMsg
 4460              		.global	CanRxMsg
 4461              		.global	SerRcvBufPtr
 4462              		.global	SerRcvBuf
 4463              		.global	SerXmtBufPtr
 4464              		.global	SerXmtBuf
 4465              		.data
 4466              		.align	2
 4467              		.set	.LANCHOR1,. + 0
 4470              	CanSpeed:
 4471 0000 06000000 		.word	6
 4474              	CanBusMode:
 4475 0004 01       		.byte	1
 4478              	AutoPollAutoSend:
 4479 0005 01       		.byte	1
 4480              		.bss
 4481              		.align	2
 4482              		.set	.LANCHOR0,. + 0
 4485              	SerRcvBufPtr:
 4486 0000 00       		.space	1
 4487 0001 000000   		.space	3
 4490              	SerRcvBuf:
 4491 0004 00000000 		.space	33
 4491      00000000 
 4491      00000000 
 4491      00000000 
 4491      00000000 
 4494              	SerRxOverrunOccurred:
 4495 0025 00       		.space	1
 4498              	CanChnOpen:
 4499 0026 00       		.space	1
 4502              	CanInitialized:
 4503 0027 00       		.space	1
 4506              	SerXmtBuf:
 4507 0028 00000000 		.space	33
 4507      00000000 
 4507      00000000 
 4507      00000000 
 4507      00000000 
 4510              	SerXmtBufPtr:
 4511 0049 00       		.space	1
 4514              	AutostartMode:
 4515 004a 00       		.space	1
 4516 004b 00       		.space	1
 4519              	CanTxMsg:
 4520 004c 00000000 		.space	16
 4520      00000000 
 4520      00000000 
 4520      00000000 
 4523              	SerTxCongestionOccurred:
 4524 005c 00       		.space	1
 4527              	FilterMode:
 4528 005d 00       		.space	1
 4531              	CanRcvTimestampOn:
 4532 005e 00       		.space	1
 4533 005f 00       		.space	1
 4536              	UARTWriteResult:
 4537 0060 00000000 		.space	4
 4540              	CanRxMsg:
 4541 0064 00000000 		.space	16
 4541      00000000 
 4541      00000000 
 4541      00000000 
 4544              	Millitimer:
 4545 0074 0000     		.space	2
 4548              	i.0:
 4549 0076 00       		.space	1
 4550 0077 00       		.space	1
 4553              	TimeDiff1000Hz:
 4554 0078 00000000 		.space	4
 4557              	LedTimeDiff:
 4558 007c 00000000 		.space	4
 4561              	LED_toggleCAN1:
 4562 0080 00       		.space	1
 4563              		.text
 4564              	.Letext0:
 4565              		.file 2 "./inc/datatypes.h"
 4566              		.file 3 "./inc/can.h"
 4567              		.file 4 "./inc/serial.h"
 4568              		.file 5 "./inc/can_user.h"
 4569              		.file 6 "./inc/hardware.h"
 4570              		.file 7 "./inc/systime.h"
 4571              		.file 8 "./inc/ser_user.h"
 4572              		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:15     .text:00000000 $a
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:22     .text:00000000 hex2ascii
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:59     .text:00000014 ascii2hex
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:113    .rodata.str1.4:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:123    .text:00000044 ProcessMsgFromSerial
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:228    .text:000000dc $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:284    .text:000001ac $a
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:3308   .text:00000ed4 $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:3324   .text:00000f00 $a
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:3330   .text:00000f00 ProcessMsgFromCan
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4239   .text:00001294 $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4249   .text.startup:00000000 $a
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4255   .text.startup:00000000 main
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4435   .text.startup:0000013c $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4536   .bss:00000060 UARTWriteResult
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4523   .bss:0000005c SerTxCongestionOccurred
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4494   .bss:00000025 SerRxOverrunOccurred
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4531   .bss:0000005e CanRcvTimestampOn
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4527   .bss:0000005d FilterMode
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4478   .data:00000005 AutoPollAutoSend
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4514   .bss:0000004a AutostartMode
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4474   .data:00000004 CanBusMode
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4502   .bss:00000027 CanInitialized
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4498   .bss:00000026 CanChnOpen
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4557   .bss:0000007c LedTimeDiff
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4553   .bss:00000078 TimeDiff1000Hz
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4544   .bss:00000074 Millitimer
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4470   .data:00000000 CanSpeed
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4519   .bss:0000004c CanTxMsg
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4540   .bss:00000064 CanRxMsg
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4485   .bss:00000000 SerRcvBufPtr
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4490   .bss:00000004 SerRcvBuf
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4510   .bss:00000049 SerXmtBufPtr
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4506   .bss:00000028 SerXmtBuf
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4466   .data:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4481   .bss:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4548   .bss:00000076 i.0
C:\Users\Carmine\AppData\Local\Temp\ccq5KmPh.s:4561   .bss:00000080 LED_toggleCAN1

UNDEFINED SYMBOLS
SER_Read
SER_Write
CAN_UserWrite
CAN_SetBusMode
CAN_InitChannelMio
CAN_ReInitChannel
memcpy
CAN_UserRead
HW_Init
SYSTIME_Init
SER_UserInit
SYSTIME_wait_us
CAN_UserInit
