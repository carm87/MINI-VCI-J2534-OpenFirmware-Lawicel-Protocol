   1              		.cpu arm7tdmi
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"syscalls.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	2
  16              		.global	_read_r
  17              		.arch armv4t
  18              		.syntax unified
  19              		.arm
  20              		.fpu softvfp
  22              	_read_r:
  23              	.LVL0:
  24              	.LFB0:
  25              		.file 1 "./src/syscalls.c"
   1:./src/syscalls.c **** /***********************************************************************/
   2:./src/syscalls.c **** /*                                                                     */
   3:./src/syscalls.c **** /*  SYSCALLS.C:  System Calls Remapping                                */
   4:./src/syscalls.c **** /*  most of this is from newlib-lpc and a Keil-demo                    */
   5:./src/syscalls.c **** /*                                                                     */
   6:./src/syscalls.c **** /*  these are "reentrant functions" as needed by                       */
   7:./src/syscalls.c **** /*  the WinARM-newlib-config, see newlib-manual                        */
   8:./src/syscalls.c **** /*  collected and modified by Martin Thomas                            */
   9:./src/syscalls.c **** /*  TODO: some more work has to be done on this                        */
  10:./src/syscalls.c **** /***********************************************************************/
  11:./src/syscalls.c **** 
  12:./src/syscalls.c **** #include <stdlib.h>
  13:./src/syscalls.c **** #include <reent.h>
  14:./src/syscalls.c **** #include <sys/stat.h>
  15:./src/syscalls.c **** 
  16:./src/syscalls.c **** 
  17:./src/syscalls.c **** 
  18:./src/syscalls.c **** int isatty ( int file); /* avoid warning */
  19:./src/syscalls.c **** void _exit ( int n);
  20:./src/syscalls.c **** 
  21:./src/syscalls.c **** 
  22:./src/syscalls.c **** 
  23:./src/syscalls.c **** 
  24:./src/syscalls.c **** _ssize_t _read_r ( struct _reent *r, int file, void *ptr, size_t len)
  25:./src/syscalls.c **** {
  26              		.loc 1 25 1 view -0
  27              		.cfi_startproc
  28              		@ Function supports interworking.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  26:./src/syscalls.c **** 
  27:./src/syscalls.c **** *(char*)ptr = '\0';
  32              		.loc 1 27 1 view .LVU1
  33              		.loc 1 27 13 is_stmt 0 view .LVU2
  34 0000 0000A0E3 		mov	r0, #0
  35              	.LVL1:
  36              		.loc 1 27 13 view .LVU3
  37 0004 0000C2E5 		strb	r0, [r2]
  28:./src/syscalls.c **** 
  29:./src/syscalls.c **** return 0;
  38              		.loc 1 29 1 is_stmt 1 view .LVU4
  30:./src/syscalls.c **** }
  39              		.loc 1 30 1 is_stmt 0 view .LVU5
  40 0008 1EFF2FE1 		bx	lr
  41              		.cfi_endproc
  42              	.LFE0:
  44              		.align	2
  45              		.global	_write_r
  46              		.syntax unified
  47              		.arm
  48              		.fpu softvfp
  50              	_write_r:
  51              	.LVL2:
  52              	.LFB1:
  31:./src/syscalls.c **** 
  32:./src/syscalls.c **** 
  33:./src/syscalls.c **** 
  34:./src/syscalls.c **** _ssize_t _write_r ( struct _reent *r, int file, const void *ptr, size_t len)
  35:./src/syscalls.c **** {
  53              		.loc 1 35 1 is_stmt 1 view -0
  54              		.cfi_startproc
  55              		@ Function supports interworking.
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  36:./src/syscalls.c **** 
  37:./src/syscalls.c **** return  len;
  59              		.loc 1 37 1 view .LVU7
  38:./src/syscalls.c **** }
  60              		.loc 1 38 1 is_stmt 0 view .LVU8
  61 000c 0300A0E1 		mov	r0, r3
  62              	.LVL3:
  63              		.loc 1 38 1 view .LVU9
  64 0010 1EFF2FE1 		bx	lr
  65              		.cfi_endproc
  66              	.LFE1:
  68              		.align	2
  69              		.global	_close_r
  70              		.syntax unified
  71              		.arm
  72              		.fpu softvfp
  74              	_close_r:
  75              	.LVL4:
  76              	.LFB2:
  39:./src/syscalls.c **** 
  40:./src/syscalls.c **** 
  41:./src/syscalls.c **** 
  42:./src/syscalls.c **** int _close_r ( struct _reent *r, int file)
  43:./src/syscalls.c **** {
  77              		.loc 1 43 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		@ Function supports interworking.
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  44:./src/syscalls.c **** 
  45:./src/syscalls.c **** return 0;
  83              		.loc 1 45 1 view .LVU11
  46:./src/syscalls.c **** }
  84              		.loc 1 46 1 is_stmt 0 view .LVU12
  85 0014 0000A0E3 		mov	r0, #0
  86              	.LVL5:
  87              		.loc 1 46 1 view .LVU13
  88 0018 1EFF2FE1 		bx	lr
  89              		.cfi_endproc
  90              	.LFE2:
  92              		.align	2
  93              		.global	_lseek_r
  94              		.syntax unified
  95              		.arm
  96              		.fpu softvfp
  98              	_lseek_r:
  99              	.LVL6:
 100              	.LFB3:
  47:./src/syscalls.c **** 
  48:./src/syscalls.c **** 
  49:./src/syscalls.c **** 
  50:./src/syscalls.c **** _off_t _lseek_r ( struct _reent *r, int file, off_t ptr, int dir)
  51:./src/syscalls.c **** {
 101              		.loc 1 51 1 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ Function supports interworking.
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
  52:./src/syscalls.c **** 
  53:./src/syscalls.c **** return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
 107              		.loc 1 53 1 view .LVU15
  54:./src/syscalls.c **** }
 108              		.loc 1 54 1 is_stmt 0 view .LVU16
 109 001c 0000A0E3 		mov	r0, #0
 110              	.LVL7:
 111              		.loc 1 54 1 view .LVU17
 112 0020 1EFF2FE1 		bx	lr
 113              		.cfi_endproc
 114              	.LFE3:
 116              		.align	2
 117              		.global	_fstat_r
 118              		.syntax unified
 119              		.arm
 120              		.fpu softvfp
 122              	_fstat_r:
 123              	.LVL8:
 124              	.LFB4:
  55:./src/syscalls.c **** 
  56:./src/syscalls.c **** 
  57:./src/syscalls.c **** 
  58:./src/syscalls.c **** 
  59:./src/syscalls.c **** int _fstat_r ( struct _reent *r, int file, struct stat *st)
  60:./src/syscalls.c **** {
 125              		.loc 1 60 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ Function supports interworking.
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
  61:./src/syscalls.c **** 
  62:./src/syscalls.c **** /*  Always set as character device.				*/
  63:./src/syscalls.c **** st->st_mode = S_IFCHR;	
 131              		.loc 1 63 1 view .LVU19
 132              		.loc 1 63 13 is_stmt 0 view .LVU20
 133 0024 023AA0E3 		mov	r3, #8192
  64:./src/syscalls.c **** /* assigned to strong type with implicit 	*/
  65:./src/syscalls.c **** /* signed/unsigned conversion.  Required by 	*/
  66:./src/syscalls.c **** /* newlib.					*/
  67:./src/syscalls.c **** 
  68:./src/syscalls.c **** return 0;
  69:./src/syscalls.c **** }
 134              		.loc 1 69 1 view .LVU21
 135 0028 0000A0E3 		mov	r0, #0
 136              	.LVL9:
  63:./src/syscalls.c **** /* assigned to strong type with implicit 	*/
 137              		.loc 1 63 13 view .LVU22
 138 002c 043082E5 		str	r3, [r2, #4]
  68:./src/syscalls.c **** }
 139              		.loc 1 68 1 is_stmt 1 view .LVU23
 140              		.loc 1 69 1 is_stmt 0 view .LVU24
 141 0030 1EFF2FE1 		bx	lr
 142              		.cfi_endproc
 143              	.LFE4:
 145              		.align	2
 146              		.global	isatty
 147              		.syntax unified
 148              		.arm
 149              		.fpu softvfp
 151              	isatty:
 152              	.LVL10:
 153              	.LFB5:
  70:./src/syscalls.c **** 
  71:./src/syscalls.c **** 
  72:./src/syscalls.c **** 
  73:./src/syscalls.c **** 
  74:./src/syscalls.c **** 
  75:./src/syscalls.c **** int isatty(int file)
  76:./src/syscalls.c **** {
 154              		.loc 1 76 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ Function supports interworking.
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
  77:./src/syscalls.c **** 
  78:./src/syscalls.c **** return 1;
 160              		.loc 1 78 1 view .LVU26
  79:./src/syscalls.c **** }
 161              		.loc 1 79 1 is_stmt 0 view .LVU27
 162 0034 0100A0E3 		mov	r0, #1
 163              	.LVL11:
 164              		.loc 1 79 1 view .LVU28
 165 0038 1EFF2FE1 		bx	lr
 166              		.cfi_endproc
 167              	.LFE5:
 169              		.align	2
 170              		.global	_exit
 171              		.syntax unified
 172              		.arm
 173              		.fpu softvfp
 175              	_exit:
 176              	.LFB6:
  80:./src/syscalls.c **** 
  81:./src/syscalls.c **** 
  82:./src/syscalls.c **** 
  83:./src/syscalls.c **** 
  84:./src/syscalls.c **** void _exit ( int n)
  85:./src/syscalls.c **** {
 177              		.loc 1 85 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ Function supports interworking.
 180              		@ Volatile: function does not return.
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              	.LVL12:
 185              	.L9:
  86:./src/syscalls.c **** 
  87:./src/syscalls.c **** while (1)
 186              		.loc 1 87 1 discriminator 1 view .LVU30
  88:./src/syscalls.c ****  {}
 187              		.loc 1 88 3 discriminator 1 view .LVU31
  87:./src/syscalls.c ****  {}
 188              		.loc 1 87 7 discriminator 1 view .LVU32
 189 003c FEFFFFEA 		b	.L9
 190              		.cfi_endproc
 191              	.LFE6:
 193              		.align	2
 194              		.global	_sbrk_r
 195              		.syntax unified
 196              		.arm
 197              		.fpu softvfp
 199              	_sbrk_r:
 200              	.LVL13:
 201              	.LFB7:
  89:./src/syscalls.c **** 
  90:./src/syscalls.c **** }
  91:./src/syscalls.c **** 
  92:./src/syscalls.c **** 
  93:./src/syscalls.c **** 
  94:./src/syscalls.c **** 
  95:./src/syscalls.c **** 
  96:./src/syscalls.c **** /* "malloc clue function" */
  97:./src/syscalls.c **** 
  98:./src/syscalls.c **** 	/**** Locally used variables. ****/
  99:./src/syscalls.c **** extern char end[];              /*  end is set in the linker command 	*/
 100:./src/syscalls.c **** 				/* file and is the end of statically 	*/
 101:./src/syscalls.c **** 				/* allocated data (thus start of heap).	*/
 102:./src/syscalls.c **** 
 103:./src/syscalls.c **** static char *heap_ptr;		/* Points to current end of the heap.	*/
 104:./src/syscalls.c **** 
 105:./src/syscalls.c **** /************************** _sbrk_r *************************************/
 106:./src/syscalls.c **** /*  Support function.  Adjusts end of heap to provide more memory to	*/
 107:./src/syscalls.c **** /* memory allocator. Simple and dumb with no sanity checks.		*/
 108:./src/syscalls.c **** /*  struct _reent *r	-- re-entrancy structure, used by newlib to 	*/
 109:./src/syscalls.c **** /*			support multiple threads of operation.		*/
 110:./src/syscalls.c **** /*  ptrdiff_t nbytes	-- number of bytes to add.			*/
 111:./src/syscalls.c **** /*  Returns pointer to start of new heap area.				*/
 112:./src/syscalls.c **** /*  Note:  This implementation is not thread safe (despite taking a	*/
 113:./src/syscalls.c **** /* _reent structure as a parameter).  					*/
 114:./src/syscalls.c **** /*  Since _s_r is not used in the current implementation, the following	*/
 115:./src/syscalls.c **** /* messages must be suppressed.						*/
 116:./src/syscalls.c **** 
 117:./src/syscalls.c **** void * _sbrk_r ( struct _reent *_s_r, ptrdiff_t nbytes)
 118:./src/syscalls.c **** {
 202              		.loc 1 118 1 view -0
 203              		.cfi_startproc
 204              		@ Function supports interworking.
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 119:./src/syscalls.c **** 	char  *base;		/*  errno should be set to  ENOMEM on error	*/
 208              		.loc 1 119 2 view .LVU34
 120:./src/syscalls.c **** 
 121:./src/syscalls.c **** 	if (!heap_ptr) {	/*  Initialize if first time through.		*/
 209              		.loc 1 121 2 view .LVU35
 210              		.loc 1 121 6 is_stmt 0 view .LVU36
 211 0040 18309FE5 		ldr	r3, .L13
 212 0044 000093E5 		ldr	r0, [r3]
 213              	.LVL14:
 214              		.loc 1 121 6 view .LVU37
 215 0048 14209FE5 		ldr	r2, .L13+4
 216 004c 000050E3 		cmp	r0, #0
 217 0050 0200A001 		moveq	r0, r2
 122:./src/syscalls.c **** 		heap_ptr = end;
 123:./src/syscalls.c **** 	}
 124:./src/syscalls.c **** 	base = heap_ptr;	/*  Point to end of heap.			*/
 218              		.loc 1 124 2 is_stmt 1 view .LVU38
 219              	.LVL15:
 125:./src/syscalls.c **** 	heap_ptr += nbytes;	/*  Increase heap.				*/
 220              		.loc 1 125 2 view .LVU39
 221              		.loc 1 125 11 is_stmt 0 view .LVU40
 222 0054 011080E0 		add	r1, r0, r1
 223              	.LVL16:
 224              		.loc 1 125 11 view .LVU41
 225 0058 001083E5 		str	r1, [r3]
 226              	.LVL17:
 126:./src/syscalls.c **** 	
 127:./src/syscalls.c **** 	return base;		/*  Return pointer to start of new heap area.	*/
 227              		.loc 1 127 2 is_stmt 1 view .LVU42
 128:./src/syscalls.c **** }
 228              		.loc 1 128 1 is_stmt 0 view .LVU43
 229 005c 1EFF2FE1 		bx	lr
 230              	.L14:
 231              		.align	2
 232              	.L13:
 233 0060 00000000 		.word	.LANCHOR0
 234 0064 00000000 		.word	end
 235              		.cfi_endproc
 236              	.LFE7:
 238              		.bss
 239              		.align	2
 240              		.set	.LANCHOR0,. + 0
 243              	heap_ptr:
 244 0000 00000000 		.space	4
 245              		.text
 246              	.Letext0:
 247              		.file 2 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\\s
 248              		.file 3 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\machine\\_default_t
 249              		.file 4 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 250              		.file 5 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 251              		.file 6 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 252              		.file 7 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\_timeval.h"
 253              		.file 8 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\_timespec.h"
 254              		.file 9 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\types.h"
 255              		.file 10 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\sys\\stat.h"
 256              		.file 11 "c:\\peak-devpack\\compiler\\10 2020-q4-major\\arm-none-eabi\\include\\reent.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:15     .text:00000000 $a
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:22     .text:00000000 _read_r
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:50     .text:0000000c _write_r
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:74     .text:00000014 _close_r
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:98     .text:0000001c _lseek_r
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:122    .text:00000024 _fstat_r
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:151    .text:00000034 isatty
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:175    .text:0000003c _exit
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:199    .text:00000040 _sbrk_r
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:233    .text:00000060 $d
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:239    .bss:00000000 $d
C:\Users\Carmine\AppData\Local\Temp\ccqrfk9w.s:243    .bss:00000000 heap_ptr

UNDEFINED SYMBOLS
end
